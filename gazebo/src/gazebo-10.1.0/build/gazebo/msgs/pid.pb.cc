// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pid.proto

#include "pid.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace gazebo {
namespace msgs {
class PIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PID> _instance;
} _PID_default_instance_;
}  // namespace msgs
}  // namespace gazebo
static void InitDefaultsscc_info_PID_pid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_PID_default_instance_;
    new (ptr) ::gazebo::msgs::PID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::PID::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PID_pid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PID_pid_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pid_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pid_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pid_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pid_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::PID, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::PID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::PID, target_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::PID, p_gain_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::PID, i_gain_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::PID, d_gain_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::PID, i_max_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::PID, i_min_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::PID, limit_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::gazebo::msgs::PID)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_PID_default_instance_),
};

const char descriptor_table_protodef_pid_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tpid.proto\022\013gazebo.msgs\"\207\001\n\003PID\022\021\n\006targ"
  "et\030\001 \001(\001:\0010\022\021\n\006p_gain\030\002 \001(\001:\0010\022\021\n\006i_gain"
  "\030\003 \001(\001:\0010\022\021\n\006d_gain\030\004 \001(\001:\0010\022\020\n\005i_max\030\005 "
  "\001(\001:\0010\022\020\n\005i_min\030\006 \001(\001:\0010\022\020\n\005limit\030\007 \001(\001:"
  "\0010"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pid_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pid_2eproto_sccs[1] = {
  &scc_info_PID_pid_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pid_2eproto_once;
static bool descriptor_table_pid_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pid_2eproto = {
  &descriptor_table_pid_2eproto_initialized, descriptor_table_protodef_pid_2eproto, "pid.proto", 162,
  &descriptor_table_pid_2eproto_once, descriptor_table_pid_2eproto_sccs, descriptor_table_pid_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_pid_2eproto::offsets,
  file_level_metadata_pid_2eproto, 1, file_level_enum_descriptors_pid_2eproto, file_level_service_descriptors_pid_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pid_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pid_2eproto), true);
namespace gazebo {
namespace msgs {

// ===================================================================

void PID::InitAsDefaultInstance() {
}
class PID::_Internal {
 public:
  using HasBits = decltype(std::declval<PID>()._has_bits_);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_p_gain(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_i_gain(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_d_gain(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_i_max(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_i_min(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

PID::PID()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.PID)
}
PID::PID(const PID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&target_, &from.target_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&target_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.PID)
}

void PID::SharedCtor() {
  ::memset(&target_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&target_)) + sizeof(limit_));
}

PID::~PID() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.PID)
  SharedDtor();
}

void PID::SharedDtor() {
}

void PID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PID& PID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PID_pid_2eproto.base);
  return *internal_default_instance();
}


void PID::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.PID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&target_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&limit_) -
        reinterpret_cast<char*>(&target_)) + sizeof(limit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double target = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_target(&has_bits);
          target_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double p_gain = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_p_gain(&has_bits);
          p_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double i_gain = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_i_gain(&has_bits);
          i_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double d_gain = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_d_gain(&has_bits);
          d_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double i_max = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_i_max(&has_bits);
          i_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double i_min = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_i_min(&has_bits);
          i_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double limit = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_limit(&has_bits);
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.PID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double target = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_target(), target);
  }

  // optional double p_gain = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_p_gain(), target);
  }

  // optional double i_gain = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_i_gain(), target);
  }

  // optional double d_gain = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_d_gain(), target);
  }

  // optional double i_max = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_i_max(), target);
  }

  // optional double i_min = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_i_min(), target);
  }

  // optional double limit = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.PID)
  return target;
}

size_t PID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.PID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional double target = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double p_gain = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double i_gain = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double d_gain = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double i_max = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double i_min = 6 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double limit = 7 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.PID)
  GOOGLE_DCHECK_NE(&from, this);
  const PID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.PID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.PID)
    MergeFrom(*source);
  }
}

void PID::MergeFrom(const PID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.PID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      target_ = from.target_;
    }
    if (cached_has_bits & 0x00000002u) {
      p_gain_ = from.p_gain_;
    }
    if (cached_has_bits & 0x00000004u) {
      i_gain_ = from.i_gain_;
    }
    if (cached_has_bits & 0x00000008u) {
      d_gain_ = from.d_gain_;
    }
    if (cached_has_bits & 0x00000010u) {
      i_max_ = from.i_max_;
    }
    if (cached_has_bits & 0x00000020u) {
      i_min_ = from.i_min_;
    }
    if (cached_has_bits & 0x00000040u) {
      limit_ = from.limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.PID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PID::CopyFrom(const PID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.PID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PID::IsInitialized() const {
  return true;
}

void PID::InternalSwap(PID* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(target_, other->target_);
  swap(p_gain_, other->p_gain_);
  swap(i_gain_, other->i_gain_);
  swap(d_gain_, other->d_gain_);
  swap(i_max_, other->i_max_);
  swap(i_min_, other->i_min_);
  swap(limit_, other->limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PID::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gazebo::msgs::PID* Arena::CreateMaybeMessage< ::gazebo::msgs::PID >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::PID >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

GZ_REGISTER_STATIC_MSG("gazebo.msgs.PID", PID)
// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
