// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_cmd.proto

#include "user_cmd.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_light_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Light_light_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Model_model_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WorldControl_world_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_wrench_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Wrench_wrench_2eproto;
namespace gazebo {
namespace msgs {
class UserCmdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserCmd> _instance;
} _UserCmd_default_instance_;
}  // namespace msgs
}  // namespace gazebo
static void InitDefaultsscc_info_UserCmd_user_5fcmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_UserCmd_default_instance_;
    new (ptr) ::gazebo::msgs::UserCmd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::UserCmd::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_UserCmd_user_5fcmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_UserCmd_user_5fcmd_2eproto}, {
      &scc_info_Model_model_2eproto.base,
      &scc_info_Light_light_2eproto.base,
      &scc_info_WorldControl_world_5fcontrol_2eproto.base,
      &scc_info_Wrench_wrench_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_user_5fcmd_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_user_5fcmd_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_user_5fcmd_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_user_5fcmd_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::UserCmd, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::UserCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::UserCmd, id_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::UserCmd, description_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::UserCmd, type_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::UserCmd, model_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::UserCmd, light_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::UserCmd, entity_name_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::UserCmd, world_control_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::UserCmd, wrench_),
  4,
  0,
  5,
  ~0u,
  ~0u,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::gazebo::msgs::UserCmd)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_UserCmd_default_instance_),
};

const char descriptor_table_protodef_user_5fcmd_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016user_cmd.proto\022\013gazebo.msgs\032\013light.pro"
  "to\032\013model.proto\032\023world_control.proto\032\014wr"
  "ench.proto\"\305\002\n\007UserCmd\022\n\n\002id\030\001 \001(\r\022\023\n\013de"
  "scription\030\002 \002(\t\022\'\n\004type\030\003 \002(\0162\031.gazebo.m"
  "sgs.UserCmd.Type\022!\n\005model\030\004 \003(\0132\022.gazebo"
  ".msgs.Model\022!\n\005light\030\005 \003(\0132\022.gazebo.msgs"
  ".Light\022\023\n\013entity_name\030\006 \001(\t\0220\n\rworld_con"
  "trol\030\007 \001(\0132\031.gazebo.msgs.WorldControl\022#\n"
  "\006wrench\030\010 \001(\0132\023.gazebo.msgs.Wrench\">\n\004Ty"
  "pe\022\n\n\006MOVING\020\001\022\021\n\rWORLD_CONTROL\020\002\022\n\n\006WRE"
  "NCH\020\003\022\013\n\007SCALING\020\004"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_user_5fcmd_2eproto_deps[4] = {
  &::descriptor_table_light_2eproto,
  &::descriptor_table_model_2eproto,
  &::descriptor_table_world_5fcontrol_2eproto,
  &::descriptor_table_wrench_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_user_5fcmd_2eproto_sccs[1] = {
  &scc_info_UserCmd_user_5fcmd_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_user_5fcmd_2eproto_once;
static bool descriptor_table_user_5fcmd_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_user_5fcmd_2eproto = {
  &descriptor_table_user_5fcmd_2eproto_initialized, descriptor_table_protodef_user_5fcmd_2eproto, "user_cmd.proto", 418,
  &descriptor_table_user_5fcmd_2eproto_once, descriptor_table_user_5fcmd_2eproto_sccs, descriptor_table_user_5fcmd_2eproto_deps, 1, 4,
  schemas, file_default_instances, TableStruct_user_5fcmd_2eproto::offsets,
  file_level_metadata_user_5fcmd_2eproto, 1, file_level_enum_descriptors_user_5fcmd_2eproto, file_level_service_descriptors_user_5fcmd_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_user_5fcmd_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_user_5fcmd_2eproto), true);
namespace gazebo {
namespace msgs {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserCmd_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_user_5fcmd_2eproto);
  return file_level_enum_descriptors_user_5fcmd_2eproto[0];
}
bool UserCmd_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UserCmd_Type UserCmd::MOVING;
constexpr UserCmd_Type UserCmd::WORLD_CONTROL;
constexpr UserCmd_Type UserCmd::WRENCH;
constexpr UserCmd_Type UserCmd::SCALING;
constexpr UserCmd_Type UserCmd::Type_MIN;
constexpr UserCmd_Type UserCmd::Type_MAX;
constexpr int UserCmd::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void UserCmd::InitAsDefaultInstance() {
  ::gazebo::msgs::_UserCmd_default_instance_._instance.get_mutable()->world_control_ = const_cast< ::gazebo::msgs::WorldControl*>(
      ::gazebo::msgs::WorldControl::internal_default_instance());
  ::gazebo::msgs::_UserCmd_default_instance_._instance.get_mutable()->wrench_ = const_cast< ::gazebo::msgs::Wrench*>(
      ::gazebo::msgs::Wrench::internal_default_instance());
}
class UserCmd::_Internal {
 public:
  using HasBits = decltype(std::declval<UserCmd>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_entity_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::gazebo::msgs::WorldControl& world_control(const UserCmd* msg);
  static void set_has_world_control(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::gazebo::msgs::Wrench& wrench(const UserCmd* msg);
  static void set_has_wrench(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::gazebo::msgs::WorldControl&
UserCmd::_Internal::world_control(const UserCmd* msg) {
  return *msg->world_control_;
}
const ::gazebo::msgs::Wrench&
UserCmd::_Internal::wrench(const UserCmd* msg) {
  return *msg->wrench_;
}
void UserCmd::clear_model() {
  model_.Clear();
}
void UserCmd::clear_light() {
  light_.Clear();
}
void UserCmd::clear_world_control() {
  if (world_control_ != nullptr) world_control_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void UserCmd::clear_wrench() {
  if (wrench_ != nullptr) wrench_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
UserCmd::UserCmd()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.UserCmd)
}
UserCmd::UserCmd(const UserCmd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      model_(from.model_),
      light_(from.light_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  entity_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_entity_name()) {
    entity_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_name_);
  }
  if (from._internal_has_world_control()) {
    world_control_ = new ::gazebo::msgs::WorldControl(*from.world_control_);
  } else {
    world_control_ = nullptr;
  }
  if (from._internal_has_wrench()) {
    wrench_ = new ::gazebo::msgs::Wrench(*from.wrench_);
  } else {
    wrench_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.UserCmd)
}

void UserCmd::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserCmd_user_5fcmd_2eproto.base);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entity_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&world_control_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&world_control_)) + sizeof(id_));
  type_ = 1;
}

UserCmd::~UserCmd() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.UserCmd)
  SharedDtor();
}

void UserCmd::SharedDtor() {
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entity_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete world_control_;
  if (this != internal_default_instance()) delete wrench_;
}

void UserCmd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserCmd& UserCmd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserCmd_user_5fcmd_2eproto.base);
  return *internal_default_instance();
}


void UserCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.UserCmd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_.Clear();
  light_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      description_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      entity_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(world_control_ != nullptr);
      world_control_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(wrench_ != nullptr);
      wrench_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    id_ = 0u;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UserCmd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gazebo.msgs.UserCmd.description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .gazebo.msgs.UserCmd.Type type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::gazebo::msgs::UserCmd_Type_IsValid(val))) {
            _internal_set_type(static_cast<::gazebo::msgs::UserCmd_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .gazebo.msgs.Model model = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .gazebo.msgs.Light light = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_light(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string entity_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_entity_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gazebo.msgs.UserCmd.entity_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.WorldControl world_control = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_world_control(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.Wrench wrench = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_wrench(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserCmd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.UserCmd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // required string description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.UserCmd.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // required .gazebo.msgs.UserCmd.Type type = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // repeated .gazebo.msgs.Model model = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_model_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_model(i), target, stream);
  }

  // repeated .gazebo.msgs.Light light = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_light_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_light(i), target, stream);
  }

  // optional string entity_name = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_entity_name().data(), static_cast<int>(this->_internal_entity_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.UserCmd.entity_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_entity_name(), target);
  }

  // optional .gazebo.msgs.WorldControl world_control = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::world_control(this), target, stream);
  }

  // optional .gazebo.msgs.Wrench wrench = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::wrench(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.UserCmd)
  return target;
}

size_t UserCmd::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gazebo.msgs.UserCmd)
  size_t total_size = 0;

  if (_internal_has_description()) {
    // required string description = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  if (_internal_has_type()) {
    // required .gazebo.msgs.UserCmd.Type type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return total_size;
}
size_t UserCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.UserCmd)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000021) ^ 0x00000021) == 0) {  // All required fields are present.
    // required string description = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());

    // required .gazebo.msgs.UserCmd.Type type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gazebo.msgs.Model model = 4;
  total_size += 1UL * this->_internal_model_size();
  for (const auto& msg : this->model_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gazebo.msgs.Light light = 5;
  total_size += 1UL * this->_internal_light_size();
  for (const auto& msg : this->light_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional string entity_name = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_entity_name());
    }

    // optional .gazebo.msgs.WorldControl world_control = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *world_control_);
    }

    // optional .gazebo.msgs.Wrench wrench = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *wrench_);
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserCmd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.UserCmd)
  GOOGLE_DCHECK_NE(&from, this);
  const UserCmd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserCmd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.UserCmd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.UserCmd)
    MergeFrom(*source);
  }
}

void UserCmd::MergeFrom(const UserCmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.UserCmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  model_.MergeFrom(from.model_);
  light_.MergeFrom(from.light_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      entity_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_world_control()->::gazebo::msgs::WorldControl::MergeFrom(from._internal_world_control());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_wrench()->::gazebo::msgs::Wrench::MergeFrom(from._internal_wrench());
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserCmd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.UserCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserCmd::CopyFrom(const UserCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.UserCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000021) != 0x00000021) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(model_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(light_)) return false;
  if (_internal_has_wrench()) {
    if (!wrench_->IsInitialized()) return false;
  }
  return true;
}

void UserCmd::InternalSwap(UserCmd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  model_.InternalSwap(&other->model_);
  light_.InternalSwap(&other->light_);
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  entity_name_.Swap(&other->entity_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(world_control_, other->world_control_);
  swap(wrench_, other->wrench_);
  swap(id_, other->id_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserCmd::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gazebo::msgs::UserCmd* Arena::CreateMaybeMessage< ::gazebo::msgs::UserCmd >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::UserCmd >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

GZ_REGISTER_STATIC_MSG("gazebo.msgs.UserCmd", UserCmd)
// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
