// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_cmd_stats.proto

#include "user_cmd_stats.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_user_5fcmd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_UserCmd_user_5fcmd_2eproto;
namespace gazebo {
namespace msgs {
class UserCmdStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserCmdStats> _instance;
} _UserCmdStats_default_instance_;
}  // namespace msgs
}  // namespace gazebo
static void InitDefaultsscc_info_UserCmdStats_user_5fcmd_5fstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_UserCmdStats_default_instance_;
    new (ptr) ::gazebo::msgs::UserCmdStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::UserCmdStats::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserCmdStats_user_5fcmd_5fstats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserCmdStats_user_5fcmd_5fstats_2eproto}, {
      &scc_info_UserCmd_user_5fcmd_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_user_5fcmd_5fstats_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_user_5fcmd_5fstats_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_user_5fcmd_5fstats_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_user_5fcmd_5fstats_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::UserCmdStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::UserCmdStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::UserCmdStats, undo_cmd_count_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::UserCmdStats, redo_cmd_count_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::UserCmdStats, undo_cmd_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::UserCmdStats, redo_cmd_),
  0,
  1,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::gazebo::msgs::UserCmdStats)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_UserCmdStats_default_instance_),
};

const char descriptor_table_protodef_user_5fcmd_5fstats_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024user_cmd_stats.proto\022\013gazebo.msgs\032\016use"
  "r_cmd.proto\"\216\001\n\014UserCmdStats\022\026\n\016undo_cmd"
  "_count\030\001 \002(\r\022\026\n\016redo_cmd_count\030\002 \002(\r\022&\n\010"
  "undo_cmd\030\003 \003(\0132\024.gazebo.msgs.UserCmd\022&\n\010"
  "redo_cmd\030\004 \003(\0132\024.gazebo.msgs.UserCmd"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_user_5fcmd_5fstats_2eproto_deps[1] = {
  &::descriptor_table_user_5fcmd_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_user_5fcmd_5fstats_2eproto_sccs[1] = {
  &scc_info_UserCmdStats_user_5fcmd_5fstats_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_user_5fcmd_5fstats_2eproto_once;
static bool descriptor_table_user_5fcmd_5fstats_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_user_5fcmd_5fstats_2eproto = {
  &descriptor_table_user_5fcmd_5fstats_2eproto_initialized, descriptor_table_protodef_user_5fcmd_5fstats_2eproto, "user_cmd_stats.proto", 196,
  &descriptor_table_user_5fcmd_5fstats_2eproto_once, descriptor_table_user_5fcmd_5fstats_2eproto_sccs, descriptor_table_user_5fcmd_5fstats_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_user_5fcmd_5fstats_2eproto::offsets,
  file_level_metadata_user_5fcmd_5fstats_2eproto, 1, file_level_enum_descriptors_user_5fcmd_5fstats_2eproto, file_level_service_descriptors_user_5fcmd_5fstats_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_user_5fcmd_5fstats_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_user_5fcmd_5fstats_2eproto), true);
namespace gazebo {
namespace msgs {

// ===================================================================

void UserCmdStats::InitAsDefaultInstance() {
}
class UserCmdStats::_Internal {
 public:
  using HasBits = decltype(std::declval<UserCmdStats>()._has_bits_);
  static void set_has_undo_cmd_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_redo_cmd_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void UserCmdStats::clear_undo_cmd() {
  undo_cmd_.Clear();
}
void UserCmdStats::clear_redo_cmd() {
  redo_cmd_.Clear();
}
UserCmdStats::UserCmdStats()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.UserCmdStats)
}
UserCmdStats::UserCmdStats(const UserCmdStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      undo_cmd_(from.undo_cmd_),
      redo_cmd_(from.redo_cmd_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&undo_cmd_count_, &from.undo_cmd_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&redo_cmd_count_) -
    reinterpret_cast<char*>(&undo_cmd_count_)) + sizeof(redo_cmd_count_));
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.UserCmdStats)
}

void UserCmdStats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserCmdStats_user_5fcmd_5fstats_2eproto.base);
  ::memset(&undo_cmd_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&redo_cmd_count_) -
      reinterpret_cast<char*>(&undo_cmd_count_)) + sizeof(redo_cmd_count_));
}

UserCmdStats::~UserCmdStats() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.UserCmdStats)
  SharedDtor();
}

void UserCmdStats::SharedDtor() {
}

void UserCmdStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserCmdStats& UserCmdStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserCmdStats_user_5fcmd_5fstats_2eproto.base);
  return *internal_default_instance();
}


void UserCmdStats::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.UserCmdStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  undo_cmd_.Clear();
  redo_cmd_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&undo_cmd_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&redo_cmd_count_) -
        reinterpret_cast<char*>(&undo_cmd_count_)) + sizeof(redo_cmd_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UserCmdStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 undo_cmd_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_undo_cmd_count(&has_bits);
          undo_cmd_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 redo_cmd_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_redo_cmd_count(&has_bits);
          redo_cmd_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .gazebo.msgs.UserCmd undo_cmd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_undo_cmd(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .gazebo.msgs.UserCmd redo_cmd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_redo_cmd(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserCmdStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.UserCmdStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 undo_cmd_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_undo_cmd_count(), target);
  }

  // required uint32 redo_cmd_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_redo_cmd_count(), target);
  }

  // repeated .gazebo.msgs.UserCmd undo_cmd = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_undo_cmd_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_undo_cmd(i), target, stream);
  }

  // repeated .gazebo.msgs.UserCmd redo_cmd = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_redo_cmd_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_redo_cmd(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.UserCmdStats)
  return target;
}

size_t UserCmdStats::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gazebo.msgs.UserCmdStats)
  size_t total_size = 0;

  if (_internal_has_undo_cmd_count()) {
    // required uint32 undo_cmd_count = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_undo_cmd_count());
  }

  if (_internal_has_redo_cmd_count()) {
    // required uint32 redo_cmd_count = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_redo_cmd_count());
  }

  return total_size;
}
size_t UserCmdStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.UserCmdStats)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 undo_cmd_count = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_undo_cmd_count());

    // required uint32 redo_cmd_count = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_redo_cmd_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gazebo.msgs.UserCmd undo_cmd = 3;
  total_size += 1UL * this->_internal_undo_cmd_size();
  for (const auto& msg : this->undo_cmd_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gazebo.msgs.UserCmd redo_cmd = 4;
  total_size += 1UL * this->_internal_redo_cmd_size();
  for (const auto& msg : this->redo_cmd_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserCmdStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.UserCmdStats)
  GOOGLE_DCHECK_NE(&from, this);
  const UserCmdStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserCmdStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.UserCmdStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.UserCmdStats)
    MergeFrom(*source);
  }
}

void UserCmdStats::MergeFrom(const UserCmdStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.UserCmdStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  undo_cmd_.MergeFrom(from.undo_cmd_);
  redo_cmd_.MergeFrom(from.redo_cmd_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      undo_cmd_count_ = from.undo_cmd_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      redo_cmd_count_ = from.redo_cmd_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserCmdStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.UserCmdStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserCmdStats::CopyFrom(const UserCmdStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.UserCmdStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserCmdStats::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(undo_cmd_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(redo_cmd_)) return false;
  return true;
}

void UserCmdStats::InternalSwap(UserCmdStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  undo_cmd_.InternalSwap(&other->undo_cmd_);
  redo_cmd_.InternalSwap(&other->redo_cmd_);
  swap(undo_cmd_count_, other->undo_cmd_count_);
  swap(redo_cmd_count_, other->redo_cmd_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserCmdStats::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gazebo::msgs::UserCmdStats* Arena::CreateMaybeMessage< ::gazebo::msgs::UserCmdStats >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::UserCmdStats >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

GZ_REGISTER_STATIC_MSG("gazebo.msgs.UserCmdStats", UserCmdStats)
// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
