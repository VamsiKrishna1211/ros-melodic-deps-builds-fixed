// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_control.proto

#include "server_control.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace gazebo {
namespace msgs {
class ServerControlDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerControl> _instance;
} _ServerControl_default_instance_;
}  // namespace msgs
}  // namespace gazebo
static void InitDefaultsscc_info_ServerControl_server_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_ServerControl_default_instance_;
    new (ptr) ::gazebo::msgs::ServerControl();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::ServerControl::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerControl_server_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerControl_server_5fcontrol_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_server_5fcontrol_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_server_5fcontrol_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_server_5fcontrol_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_server_5fcontrol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::ServerControl, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::ServerControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::ServerControl, save_world_name_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::ServerControl, save_filename_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::ServerControl, open_filename_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::ServerControl, new_world_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::ServerControl, stop_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::ServerControl, clone_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::ServerControl, new_port_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::gazebo::msgs::ServerControl)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_ServerControl_default_instance_),
};

const char descriptor_table_protodef_server_5fcontrol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024server_control.proto\022\013gazebo.msgs\"\230\001\n\r"
  "ServerControl\022\027\n\017save_world_name\030\001 \001(\t\022\025"
  "\n\rsave_filename\030\002 \001(\t\022\025\n\ropen_filename\030\003"
  " \001(\t\022\021\n\tnew_world\030\004 \001(\010\022\014\n\004stop\030\005 \001(\010\022\r\n"
  "\005clone\030\006 \001(\010\022\020\n\010new_port\030\007 \001(\r"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_server_5fcontrol_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_server_5fcontrol_2eproto_sccs[1] = {
  &scc_info_ServerControl_server_5fcontrol_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_server_5fcontrol_2eproto_once;
static bool descriptor_table_server_5fcontrol_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_5fcontrol_2eproto = {
  &descriptor_table_server_5fcontrol_2eproto_initialized, descriptor_table_protodef_server_5fcontrol_2eproto, "server_control.proto", 190,
  &descriptor_table_server_5fcontrol_2eproto_once, descriptor_table_server_5fcontrol_2eproto_sccs, descriptor_table_server_5fcontrol_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_server_5fcontrol_2eproto::offsets,
  file_level_metadata_server_5fcontrol_2eproto, 1, file_level_enum_descriptors_server_5fcontrol_2eproto, file_level_service_descriptors_server_5fcontrol_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_server_5fcontrol_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_server_5fcontrol_2eproto), true);
namespace gazebo {
namespace msgs {

// ===================================================================

void ServerControl::InitAsDefaultInstance() {
}
class ServerControl::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerControl>()._has_bits_);
  static void set_has_save_world_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_save_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_open_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_new_world(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_stop(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_clone(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_new_port(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

ServerControl::ServerControl()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.ServerControl)
}
ServerControl::ServerControl(const ServerControl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  save_world_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_save_world_name()) {
    save_world_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.save_world_name_);
  }
  save_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_save_filename()) {
    save_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.save_filename_);
  }
  open_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_open_filename()) {
    open_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.open_filename_);
  }
  ::memcpy(&new_world_, &from.new_world_,
    static_cast<size_t>(reinterpret_cast<char*>(&new_port_) -
    reinterpret_cast<char*>(&new_world_)) + sizeof(new_port_));
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.ServerControl)
}

void ServerControl::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerControl_server_5fcontrol_2eproto.base);
  save_world_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  save_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  open_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&new_world_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_port_) -
      reinterpret_cast<char*>(&new_world_)) + sizeof(new_port_));
}

ServerControl::~ServerControl() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.ServerControl)
  SharedDtor();
}

void ServerControl::SharedDtor() {
  save_world_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  save_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  open_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerControl& ServerControl::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerControl_server_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void ServerControl::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.ServerControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      save_world_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      save_filename_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      open_filename_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&new_world_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&new_port_) -
        reinterpret_cast<char*>(&new_world_)) + sizeof(new_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ServerControl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string save_world_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_save_world_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gazebo.msgs.ServerControl.save_world_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string save_filename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_save_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gazebo.msgs.ServerControl.save_filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string open_filename = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_open_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gazebo.msgs.ServerControl.open_filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool new_world = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_new_world(&has_bits);
          new_world_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool stop = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_stop(&has_bits);
          stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clone = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_clone(&has_bits);
          clone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 new_port = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_new_port(&has_bits);
          new_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerControl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.ServerControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string save_world_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_save_world_name().data(), static_cast<int>(this->_internal_save_world_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.ServerControl.save_world_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_save_world_name(), target);
  }

  // optional string save_filename = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_save_filename().data(), static_cast<int>(this->_internal_save_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.ServerControl.save_filename");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_save_filename(), target);
  }

  // optional string open_filename = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_open_filename().data(), static_cast<int>(this->_internal_open_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.ServerControl.open_filename");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_open_filename(), target);
  }

  // optional bool new_world = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_new_world(), target);
  }

  // optional bool stop = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_stop(), target);
  }

  // optional bool clone = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_clone(), target);
  }

  // optional uint32 new_port = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_new_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.ServerControl)
  return target;
}

size_t ServerControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.ServerControl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string save_world_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_save_world_name());
    }

    // optional string save_filename = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_save_filename());
    }

    // optional string open_filename = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_open_filename());
    }

    // optional bool new_world = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool stop = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool clone = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint32 new_port = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_new_port());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerControl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.ServerControl)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerControl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerControl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.ServerControl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.ServerControl)
    MergeFrom(*source);
  }
}

void ServerControl::MergeFrom(const ServerControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.ServerControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      save_world_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.save_world_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      save_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.save_filename_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      open_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.open_filename_);
    }
    if (cached_has_bits & 0x00000008u) {
      new_world_ = from.new_world_;
    }
    if (cached_has_bits & 0x00000010u) {
      stop_ = from.stop_;
    }
    if (cached_has_bits & 0x00000020u) {
      clone_ = from.clone_;
    }
    if (cached_has_bits & 0x00000040u) {
      new_port_ = from.new_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ServerControl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.ServerControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerControl::CopyFrom(const ServerControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.ServerControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerControl::IsInitialized() const {
  return true;
}

void ServerControl::InternalSwap(ServerControl* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  save_world_name_.Swap(&other->save_world_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  save_filename_.Swap(&other->save_filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  open_filename_.Swap(&other->open_filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(new_world_, other->new_world_);
  swap(stop_, other->stop_);
  swap(clone_, other->clone_);
  swap(new_port_, other->new_port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerControl::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gazebo::msgs::ServerControl* Arena::CreateMaybeMessage< ::gazebo::msgs::ServerControl >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::ServerControl >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

GZ_REGISTER_STATIC_MSG("gazebo.msgs.ServerControl", ServerControl)
// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
