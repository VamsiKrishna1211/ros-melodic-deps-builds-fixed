// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: axis.proto

#include "axis.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_vector3d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3d_vector3d_2eproto;
namespace gazebo {
namespace msgs {
class AxisDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Axis> _instance;
} _Axis_default_instance_;
}  // namespace msgs
}  // namespace gazebo
static void InitDefaultsscc_info_Axis_axis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_Axis_default_instance_;
    new (ptr) ::gazebo::msgs::Axis();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::Axis::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Axis_axis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Axis_axis_2eproto}, {
      &scc_info_Vector3d_vector3d_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_axis_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_axis_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_axis_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_axis_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Axis, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Axis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Axis, xyz_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Axis, limit_lower_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Axis, limit_upper_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Axis, limit_effort_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Axis, limit_velocity_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Axis, damping_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Axis, friction_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Axis, use_parent_model_frame_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::gazebo::msgs::Axis)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_Axis_default_instance_),
};

const char descriptor_table_protodef_axis_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\naxis.proto\022\013gazebo.msgs\032\016vector3d.prot"
  "o\"\305\001\n\004Axis\022\"\n\003xyz\030\001 \002(\0132\025.gazebo.msgs.Ve"
  "ctor3d\022\023\n\013limit_lower\030\002 \002(\001\022\023\n\013limit_upp"
  "er\030\003 \002(\001\022\024\n\014limit_effort\030\004 \002(\001\022\026\n\016limit_"
  "velocity\030\005 \002(\001\022\017\n\007damping\030\006 \002(\001\022\020\n\010frict"
  "ion\030\007 \002(\001\022\036\n\026use_parent_model_frame\030\010 \002("
  "\010"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_axis_2eproto_deps[1] = {
  &::descriptor_table_vector3d_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_axis_2eproto_sccs[1] = {
  &scc_info_Axis_axis_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_axis_2eproto_once;
static bool descriptor_table_axis_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_axis_2eproto = {
  &descriptor_table_axis_2eproto_initialized, descriptor_table_protodef_axis_2eproto, "axis.proto", 241,
  &descriptor_table_axis_2eproto_once, descriptor_table_axis_2eproto_sccs, descriptor_table_axis_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_axis_2eproto::offsets,
  file_level_metadata_axis_2eproto, 1, file_level_enum_descriptors_axis_2eproto, file_level_service_descriptors_axis_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_axis_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_axis_2eproto), true);
namespace gazebo {
namespace msgs {

// ===================================================================

void Axis::InitAsDefaultInstance() {
  ::gazebo::msgs::_Axis_default_instance_._instance.get_mutable()->xyz_ = const_cast< ::gazebo::msgs::Vector3d*>(
      ::gazebo::msgs::Vector3d::internal_default_instance());
}
class Axis::_Internal {
 public:
  using HasBits = decltype(std::declval<Axis>()._has_bits_);
  static const ::gazebo::msgs::Vector3d& xyz(const Axis* msg);
  static void set_has_xyz(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_limit_lower(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_limit_upper(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_limit_effort(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_limit_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_damping(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_friction(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_use_parent_model_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::gazebo::msgs::Vector3d&
Axis::_Internal::xyz(const Axis* msg) {
  return *msg->xyz_;
}
void Axis::clear_xyz() {
  if (xyz_ != nullptr) xyz_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Axis::Axis()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.Axis)
}
Axis::Axis(const Axis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_xyz()) {
    xyz_ = new ::gazebo::msgs::Vector3d(*from.xyz_);
  } else {
    xyz_ = nullptr;
  }
  ::memcpy(&limit_lower_, &from.limit_lower_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_parent_model_frame_) -
    reinterpret_cast<char*>(&limit_lower_)) + sizeof(use_parent_model_frame_));
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.Axis)
}

void Axis::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Axis_axis_2eproto.base);
  ::memset(&xyz_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_parent_model_frame_) -
      reinterpret_cast<char*>(&xyz_)) + sizeof(use_parent_model_frame_));
}

Axis::~Axis() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.Axis)
  SharedDtor();
}

void Axis::SharedDtor() {
  if (this != internal_default_instance()) delete xyz_;
}

void Axis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Axis& Axis::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Axis_axis_2eproto.base);
  return *internal_default_instance();
}


void Axis::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.Axis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(xyz_ != nullptr);
    xyz_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&limit_lower_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_parent_model_frame_) -
        reinterpret_cast<char*>(&limit_lower_)) + sizeof(use_parent_model_frame_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Axis::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .gazebo.msgs.Vector3d xyz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_xyz(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double limit_lower = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_limit_lower(&has_bits);
          limit_lower_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double limit_upper = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_limit_upper(&has_bits);
          limit_upper_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double limit_effort = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_limit_effort(&has_bits);
          limit_effort_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double limit_velocity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_limit_velocity(&has_bits);
          limit_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double damping = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_damping(&has_bits);
          damping_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double friction = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_friction(&has_bits);
          friction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required bool use_parent_model_frame = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_use_parent_model_frame(&has_bits);
          use_parent_model_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Axis::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.Axis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gazebo.msgs.Vector3d xyz = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::xyz(this), target, stream);
  }

  // required double limit_lower = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_limit_lower(), target);
  }

  // required double limit_upper = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_limit_upper(), target);
  }

  // required double limit_effort = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_limit_effort(), target);
  }

  // required double limit_velocity = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_limit_velocity(), target);
  }

  // required double damping = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_damping(), target);
  }

  // required double friction = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_friction(), target);
  }

  // required bool use_parent_model_frame = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_use_parent_model_frame(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.Axis)
  return target;
}

size_t Axis::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gazebo.msgs.Axis)
  size_t total_size = 0;

  if (_internal_has_xyz()) {
    // required .gazebo.msgs.Vector3d xyz = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *xyz_);
  }

  if (_internal_has_limit_lower()) {
    // required double limit_lower = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_limit_upper()) {
    // required double limit_upper = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_limit_effort()) {
    // required double limit_effort = 4;
    total_size += 1 + 8;
  }

  if (_internal_has_limit_velocity()) {
    // required double limit_velocity = 5;
    total_size += 1 + 8;
  }

  if (_internal_has_damping()) {
    // required double damping = 6;
    total_size += 1 + 8;
  }

  if (_internal_has_friction()) {
    // required double friction = 7;
    total_size += 1 + 8;
  }

  if (_internal_has_use_parent_model_frame()) {
    // required bool use_parent_model_frame = 8;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t Axis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.Axis)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required .gazebo.msgs.Vector3d xyz = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *xyz_);

    // required double limit_lower = 2;
    total_size += 1 + 8;

    // required double limit_upper = 3;
    total_size += 1 + 8;

    // required double limit_effort = 4;
    total_size += 1 + 8;

    // required double limit_velocity = 5;
    total_size += 1 + 8;

    // required double damping = 6;
    total_size += 1 + 8;

    // required double friction = 7;
    total_size += 1 + 8;

    // required bool use_parent_model_frame = 8;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Axis::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.Axis)
  GOOGLE_DCHECK_NE(&from, this);
  const Axis* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Axis>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.Axis)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.Axis)
    MergeFrom(*source);
  }
}

void Axis::MergeFrom(const Axis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.Axis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_xyz()->::gazebo::msgs::Vector3d::MergeFrom(from._internal_xyz());
    }
    if (cached_has_bits & 0x00000002u) {
      limit_lower_ = from.limit_lower_;
    }
    if (cached_has_bits & 0x00000004u) {
      limit_upper_ = from.limit_upper_;
    }
    if (cached_has_bits & 0x00000008u) {
      limit_effort_ = from.limit_effort_;
    }
    if (cached_has_bits & 0x00000010u) {
      limit_velocity_ = from.limit_velocity_;
    }
    if (cached_has_bits & 0x00000020u) {
      damping_ = from.damping_;
    }
    if (cached_has_bits & 0x00000040u) {
      friction_ = from.friction_;
    }
    if (cached_has_bits & 0x00000080u) {
      use_parent_model_frame_ = from.use_parent_model_frame_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Axis::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.Axis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Axis::CopyFrom(const Axis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.Axis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Axis::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  if (_internal_has_xyz()) {
    if (!xyz_->IsInitialized()) return false;
  }
  return true;
}

void Axis::InternalSwap(Axis* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(xyz_, other->xyz_);
  swap(limit_lower_, other->limit_lower_);
  swap(limit_upper_, other->limit_upper_);
  swap(limit_effort_, other->limit_effort_);
  swap(limit_velocity_, other->limit_velocity_);
  swap(damping_, other->damping_);
  swap(friction_, other->friction_);
  swap(use_parent_model_frame_, other->use_parent_model_frame_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Axis::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gazebo::msgs::Axis* Arena::CreateMaybeMessage< ::gazebo::msgs::Axis >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::Axis >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

GZ_REGISTER_STATIC_MSG("gazebo.msgs.Axis", Axis)
// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
