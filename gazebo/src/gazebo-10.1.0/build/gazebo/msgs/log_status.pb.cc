// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: log_status.proto

#include "log_status.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_log_5fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogStatus_LogFile_log_5fstatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_time_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Time_time_2eproto;
namespace gazebo {
namespace msgs {
class LogStatus_LogFileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogStatus_LogFile> _instance;
} _LogStatus_LogFile_default_instance_;
class LogStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogStatus> _instance;
} _LogStatus_default_instance_;
}  // namespace msgs
}  // namespace gazebo
static void InitDefaultsscc_info_LogStatus_log_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_LogStatus_default_instance_;
    new (ptr) ::gazebo::msgs::LogStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::LogStatus::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LogStatus_log_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LogStatus_log_5fstatus_2eproto}, {
      &scc_info_Time_time_2eproto.base,
      &scc_info_LogStatus_LogFile_log_5fstatus_2eproto.base,}};

static void InitDefaultsscc_info_LogStatus_LogFile_log_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_LogStatus_LogFile_default_instance_;
    new (ptr) ::gazebo::msgs::LogStatus_LogFile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::LogStatus_LogFile::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogStatus_LogFile_log_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogStatus_LogFile_log_5fstatus_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_log_5fstatus_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_log_5fstatus_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_log_5fstatus_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_log_5fstatus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::LogStatus_LogFile, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::LogStatus_LogFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::LogStatus_LogFile, uri_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::LogStatus_LogFile, base_path_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::LogStatus_LogFile, full_path_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::LogStatus_LogFile, size_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::LogStatus_LogFile, size_units_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::LogStatus_LogFile, record_resources_),
  0,
  1,
  2,
  3,
  5,
  4,
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::LogStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::LogStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::LogStatus, sim_time_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::LogStatus, log_file_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::gazebo::msgs::LogStatus_LogFile)},
  { 17, 24, sizeof(::gazebo::msgs::LogStatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_LogStatus_LogFile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_LogStatus_default_instance_),
};

const char descriptor_table_protodef_log_5fstatus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020log_status.proto\022\013gazebo.msgs\032\ntime.pr"
  "oto\"\276\002\n\tLogStatus\022#\n\010sim_time\030\001 \001(\0132\021.ga"
  "zebo.msgs.Time\0220\n\010log_file\030\002 \001(\0132\036.gazeb"
  "o.msgs.LogStatus.LogFile\032\331\001\n\007LogFile\022\013\n\003"
  "uri\030\001 \001(\t\022\021\n\tbase_path\030\002 \001(\t\022\021\n\tfull_pat"
  "h\030\003 \001(\t\022\014\n\004size\030\004 \001(\002\0228\n\nsize_units\030\005 \001("
  "\0162$.gazebo.msgs.LogStatus.LogFile.Units\022"
  "\030\n\020record_resources\030\006 \001(\010\"9\n\005Units\022\t\n\005BY"
  "TES\020\001\022\013\n\007K_BYTES\020\002\022\013\n\007M_BYTES\020\003\022\013\n\007G_BYT"
  "ES\020\004"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_log_5fstatus_2eproto_deps[1] = {
  &::descriptor_table_time_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_log_5fstatus_2eproto_sccs[2] = {
  &scc_info_LogStatus_log_5fstatus_2eproto.base,
  &scc_info_LogStatus_LogFile_log_5fstatus_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_log_5fstatus_2eproto_once;
static bool descriptor_table_log_5fstatus_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_log_5fstatus_2eproto = {
  &descriptor_table_log_5fstatus_2eproto_initialized, descriptor_table_protodef_log_5fstatus_2eproto, "log_status.proto", 364,
  &descriptor_table_log_5fstatus_2eproto_once, descriptor_table_log_5fstatus_2eproto_sccs, descriptor_table_log_5fstatus_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_log_5fstatus_2eproto::offsets,
  file_level_metadata_log_5fstatus_2eproto, 2, file_level_enum_descriptors_log_5fstatus_2eproto, file_level_service_descriptors_log_5fstatus_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_log_5fstatus_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_log_5fstatus_2eproto), true);
namespace gazebo {
namespace msgs {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogStatus_LogFile_Units_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_log_5fstatus_2eproto);
  return file_level_enum_descriptors_log_5fstatus_2eproto[0];
}
bool LogStatus_LogFile_Units_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LogStatus_LogFile_Units LogStatus_LogFile::BYTES;
constexpr LogStatus_LogFile_Units LogStatus_LogFile::K_BYTES;
constexpr LogStatus_LogFile_Units LogStatus_LogFile::M_BYTES;
constexpr LogStatus_LogFile_Units LogStatus_LogFile::G_BYTES;
constexpr LogStatus_LogFile_Units LogStatus_LogFile::Units_MIN;
constexpr LogStatus_LogFile_Units LogStatus_LogFile::Units_MAX;
constexpr int LogStatus_LogFile::Units_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void LogStatus_LogFile::InitAsDefaultInstance() {
}
class LogStatus_LogFile::_Internal {
 public:
  using HasBits = decltype(std::declval<LogStatus_LogFile>()._has_bits_);
  static void set_has_uri(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_base_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_full_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_size_units(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_record_resources(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

LogStatus_LogFile::LogStatus_LogFile()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.LogStatus.LogFile)
}
LogStatus_LogFile::LogStatus_LogFile(const LogStatus_LogFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_uri()) {
    uri_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  base_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_base_path()) {
    base_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.base_path_);
  }
  full_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_full_path()) {
    full_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.full_path_);
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_units_) -
    reinterpret_cast<char*>(&size_)) + sizeof(size_units_));
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.LogStatus.LogFile)
}

void LogStatus_LogFile::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogStatus_LogFile_log_5fstatus_2eproto.base);
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  full_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&record_resources_) -
      reinterpret_cast<char*>(&size_)) + sizeof(record_resources_));
  size_units_ = 1;
}

LogStatus_LogFile::~LogStatus_LogFile() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.LogStatus.LogFile)
  SharedDtor();
}

void LogStatus_LogFile::SharedDtor() {
  uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  full_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogStatus_LogFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogStatus_LogFile& LogStatus_LogFile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogStatus_LogFile_log_5fstatus_2eproto.base);
  return *internal_default_instance();
}


void LogStatus_LogFile::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.LogStatus.LogFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      uri_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      base_path_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      full_path_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&record_resources_) -
        reinterpret_cast<char*>(&size_)) + sizeof(record_resources_));
    size_units_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LogStatus_LogFile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string uri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_uri();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gazebo.msgs.LogStatus.LogFile.uri");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string base_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_base_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gazebo.msgs.LogStatus.LogFile.base_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string full_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_full_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gazebo.msgs.LogStatus.LogFile.full_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.LogStatus.LogFile.Units size_units = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::gazebo::msgs::LogStatus_LogFile_Units_IsValid(val))) {
            _internal_set_size_units(static_cast<::gazebo::msgs::LogStatus_LogFile_Units>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool record_resources = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_record_resources(&has_bits);
          record_resources_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogStatus_LogFile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.LogStatus.LogFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string uri = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.LogStatus.LogFile.uri");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uri(), target);
  }

  // optional string base_path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_base_path().data(), static_cast<int>(this->_internal_base_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.LogStatus.LogFile.base_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_base_path(), target);
  }

  // optional string full_path = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_full_path().data(), static_cast<int>(this->_internal_full_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.LogStatus.LogFile.full_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_full_path(), target);
  }

  // optional float size = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_size(), target);
  }

  // optional .gazebo.msgs.LogStatus.LogFile.Units size_units = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_size_units(), target);
  }

  // optional bool record_resources = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_record_resources(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.LogStatus.LogFile)
  return target;
}

size_t LogStatus_LogFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.LogStatus.LogFile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string uri = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uri());
    }

    // optional string base_path = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_base_path());
    }

    // optional string full_path = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_full_path());
    }

    // optional float size = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional bool record_resources = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional .gazebo.msgs.LogStatus.LogFile.Units size_units = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_size_units());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogStatus_LogFile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.LogStatus.LogFile)
  GOOGLE_DCHECK_NE(&from, this);
  const LogStatus_LogFile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogStatus_LogFile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.LogStatus.LogFile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.LogStatus.LogFile)
    MergeFrom(*source);
  }
}

void LogStatus_LogFile::MergeFrom(const LogStatus_LogFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.LogStatus.LogFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      uri_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      base_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.base_path_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      full_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.full_path_);
    }
    if (cached_has_bits & 0x00000008u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000010u) {
      record_resources_ = from.record_resources_;
    }
    if (cached_has_bits & 0x00000020u) {
      size_units_ = from.size_units_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LogStatus_LogFile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.LogStatus.LogFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogStatus_LogFile::CopyFrom(const LogStatus_LogFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.LogStatus.LogFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogStatus_LogFile::IsInitialized() const {
  return true;
}

void LogStatus_LogFile::InternalSwap(LogStatus_LogFile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  uri_.Swap(&other->uri_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  base_path_.Swap(&other->base_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  full_path_.Swap(&other->full_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(size_, other->size_);
  swap(record_resources_, other->record_resources_);
  swap(size_units_, other->size_units_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogStatus_LogFile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogStatus::InitAsDefaultInstance() {
  ::gazebo::msgs::_LogStatus_default_instance_._instance.get_mutable()->sim_time_ = const_cast< ::gazebo::msgs::Time*>(
      ::gazebo::msgs::Time::internal_default_instance());
  ::gazebo::msgs::_LogStatus_default_instance_._instance.get_mutable()->log_file_ = const_cast< ::gazebo::msgs::LogStatus_LogFile*>(
      ::gazebo::msgs::LogStatus_LogFile::internal_default_instance());
}
class LogStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<LogStatus>()._has_bits_);
  static const ::gazebo::msgs::Time& sim_time(const LogStatus* msg);
  static void set_has_sim_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::gazebo::msgs::LogStatus_LogFile& log_file(const LogStatus* msg);
  static void set_has_log_file(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::gazebo::msgs::Time&
LogStatus::_Internal::sim_time(const LogStatus* msg) {
  return *msg->sim_time_;
}
const ::gazebo::msgs::LogStatus_LogFile&
LogStatus::_Internal::log_file(const LogStatus* msg) {
  return *msg->log_file_;
}
void LogStatus::clear_sim_time() {
  if (sim_time_ != nullptr) sim_time_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
LogStatus::LogStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.LogStatus)
}
LogStatus::LogStatus(const LogStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_sim_time()) {
    sim_time_ = new ::gazebo::msgs::Time(*from.sim_time_);
  } else {
    sim_time_ = nullptr;
  }
  if (from._internal_has_log_file()) {
    log_file_ = new ::gazebo::msgs::LogStatus_LogFile(*from.log_file_);
  } else {
    log_file_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.LogStatus)
}

void LogStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogStatus_log_5fstatus_2eproto.base);
  ::memset(&sim_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&log_file_) -
      reinterpret_cast<char*>(&sim_time_)) + sizeof(log_file_));
}

LogStatus::~LogStatus() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.LogStatus)
  SharedDtor();
}

void LogStatus::SharedDtor() {
  if (this != internal_default_instance()) delete sim_time_;
  if (this != internal_default_instance()) delete log_file_;
}

void LogStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogStatus& LogStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogStatus_log_5fstatus_2eproto.base);
  return *internal_default_instance();
}


void LogStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.LogStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sim_time_ != nullptr);
      sim_time_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(log_file_ != nullptr);
      log_file_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LogStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .gazebo.msgs.Time sim_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sim_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.LogStatus.LogFile log_file = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_log_file(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.LogStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .gazebo.msgs.Time sim_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sim_time(this), target, stream);
  }

  // optional .gazebo.msgs.LogStatus.LogFile log_file = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::log_file(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.LogStatus)
  return target;
}

size_t LogStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.LogStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .gazebo.msgs.Time sim_time = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sim_time_);
    }

    // optional .gazebo.msgs.LogStatus.LogFile log_file = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *log_file_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.LogStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const LogStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.LogStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.LogStatus)
    MergeFrom(*source);
  }
}

void LogStatus::MergeFrom(const LogStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.LogStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sim_time()->::gazebo::msgs::Time::MergeFrom(from._internal_sim_time());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_log_file()->::gazebo::msgs::LogStatus_LogFile::MergeFrom(from._internal_log_file());
    }
  }
}

void LogStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.LogStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogStatus::CopyFrom(const LogStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.LogStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogStatus::IsInitialized() const {
  if (_internal_has_sim_time()) {
    if (!sim_time_->IsInitialized()) return false;
  }
  return true;
}

void LogStatus::InternalSwap(LogStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sim_time_, other->sim_time_);
  swap(log_file_, other->log_file_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gazebo::msgs::LogStatus_LogFile* Arena::CreateMaybeMessage< ::gazebo::msgs::LogStatus_LogFile >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::LogStatus_LogFile >(arena);
}
template<> PROTOBUF_NOINLINE ::gazebo::msgs::LogStatus* Arena::CreateMaybeMessage< ::gazebo::msgs::LogStatus >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::LogStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

GZ_REGISTER_STATIC_MSG("gazebo.msgs.LogStatus", LogStatus)
// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
