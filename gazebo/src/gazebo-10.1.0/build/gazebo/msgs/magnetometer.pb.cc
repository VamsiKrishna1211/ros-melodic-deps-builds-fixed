// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: magnetometer.proto

#include "magnetometer.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_time_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Time_time_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vector3d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3d_vector3d_2eproto;
namespace gazebo {
namespace msgs {
class MagnetometerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Magnetometer> _instance;
} _Magnetometer_default_instance_;
}  // namespace msgs
}  // namespace gazebo
static void InitDefaultsscc_info_Magnetometer_magnetometer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_Magnetometer_default_instance_;
    new (ptr) ::gazebo::msgs::Magnetometer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::Magnetometer::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Magnetometer_magnetometer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Magnetometer_magnetometer_2eproto}, {
      &scc_info_Time_time_2eproto.base,
      &scc_info_Vector3d_vector3d_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_magnetometer_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_magnetometer_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_magnetometer_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_magnetometer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Magnetometer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Magnetometer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Magnetometer, time_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Magnetometer, field_tesla_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::gazebo::msgs::Magnetometer)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_Magnetometer_default_instance_),
};

const char descriptor_table_protodef_magnetometer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022magnetometer.proto\022\013gazebo.msgs\032\ntime."
  "proto\032\016vector3d.proto\"[\n\014Magnetometer\022\037\n"
  "\004time\030\001 \002(\0132\021.gazebo.msgs.Time\022*\n\013field_"
  "tesla\030\002 \002(\0132\025.gazebo.msgs.Vector3d"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_magnetometer_2eproto_deps[2] = {
  &::descriptor_table_time_2eproto,
  &::descriptor_table_vector3d_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_magnetometer_2eproto_sccs[1] = {
  &scc_info_Magnetometer_magnetometer_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_magnetometer_2eproto_once;
static bool descriptor_table_magnetometer_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_magnetometer_2eproto = {
  &descriptor_table_magnetometer_2eproto_initialized, descriptor_table_protodef_magnetometer_2eproto, "magnetometer.proto", 154,
  &descriptor_table_magnetometer_2eproto_once, descriptor_table_magnetometer_2eproto_sccs, descriptor_table_magnetometer_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_magnetometer_2eproto::offsets,
  file_level_metadata_magnetometer_2eproto, 1, file_level_enum_descriptors_magnetometer_2eproto, file_level_service_descriptors_magnetometer_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_magnetometer_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_magnetometer_2eproto), true);
namespace gazebo {
namespace msgs {

// ===================================================================

void Magnetometer::InitAsDefaultInstance() {
  ::gazebo::msgs::_Magnetometer_default_instance_._instance.get_mutable()->time_ = const_cast< ::gazebo::msgs::Time*>(
      ::gazebo::msgs::Time::internal_default_instance());
  ::gazebo::msgs::_Magnetometer_default_instance_._instance.get_mutable()->field_tesla_ = const_cast< ::gazebo::msgs::Vector3d*>(
      ::gazebo::msgs::Vector3d::internal_default_instance());
}
class Magnetometer::_Internal {
 public:
  using HasBits = decltype(std::declval<Magnetometer>()._has_bits_);
  static const ::gazebo::msgs::Time& time(const Magnetometer* msg);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::gazebo::msgs::Vector3d& field_tesla(const Magnetometer* msg);
  static void set_has_field_tesla(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::gazebo::msgs::Time&
Magnetometer::_Internal::time(const Magnetometer* msg) {
  return *msg->time_;
}
const ::gazebo::msgs::Vector3d&
Magnetometer::_Internal::field_tesla(const Magnetometer* msg) {
  return *msg->field_tesla_;
}
void Magnetometer::clear_time() {
  if (time_ != nullptr) time_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Magnetometer::clear_field_tesla() {
  if (field_tesla_ != nullptr) field_tesla_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
Magnetometer::Magnetometer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.Magnetometer)
}
Magnetometer::Magnetometer(const Magnetometer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_time()) {
    time_ = new ::gazebo::msgs::Time(*from.time_);
  } else {
    time_ = nullptr;
  }
  if (from._internal_has_field_tesla()) {
    field_tesla_ = new ::gazebo::msgs::Vector3d(*from.field_tesla_);
  } else {
    field_tesla_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.Magnetometer)
}

void Magnetometer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Magnetometer_magnetometer_2eproto.base);
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&field_tesla_) -
      reinterpret_cast<char*>(&time_)) + sizeof(field_tesla_));
}

Magnetometer::~Magnetometer() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.Magnetometer)
  SharedDtor();
}

void Magnetometer::SharedDtor() {
  if (this != internal_default_instance()) delete time_;
  if (this != internal_default_instance()) delete field_tesla_;
}

void Magnetometer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Magnetometer& Magnetometer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Magnetometer_magnetometer_2eproto.base);
  return *internal_default_instance();
}


void Magnetometer::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.Magnetometer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(time_ != nullptr);
      time_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(field_tesla_ != nullptr);
      field_tesla_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Magnetometer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .gazebo.msgs.Time time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .gazebo.msgs.Vector3d field_tesla = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_field_tesla(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Magnetometer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.Magnetometer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gazebo.msgs.Time time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::time(this), target, stream);
  }

  // required .gazebo.msgs.Vector3d field_tesla = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::field_tesla(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.Magnetometer)
  return target;
}

size_t Magnetometer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gazebo.msgs.Magnetometer)
  size_t total_size = 0;

  if (_internal_has_time()) {
    // required .gazebo.msgs.Time time = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  if (_internal_has_field_tesla()) {
    // required .gazebo.msgs.Vector3d field_tesla = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *field_tesla_);
  }

  return total_size;
}
size_t Magnetometer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.Magnetometer)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .gazebo.msgs.Time time = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);

    // required .gazebo.msgs.Vector3d field_tesla = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *field_tesla_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Magnetometer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.Magnetometer)
  GOOGLE_DCHECK_NE(&from, this);
  const Magnetometer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Magnetometer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.Magnetometer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.Magnetometer)
    MergeFrom(*source);
  }
}

void Magnetometer::MergeFrom(const Magnetometer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.Magnetometer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_time()->::gazebo::msgs::Time::MergeFrom(from._internal_time());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_field_tesla()->::gazebo::msgs::Vector3d::MergeFrom(from._internal_field_tesla());
    }
  }
}

void Magnetometer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.Magnetometer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Magnetometer::CopyFrom(const Magnetometer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.Magnetometer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Magnetometer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (_internal_has_time()) {
    if (!time_->IsInitialized()) return false;
  }
  if (_internal_has_field_tesla()) {
    if (!field_tesla_->IsInitialized()) return false;
  }
  return true;
}

void Magnetometer::InternalSwap(Magnetometer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(time_, other->time_);
  swap(field_tesla_, other->field_tesla_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Magnetometer::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gazebo::msgs::Magnetometer* Arena::CreateMaybeMessage< ::gazebo::msgs::Magnetometer >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::Magnetometer >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

GZ_REGISTER_STATIC_MSG("gazebo.msgs.Magnetometer", Magnetometer)
// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
