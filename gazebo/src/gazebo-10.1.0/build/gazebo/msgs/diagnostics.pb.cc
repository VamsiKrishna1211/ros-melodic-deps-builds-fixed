// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: diagnostics.proto

#include "diagnostics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_diagnostics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Diagnostics_DiagTime_diagnostics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_time_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Time_time_2eproto;
namespace gazebo {
namespace msgs {
class Diagnostics_DiagTimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Diagnostics_DiagTime> _instance;
} _Diagnostics_DiagTime_default_instance_;
class DiagnosticsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Diagnostics> _instance;
} _Diagnostics_default_instance_;
}  // namespace msgs
}  // namespace gazebo
static void InitDefaultsscc_info_Diagnostics_diagnostics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_Diagnostics_default_instance_;
    new (ptr) ::gazebo::msgs::Diagnostics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::Diagnostics::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Diagnostics_diagnostics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Diagnostics_diagnostics_2eproto}, {
      &scc_info_Diagnostics_DiagTime_diagnostics_2eproto.base,
      &scc_info_Time_time_2eproto.base,}};

static void InitDefaultsscc_info_Diagnostics_DiagTime_diagnostics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_Diagnostics_DiagTime_default_instance_;
    new (ptr) ::gazebo::msgs::Diagnostics_DiagTime();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::Diagnostics_DiagTime::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Diagnostics_DiagTime_diagnostics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Diagnostics_DiagTime_diagnostics_2eproto}, {
      &scc_info_Time_time_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_diagnostics_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_diagnostics_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_diagnostics_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_diagnostics_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Diagnostics_DiagTime, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Diagnostics_DiagTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Diagnostics_DiagTime, name_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Diagnostics_DiagTime, elapsed_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Diagnostics_DiagTime, wall_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Diagnostics, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Diagnostics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Diagnostics, time_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Diagnostics, real_time_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Diagnostics, sim_time_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Diagnostics, real_time_factor_),
  ~0u,
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::gazebo::msgs::Diagnostics_DiagTime)},
  { 11, 20, sizeof(::gazebo::msgs::Diagnostics)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_Diagnostics_DiagTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_Diagnostics_default_instance_),
};

const char descriptor_table_protodef_diagnostics_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021diagnostics.proto\022\013gazebo.msgs\032\ntime.p"
  "roto\"\202\002\n\013Diagnostics\022/\n\004time\030\001 \003(\0132!.gaz"
  "ebo.msgs.Diagnostics.DiagTime\022$\n\treal_ti"
  "me\030\002 \002(\0132\021.gazebo.msgs.Time\022#\n\010sim_time\030"
  "\003 \002(\0132\021.gazebo.msgs.Time\022\030\n\020real_time_fa"
  "ctor\030\004 \002(\001\032]\n\010DiagTime\022\014\n\004name\030\001 \002(\t\022\"\n\007"
  "elapsed\030\002 \002(\0132\021.gazebo.msgs.Time\022\037\n\004wall"
  "\030\003 \002(\0132\021.gazebo.msgs.Time"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_diagnostics_2eproto_deps[1] = {
  &::descriptor_table_time_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_diagnostics_2eproto_sccs[2] = {
  &scc_info_Diagnostics_diagnostics_2eproto.base,
  &scc_info_Diagnostics_DiagTime_diagnostics_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_diagnostics_2eproto_once;
static bool descriptor_table_diagnostics_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_diagnostics_2eproto = {
  &descriptor_table_diagnostics_2eproto_initialized, descriptor_table_protodef_diagnostics_2eproto, "diagnostics.proto", 305,
  &descriptor_table_diagnostics_2eproto_once, descriptor_table_diagnostics_2eproto_sccs, descriptor_table_diagnostics_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_diagnostics_2eproto::offsets,
  file_level_metadata_diagnostics_2eproto, 2, file_level_enum_descriptors_diagnostics_2eproto, file_level_service_descriptors_diagnostics_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_diagnostics_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_diagnostics_2eproto), true);
namespace gazebo {
namespace msgs {

// ===================================================================

void Diagnostics_DiagTime::InitAsDefaultInstance() {
  ::gazebo::msgs::_Diagnostics_DiagTime_default_instance_._instance.get_mutable()->elapsed_ = const_cast< ::gazebo::msgs::Time*>(
      ::gazebo::msgs::Time::internal_default_instance());
  ::gazebo::msgs::_Diagnostics_DiagTime_default_instance_._instance.get_mutable()->wall_ = const_cast< ::gazebo::msgs::Time*>(
      ::gazebo::msgs::Time::internal_default_instance());
}
class Diagnostics_DiagTime::_Internal {
 public:
  using HasBits = decltype(std::declval<Diagnostics_DiagTime>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::gazebo::msgs::Time& elapsed(const Diagnostics_DiagTime* msg);
  static void set_has_elapsed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::gazebo::msgs::Time& wall(const Diagnostics_DiagTime* msg);
  static void set_has_wall(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::gazebo::msgs::Time&
Diagnostics_DiagTime::_Internal::elapsed(const Diagnostics_DiagTime* msg) {
  return *msg->elapsed_;
}
const ::gazebo::msgs::Time&
Diagnostics_DiagTime::_Internal::wall(const Diagnostics_DiagTime* msg) {
  return *msg->wall_;
}
void Diagnostics_DiagTime::clear_elapsed() {
  if (elapsed_ != nullptr) elapsed_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Diagnostics_DiagTime::clear_wall() {
  if (wall_ != nullptr) wall_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
Diagnostics_DiagTime::Diagnostics_DiagTime()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.Diagnostics.DiagTime)
}
Diagnostics_DiagTime::Diagnostics_DiagTime(const Diagnostics_DiagTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_elapsed()) {
    elapsed_ = new ::gazebo::msgs::Time(*from.elapsed_);
  } else {
    elapsed_ = nullptr;
  }
  if (from._internal_has_wall()) {
    wall_ = new ::gazebo::msgs::Time(*from.wall_);
  } else {
    wall_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.Diagnostics.DiagTime)
}

void Diagnostics_DiagTime::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Diagnostics_DiagTime_diagnostics_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&elapsed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wall_) -
      reinterpret_cast<char*>(&elapsed_)) + sizeof(wall_));
}

Diagnostics_DiagTime::~Diagnostics_DiagTime() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.Diagnostics.DiagTime)
  SharedDtor();
}

void Diagnostics_DiagTime::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete elapsed_;
  if (this != internal_default_instance()) delete wall_;
}

void Diagnostics_DiagTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Diagnostics_DiagTime& Diagnostics_DiagTime::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Diagnostics_DiagTime_diagnostics_2eproto.base);
  return *internal_default_instance();
}


void Diagnostics_DiagTime::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.Diagnostics.DiagTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(elapsed_ != nullptr);
      elapsed_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(wall_ != nullptr);
      wall_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Diagnostics_DiagTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gazebo.msgs.Diagnostics.DiagTime.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .gazebo.msgs.Time elapsed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_elapsed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .gazebo.msgs.Time wall = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_wall(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Diagnostics_DiagTime::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.Diagnostics.DiagTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.Diagnostics.DiagTime.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required .gazebo.msgs.Time elapsed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::elapsed(this), target, stream);
  }

  // required .gazebo.msgs.Time wall = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::wall(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.Diagnostics.DiagTime)
  return target;
}

size_t Diagnostics_DiagTime::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gazebo.msgs.Diagnostics.DiagTime)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_elapsed()) {
    // required .gazebo.msgs.Time elapsed = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *elapsed_);
  }

  if (_internal_has_wall()) {
    // required .gazebo.msgs.Time wall = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *wall_);
  }

  return total_size;
}
size_t Diagnostics_DiagTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.Diagnostics.DiagTime)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required .gazebo.msgs.Time elapsed = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *elapsed_);

    // required .gazebo.msgs.Time wall = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *wall_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Diagnostics_DiagTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.Diagnostics.DiagTime)
  GOOGLE_DCHECK_NE(&from, this);
  const Diagnostics_DiagTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Diagnostics_DiagTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.Diagnostics.DiagTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.Diagnostics.DiagTime)
    MergeFrom(*source);
  }
}

void Diagnostics_DiagTime::MergeFrom(const Diagnostics_DiagTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.Diagnostics.DiagTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_elapsed()->::gazebo::msgs::Time::MergeFrom(from._internal_elapsed());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_wall()->::gazebo::msgs::Time::MergeFrom(from._internal_wall());
    }
  }
}

void Diagnostics_DiagTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.Diagnostics.DiagTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Diagnostics_DiagTime::CopyFrom(const Diagnostics_DiagTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.Diagnostics.DiagTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Diagnostics_DiagTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (_internal_has_elapsed()) {
    if (!elapsed_->IsInitialized()) return false;
  }
  if (_internal_has_wall()) {
    if (!wall_->IsInitialized()) return false;
  }
  return true;
}

void Diagnostics_DiagTime::InternalSwap(Diagnostics_DiagTime* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(elapsed_, other->elapsed_);
  swap(wall_, other->wall_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Diagnostics_DiagTime::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Diagnostics::InitAsDefaultInstance() {
  ::gazebo::msgs::_Diagnostics_default_instance_._instance.get_mutable()->real_time_ = const_cast< ::gazebo::msgs::Time*>(
      ::gazebo::msgs::Time::internal_default_instance());
  ::gazebo::msgs::_Diagnostics_default_instance_._instance.get_mutable()->sim_time_ = const_cast< ::gazebo::msgs::Time*>(
      ::gazebo::msgs::Time::internal_default_instance());
}
class Diagnostics::_Internal {
 public:
  using HasBits = decltype(std::declval<Diagnostics>()._has_bits_);
  static const ::gazebo::msgs::Time& real_time(const Diagnostics* msg);
  static void set_has_real_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::gazebo::msgs::Time& sim_time(const Diagnostics* msg);
  static void set_has_sim_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_real_time_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::gazebo::msgs::Time&
Diagnostics::_Internal::real_time(const Diagnostics* msg) {
  return *msg->real_time_;
}
const ::gazebo::msgs::Time&
Diagnostics::_Internal::sim_time(const Diagnostics* msg) {
  return *msg->sim_time_;
}
void Diagnostics::clear_real_time() {
  if (real_time_ != nullptr) real_time_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Diagnostics::clear_sim_time() {
  if (sim_time_ != nullptr) sim_time_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
Diagnostics::Diagnostics()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.Diagnostics)
}
Diagnostics::Diagnostics(const Diagnostics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      time_(from.time_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_real_time()) {
    real_time_ = new ::gazebo::msgs::Time(*from.real_time_);
  } else {
    real_time_ = nullptr;
  }
  if (from._internal_has_sim_time()) {
    sim_time_ = new ::gazebo::msgs::Time(*from.sim_time_);
  } else {
    sim_time_ = nullptr;
  }
  real_time_factor_ = from.real_time_factor_;
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.Diagnostics)
}

void Diagnostics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Diagnostics_diagnostics_2eproto.base);
  ::memset(&real_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&real_time_factor_) -
      reinterpret_cast<char*>(&real_time_)) + sizeof(real_time_factor_));
}

Diagnostics::~Diagnostics() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.Diagnostics)
  SharedDtor();
}

void Diagnostics::SharedDtor() {
  if (this != internal_default_instance()) delete real_time_;
  if (this != internal_default_instance()) delete sim_time_;
}

void Diagnostics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Diagnostics& Diagnostics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Diagnostics_diagnostics_2eproto.base);
  return *internal_default_instance();
}


void Diagnostics::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.Diagnostics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(real_time_ != nullptr);
      real_time_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sim_time_ != nullptr);
      sim_time_->Clear();
    }
  }
  real_time_factor_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Diagnostics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .gazebo.msgs.Diagnostics.DiagTime time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_time(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // required .gazebo.msgs.Time real_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_real_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .gazebo.msgs.Time sim_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sim_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double real_time_factor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_real_time_factor(&has_bits);
          real_time_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Diagnostics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.Diagnostics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gazebo.msgs.Diagnostics.DiagTime time = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_time_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_time(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // required .gazebo.msgs.Time real_time = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::real_time(this), target, stream);
  }

  // required .gazebo.msgs.Time sim_time = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sim_time(this), target, stream);
  }

  // required double real_time_factor = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_real_time_factor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.Diagnostics)
  return target;
}

size_t Diagnostics::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gazebo.msgs.Diagnostics)
  size_t total_size = 0;

  if (_internal_has_real_time()) {
    // required .gazebo.msgs.Time real_time = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *real_time_);
  }

  if (_internal_has_sim_time()) {
    // required .gazebo.msgs.Time sim_time = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sim_time_);
  }

  if (_internal_has_real_time_factor()) {
    // required double real_time_factor = 4;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t Diagnostics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.Diagnostics)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .gazebo.msgs.Time real_time = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *real_time_);

    // required .gazebo.msgs.Time sim_time = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sim_time_);

    // required double real_time_factor = 4;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gazebo.msgs.Diagnostics.DiagTime time = 1;
  total_size += 1UL * this->_internal_time_size();
  for (const auto& msg : this->time_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Diagnostics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.Diagnostics)
  GOOGLE_DCHECK_NE(&from, this);
  const Diagnostics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Diagnostics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.Diagnostics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.Diagnostics)
    MergeFrom(*source);
  }
}

void Diagnostics::MergeFrom(const Diagnostics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.Diagnostics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  time_.MergeFrom(from.time_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_real_time()->::gazebo::msgs::Time::MergeFrom(from._internal_real_time());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sim_time()->::gazebo::msgs::Time::MergeFrom(from._internal_sim_time());
    }
    if (cached_has_bits & 0x00000004u) {
      real_time_factor_ = from.real_time_factor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Diagnostics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.Diagnostics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Diagnostics::CopyFrom(const Diagnostics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.Diagnostics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Diagnostics::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(time_)) return false;
  if (_internal_has_real_time()) {
    if (!real_time_->IsInitialized()) return false;
  }
  if (_internal_has_sim_time()) {
    if (!sim_time_->IsInitialized()) return false;
  }
  return true;
}

void Diagnostics::InternalSwap(Diagnostics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  time_.InternalSwap(&other->time_);
  swap(real_time_, other->real_time_);
  swap(sim_time_, other->sim_time_);
  swap(real_time_factor_, other->real_time_factor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Diagnostics::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gazebo::msgs::Diagnostics_DiagTime* Arena::CreateMaybeMessage< ::gazebo::msgs::Diagnostics_DiagTime >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::Diagnostics_DiagTime >(arena);
}
template<> PROTOBUF_NOINLINE ::gazebo::msgs::Diagnostics* Arena::CreateMaybeMessage< ::gazebo::msgs::Diagnostics >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::Diagnostics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

GZ_REGISTER_STATIC_MSG("gazebo.msgs.Diagnostics", Diagnostics)
// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
