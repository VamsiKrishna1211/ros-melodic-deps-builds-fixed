// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friction.proto

#include "friction.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_friction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Friction_Torsional_friction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_friction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Friction_Torsional_ODE_friction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vector3d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3d_vector3d_2eproto;
namespace gazebo {
namespace msgs {
class Friction_Torsional_ODEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Friction_Torsional_ODE> _instance;
} _Friction_Torsional_ODE_default_instance_;
class Friction_TorsionalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Friction_Torsional> _instance;
} _Friction_Torsional_default_instance_;
class FrictionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Friction> _instance;
} _Friction_default_instance_;
}  // namespace msgs
}  // namespace gazebo
static void InitDefaultsscc_info_Friction_friction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_Friction_default_instance_;
    new (ptr) ::gazebo::msgs::Friction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::Friction::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Friction_friction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Friction_friction_2eproto}, {
      &scc_info_Vector3d_vector3d_2eproto.base,
      &scc_info_Friction_Torsional_friction_2eproto.base,}};

static void InitDefaultsscc_info_Friction_Torsional_friction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_Friction_Torsional_default_instance_;
    new (ptr) ::gazebo::msgs::Friction_Torsional();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::Friction_Torsional::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Friction_Torsional_friction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Friction_Torsional_friction_2eproto}, {
      &scc_info_Friction_Torsional_ODE_friction_2eproto.base,}};

static void InitDefaultsscc_info_Friction_Torsional_ODE_friction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_Friction_Torsional_ODE_default_instance_;
    new (ptr) ::gazebo::msgs::Friction_Torsional_ODE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::Friction_Torsional_ODE::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Friction_Torsional_ODE_friction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Friction_Torsional_ODE_friction_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_friction_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_friction_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_friction_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_friction_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Friction_Torsional_ODE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Friction_Torsional_ODE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Friction_Torsional_ODE, slip_),
  0,
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Friction_Torsional, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Friction_Torsional, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Friction_Torsional, coefficient_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Friction_Torsional, use_patch_radius_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Friction_Torsional, patch_radius_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Friction_Torsional, surface_radius_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Friction_Torsional, ode_),
  1,
  4,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Friction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Friction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Friction, mu_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Friction, mu2_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Friction, fdir1_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Friction, slip1_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Friction, slip2_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Friction, torsional_),
  2,
  3,
  0,
  4,
  5,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::gazebo::msgs::Friction_Torsional_ODE)},
  { 7, 17, sizeof(::gazebo::msgs::Friction_Torsional)},
  { 22, 33, sizeof(::gazebo::msgs::Friction)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_Friction_Torsional_ODE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_Friction_Torsional_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_Friction_default_instance_),
};

const char descriptor_table_protodef_friction_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016friction.proto\022\013gazebo.msgs\032\016vector3d."
  "proto\"\315\002\n\010Friction\022\n\n\002mu\030\001 \001(\001\022\013\n\003mu2\030\002 "
  "\001(\001\022$\n\005fdir1\030\003 \001(\0132\025.gazebo.msgs.Vector3"
  "d\022\r\n\005slip1\030\004 \001(\001\022\r\n\005slip2\030\005 \001(\001\0222\n\ttorsi"
  "onal\030\006 \001(\0132\037.gazebo.msgs.Friction.Torsio"
  "nal\032\257\001\n\tTorsional\022\023\n\013coefficient\030\001 \001(\001\022\030"
  "\n\020use_patch_radius\030\002 \001(\010\022\024\n\014patch_radius"
  "\030\003 \001(\001\022\026\n\016surface_radius\030\004 \001(\001\0220\n\003ode\030\005 "
  "\001(\0132#.gazebo.msgs.Friction.Torsional.ODE"
  "\032\023\n\003ODE\022\014\n\004slip\030\001 \001(\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_friction_2eproto_deps[1] = {
  &::descriptor_table_vector3d_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_friction_2eproto_sccs[3] = {
  &scc_info_Friction_friction_2eproto.base,
  &scc_info_Friction_Torsional_friction_2eproto.base,
  &scc_info_Friction_Torsional_ODE_friction_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_friction_2eproto_once;
static bool descriptor_table_friction_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_friction_2eproto = {
  &descriptor_table_friction_2eproto_initialized, descriptor_table_protodef_friction_2eproto, "friction.proto", 381,
  &descriptor_table_friction_2eproto_once, descriptor_table_friction_2eproto_sccs, descriptor_table_friction_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_friction_2eproto::offsets,
  file_level_metadata_friction_2eproto, 3, file_level_enum_descriptors_friction_2eproto, file_level_service_descriptors_friction_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_friction_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_friction_2eproto), true);
namespace gazebo {
namespace msgs {

// ===================================================================

void Friction_Torsional_ODE::InitAsDefaultInstance() {
}
class Friction_Torsional_ODE::_Internal {
 public:
  using HasBits = decltype(std::declval<Friction_Torsional_ODE>()._has_bits_);
  static void set_has_slip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Friction_Torsional_ODE::Friction_Torsional_ODE()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.Friction.Torsional.ODE)
}
Friction_Torsional_ODE::Friction_Torsional_ODE(const Friction_Torsional_ODE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  slip_ = from.slip_;
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.Friction.Torsional.ODE)
}

void Friction_Torsional_ODE::SharedCtor() {
  slip_ = 0;
}

Friction_Torsional_ODE::~Friction_Torsional_ODE() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.Friction.Torsional.ODE)
  SharedDtor();
}

void Friction_Torsional_ODE::SharedDtor() {
}

void Friction_Torsional_ODE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Friction_Torsional_ODE& Friction_Torsional_ODE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Friction_Torsional_ODE_friction_2eproto.base);
  return *internal_default_instance();
}


void Friction_Torsional_ODE::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.Friction.Torsional.ODE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slip_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Friction_Torsional_ODE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double slip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_slip(&has_bits);
          slip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Friction_Torsional_ODE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.Friction.Torsional.ODE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double slip = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_slip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.Friction.Torsional.ODE)
  return target;
}

size_t Friction_Torsional_ODE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.Friction.Torsional.ODE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double slip = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Friction_Torsional_ODE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.Friction.Torsional.ODE)
  GOOGLE_DCHECK_NE(&from, this);
  const Friction_Torsional_ODE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Friction_Torsional_ODE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.Friction.Torsional.ODE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.Friction.Torsional.ODE)
    MergeFrom(*source);
  }
}

void Friction_Torsional_ODE::MergeFrom(const Friction_Torsional_ODE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.Friction.Torsional.ODE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_slip()) {
    _internal_set_slip(from._internal_slip());
  }
}

void Friction_Torsional_ODE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.Friction.Torsional.ODE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friction_Torsional_ODE::CopyFrom(const Friction_Torsional_ODE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.Friction.Torsional.ODE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friction_Torsional_ODE::IsInitialized() const {
  return true;
}

void Friction_Torsional_ODE::InternalSwap(Friction_Torsional_ODE* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(slip_, other->slip_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Friction_Torsional_ODE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Friction_Torsional::InitAsDefaultInstance() {
  ::gazebo::msgs::_Friction_Torsional_default_instance_._instance.get_mutable()->ode_ = const_cast< ::gazebo::msgs::Friction_Torsional_ODE*>(
      ::gazebo::msgs::Friction_Torsional_ODE::internal_default_instance());
}
class Friction_Torsional::_Internal {
 public:
  using HasBits = decltype(std::declval<Friction_Torsional>()._has_bits_);
  static void set_has_coefficient(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_use_patch_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_patch_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_surface_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::gazebo::msgs::Friction_Torsional_ODE& ode(const Friction_Torsional* msg);
  static void set_has_ode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::gazebo::msgs::Friction_Torsional_ODE&
Friction_Torsional::_Internal::ode(const Friction_Torsional* msg) {
  return *msg->ode_;
}
Friction_Torsional::Friction_Torsional()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.Friction.Torsional)
}
Friction_Torsional::Friction_Torsional(const Friction_Torsional& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ode()) {
    ode_ = new ::gazebo::msgs::Friction_Torsional_ODE(*from.ode_);
  } else {
    ode_ = nullptr;
  }
  ::memcpy(&coefficient_, &from.coefficient_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_patch_radius_) -
    reinterpret_cast<char*>(&coefficient_)) + sizeof(use_patch_radius_));
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.Friction.Torsional)
}

void Friction_Torsional::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Friction_Torsional_friction_2eproto.base);
  ::memset(&ode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_patch_radius_) -
      reinterpret_cast<char*>(&ode_)) + sizeof(use_patch_radius_));
}

Friction_Torsional::~Friction_Torsional() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.Friction.Torsional)
  SharedDtor();
}

void Friction_Torsional::SharedDtor() {
  if (this != internal_default_instance()) delete ode_;
}

void Friction_Torsional::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Friction_Torsional& Friction_Torsional::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Friction_Torsional_friction_2eproto.base);
  return *internal_default_instance();
}


void Friction_Torsional::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.Friction.Torsional)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ode_ != nullptr);
    ode_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&coefficient_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_patch_radius_) -
        reinterpret_cast<char*>(&coefficient_)) + sizeof(use_patch_radius_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Friction_Torsional::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double coefficient = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_coefficient(&has_bits);
          coefficient_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool use_patch_radius = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_use_patch_radius(&has_bits);
          use_patch_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double patch_radius = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_patch_radius(&has_bits);
          patch_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double surface_radius = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_surface_radius(&has_bits);
          surface_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.Friction.Torsional.ODE ode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Friction_Torsional::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.Friction.Torsional)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double coefficient = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_coefficient(), target);
  }

  // optional bool use_patch_radius = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_use_patch_radius(), target);
  }

  // optional double patch_radius = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_patch_radius(), target);
  }

  // optional double surface_radius = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_surface_radius(), target);
  }

  // optional .gazebo.msgs.Friction.Torsional.ODE ode = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::ode(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.Friction.Torsional)
  return target;
}

size_t Friction_Torsional::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.Friction.Torsional)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .gazebo.msgs.Friction.Torsional.ODE ode = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ode_);
    }

    // optional double coefficient = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double patch_radius = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double surface_radius = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional bool use_patch_radius = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Friction_Torsional::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.Friction.Torsional)
  GOOGLE_DCHECK_NE(&from, this);
  const Friction_Torsional* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Friction_Torsional>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.Friction.Torsional)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.Friction.Torsional)
    MergeFrom(*source);
  }
}

void Friction_Torsional::MergeFrom(const Friction_Torsional& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.Friction.Torsional)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ode()->::gazebo::msgs::Friction_Torsional_ODE::MergeFrom(from._internal_ode());
    }
    if (cached_has_bits & 0x00000002u) {
      coefficient_ = from.coefficient_;
    }
    if (cached_has_bits & 0x00000004u) {
      patch_radius_ = from.patch_radius_;
    }
    if (cached_has_bits & 0x00000008u) {
      surface_radius_ = from.surface_radius_;
    }
    if (cached_has_bits & 0x00000010u) {
      use_patch_radius_ = from.use_patch_radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Friction_Torsional::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.Friction.Torsional)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friction_Torsional::CopyFrom(const Friction_Torsional& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.Friction.Torsional)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friction_Torsional::IsInitialized() const {
  return true;
}

void Friction_Torsional::InternalSwap(Friction_Torsional* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ode_, other->ode_);
  swap(coefficient_, other->coefficient_);
  swap(patch_radius_, other->patch_radius_);
  swap(surface_radius_, other->surface_radius_);
  swap(use_patch_radius_, other->use_patch_radius_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Friction_Torsional::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Friction::InitAsDefaultInstance() {
  ::gazebo::msgs::_Friction_default_instance_._instance.get_mutable()->fdir1_ = const_cast< ::gazebo::msgs::Vector3d*>(
      ::gazebo::msgs::Vector3d::internal_default_instance());
  ::gazebo::msgs::_Friction_default_instance_._instance.get_mutable()->torsional_ = const_cast< ::gazebo::msgs::Friction_Torsional*>(
      ::gazebo::msgs::Friction_Torsional::internal_default_instance());
}
class Friction::_Internal {
 public:
  using HasBits = decltype(std::declval<Friction>()._has_bits_);
  static void set_has_mu(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mu2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::gazebo::msgs::Vector3d& fdir1(const Friction* msg);
  static void set_has_fdir1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_slip1(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_slip2(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::gazebo::msgs::Friction_Torsional& torsional(const Friction* msg);
  static void set_has_torsional(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::gazebo::msgs::Vector3d&
Friction::_Internal::fdir1(const Friction* msg) {
  return *msg->fdir1_;
}
const ::gazebo::msgs::Friction_Torsional&
Friction::_Internal::torsional(const Friction* msg) {
  return *msg->torsional_;
}
void Friction::clear_fdir1() {
  if (fdir1_ != nullptr) fdir1_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Friction::Friction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.Friction)
}
Friction::Friction(const Friction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_fdir1()) {
    fdir1_ = new ::gazebo::msgs::Vector3d(*from.fdir1_);
  } else {
    fdir1_ = nullptr;
  }
  if (from._internal_has_torsional()) {
    torsional_ = new ::gazebo::msgs::Friction_Torsional(*from.torsional_);
  } else {
    torsional_ = nullptr;
  }
  ::memcpy(&mu_, &from.mu_,
    static_cast<size_t>(reinterpret_cast<char*>(&slip2_) -
    reinterpret_cast<char*>(&mu_)) + sizeof(slip2_));
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.Friction)
}

void Friction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Friction_friction_2eproto.base);
  ::memset(&fdir1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slip2_) -
      reinterpret_cast<char*>(&fdir1_)) + sizeof(slip2_));
}

Friction::~Friction() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.Friction)
  SharedDtor();
}

void Friction::SharedDtor() {
  if (this != internal_default_instance()) delete fdir1_;
  if (this != internal_default_instance()) delete torsional_;
}

void Friction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Friction& Friction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Friction_friction_2eproto.base);
  return *internal_default_instance();
}


void Friction::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.Friction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(fdir1_ != nullptr);
      fdir1_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(torsional_ != nullptr);
      torsional_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&mu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&slip2_) -
        reinterpret_cast<char*>(&mu_)) + sizeof(slip2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Friction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double mu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_mu(&has_bits);
          mu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double mu2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_mu2(&has_bits);
          mu2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.Vector3d fdir1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_fdir1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double slip1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_slip1(&has_bits);
          slip1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double slip2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_slip2(&has_bits);
          slip2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.Friction.Torsional torsional = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_torsional(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Friction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.Friction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double mu = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_mu(), target);
  }

  // optional double mu2 = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_mu2(), target);
  }

  // optional .gazebo.msgs.Vector3d fdir1 = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::fdir1(this), target, stream);
  }

  // optional double slip1 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_slip1(), target);
  }

  // optional double slip2 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_slip2(), target);
  }

  // optional .gazebo.msgs.Friction.Torsional torsional = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::torsional(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.Friction)
  return target;
}

size_t Friction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.Friction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .gazebo.msgs.Vector3d fdir1 = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fdir1_);
    }

    // optional .gazebo.msgs.Friction.Torsional torsional = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *torsional_);
    }

    // optional double mu = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double mu2 = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double slip1 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double slip2 = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Friction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.Friction)
  GOOGLE_DCHECK_NE(&from, this);
  const Friction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Friction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.Friction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.Friction)
    MergeFrom(*source);
  }
}

void Friction::MergeFrom(const Friction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.Friction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_fdir1()->::gazebo::msgs::Vector3d::MergeFrom(from._internal_fdir1());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_torsional()->::gazebo::msgs::Friction_Torsional::MergeFrom(from._internal_torsional());
    }
    if (cached_has_bits & 0x00000004u) {
      mu_ = from.mu_;
    }
    if (cached_has_bits & 0x00000008u) {
      mu2_ = from.mu2_;
    }
    if (cached_has_bits & 0x00000010u) {
      slip1_ = from.slip1_;
    }
    if (cached_has_bits & 0x00000020u) {
      slip2_ = from.slip2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Friction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.Friction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friction::CopyFrom(const Friction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.Friction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friction::IsInitialized() const {
  if (_internal_has_fdir1()) {
    if (!fdir1_->IsInitialized()) return false;
  }
  return true;
}

void Friction::InternalSwap(Friction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fdir1_, other->fdir1_);
  swap(torsional_, other->torsional_);
  swap(mu_, other->mu_);
  swap(mu2_, other->mu2_);
  swap(slip1_, other->slip1_);
  swap(slip2_, other->slip2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Friction::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gazebo::msgs::Friction_Torsional_ODE* Arena::CreateMaybeMessage< ::gazebo::msgs::Friction_Torsional_ODE >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::Friction_Torsional_ODE >(arena);
}
template<> PROTOBUF_NOINLINE ::gazebo::msgs::Friction_Torsional* Arena::CreateMaybeMessage< ::gazebo::msgs::Friction_Torsional >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::Friction_Torsional >(arena);
}
template<> PROTOBUF_NOINLINE ::gazebo::msgs::Friction* Arena::CreateMaybeMessage< ::gazebo::msgs::Friction >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::Friction >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

GZ_REGISTER_STATIC_MSG("gazebo.msgs.Friction", Friction)
// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
