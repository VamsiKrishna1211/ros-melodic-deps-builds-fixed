// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: joint.proto

#include "joint.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_axis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Axis_axis_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_joint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Joint_Gearbox_joint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_joint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Joint_Screw_joint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pose_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Pose_pose_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Sensor_sensor_2eproto;
namespace gazebo {
namespace msgs {
class Joint_GearboxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Joint_Gearbox> _instance;
} _Joint_Gearbox_default_instance_;
class Joint_ScrewDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Joint_Screw> _instance;
} _Joint_Screw_default_instance_;
class JointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Joint> _instance;
} _Joint_default_instance_;
}  // namespace msgs
}  // namespace gazebo
static void InitDefaultsscc_info_Joint_joint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_Joint_default_instance_;
    new (ptr) ::gazebo::msgs::Joint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::Joint::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Joint_joint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Joint_joint_2eproto}, {
      &scc_info_Pose_pose_2eproto.base,
      &scc_info_Axis_axis_2eproto.base,
      &scc_info_Joint_Gearbox_joint_2eproto.base,
      &scc_info_Joint_Screw_joint_2eproto.base,
      &scc_info_Sensor_sensor_2eproto.base,}};

static void InitDefaultsscc_info_Joint_Gearbox_joint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_Joint_Gearbox_default_instance_;
    new (ptr) ::gazebo::msgs::Joint_Gearbox();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::Joint_Gearbox::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Joint_Gearbox_joint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Joint_Gearbox_joint_2eproto}, {}};

static void InitDefaultsscc_info_Joint_Screw_joint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_Joint_Screw_default_instance_;
    new (ptr) ::gazebo::msgs::Joint_Screw();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::Joint_Screw::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Joint_Screw_joint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Joint_Screw_joint_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_joint_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_joint_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_joint_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_joint_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Joint_Gearbox, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Joint_Gearbox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Joint_Gearbox, gearbox_reference_body_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Joint_Gearbox, gearbox_ratio_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Joint_Screw, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Joint_Screw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Joint_Screw, thread_pitch_),
  0,
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Joint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Joint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Joint, name_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Joint, id_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Joint, angle_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Joint, type_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Joint, parent_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Joint, parent_id_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Joint, child_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Joint, child_id_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Joint, pose_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Joint, axis1_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Joint, axis2_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Joint, cfm_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Joint, bounce_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Joint, velocity_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Joint, fudge_factor_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Joint, limit_cfm_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Joint, limit_erp_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Joint, suspension_cfm_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Joint, suspension_erp_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Joint, gearbox_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Joint, screw_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Joint, sensor_),
  0,
  8,
  ~0u,
  19,
  1,
  9,
  2,
  18,
  3,
  4,
  5,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  6,
  7,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::gazebo::msgs::Joint_Gearbox)},
  { 9, 15, sizeof(::gazebo::msgs::Joint_Screw)},
  { 16, 43, sizeof(::gazebo::msgs::Joint)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_Joint_Gearbox_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_Joint_Screw_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_Joint_default_instance_),
};

const char descriptor_table_protodef_joint_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013joint.proto\022\013gazebo.msgs\032\naxis.proto\032\n"
  "pose.proto\032\014sensor.proto\"\347\005\n\005Joint\022\014\n\004na"
  "me\030\001 \002(\t\022\n\n\002id\030\002 \001(\r\022\r\n\005angle\030\003 \003(\001\022%\n\004t"
  "ype\030\004 \001(\0162\027.gazebo.msgs.Joint.Type\022\016\n\006pa"
  "rent\030\005 \001(\t\022\021\n\tparent_id\030\006 \001(\r\022\r\n\005child\030\007"
  " \001(\t\022\020\n\010child_id\030\010 \001(\r\022\037\n\004pose\030\t \001(\0132\021.g"
  "azebo.msgs.Pose\022 \n\005axis1\030\n \001(\0132\021.gazebo."
  "msgs.Axis\022 \n\005axis2\030\013 \001(\0132\021.gazebo.msgs.A"
  "xis\022\013\n\003cfm\030\014 \001(\001\022\016\n\006bounce\030\r \001(\001\022\020\n\010velo"
  "city\030\016 \001(\001\022\024\n\014fudge_factor\030\017 \001(\001\022\021\n\tlimi"
  "t_cfm\030\020 \001(\001\022\021\n\tlimit_erp\030\021 \001(\001\022\026\n\016suspen"
  "sion_cfm\030\022 \001(\001\022\026\n\016suspension_erp\030\023 \001(\001\022+"
  "\n\007gearbox\030\024 \001(\0132\032.gazebo.msgs.Joint.Gear"
  "box\022\'\n\005screw\030\025 \001(\0132\030.gazebo.msgs.Joint.S"
  "crew\022#\n\006sensor\030\026 \003(\0132\023.gazebo.msgs.Senso"
  "r\032@\n\007Gearbox\022\036\n\026gearbox_reference_body\030\001"
  " \002(\t\022\025\n\rgearbox_ratio\030\002 \002(\001\032\035\n\005Screw\022\024\n\014"
  "thread_pitch\030\001 \002(\001\"n\n\004Type\022\014\n\010REVOLUTE\020\001"
  "\022\r\n\tREVOLUTE2\020\002\022\r\n\tPRISMATIC\020\003\022\r\n\tUNIVER"
  "SAL\020\004\022\010\n\004BALL\020\005\022\t\n\005SCREW\020\006\022\013\n\007GEARBOX\020\007\022"
  "\t\n\005FIXED\020\010"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_joint_2eproto_deps[3] = {
  &::descriptor_table_axis_2eproto,
  &::descriptor_table_pose_2eproto,
  &::descriptor_table_sensor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_joint_2eproto_sccs[3] = {
  &scc_info_Joint_joint_2eproto.base,
  &scc_info_Joint_Gearbox_joint_2eproto.base,
  &scc_info_Joint_Screw_joint_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_joint_2eproto_once;
static bool descriptor_table_joint_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_joint_2eproto = {
  &descriptor_table_joint_2eproto_initialized, descriptor_table_protodef_joint_2eproto, "joint.proto", 810,
  &descriptor_table_joint_2eproto_once, descriptor_table_joint_2eproto_sccs, descriptor_table_joint_2eproto_deps, 3, 3,
  schemas, file_default_instances, TableStruct_joint_2eproto::offsets,
  file_level_metadata_joint_2eproto, 3, file_level_enum_descriptors_joint_2eproto, file_level_service_descriptors_joint_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_joint_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_joint_2eproto), true);
namespace gazebo {
namespace msgs {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Joint_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_joint_2eproto);
  return file_level_enum_descriptors_joint_2eproto[0];
}
bool Joint_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Joint_Type Joint::REVOLUTE;
constexpr Joint_Type Joint::REVOLUTE2;
constexpr Joint_Type Joint::PRISMATIC;
constexpr Joint_Type Joint::UNIVERSAL;
constexpr Joint_Type Joint::BALL;
constexpr Joint_Type Joint::SCREW;
constexpr Joint_Type Joint::GEARBOX;
constexpr Joint_Type Joint::FIXED;
constexpr Joint_Type Joint::Type_MIN;
constexpr Joint_Type Joint::Type_MAX;
constexpr int Joint::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Joint_Gearbox::InitAsDefaultInstance() {
}
class Joint_Gearbox::_Internal {
 public:
  using HasBits = decltype(std::declval<Joint_Gearbox>()._has_bits_);
  static void set_has_gearbox_reference_body(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gearbox_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Joint_Gearbox::Joint_Gearbox()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.Joint.Gearbox)
}
Joint_Gearbox::Joint_Gearbox(const Joint_Gearbox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gearbox_reference_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gearbox_reference_body()) {
    gearbox_reference_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gearbox_reference_body_);
  }
  gearbox_ratio_ = from.gearbox_ratio_;
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.Joint.Gearbox)
}

void Joint_Gearbox::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Joint_Gearbox_joint_2eproto.base);
  gearbox_reference_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gearbox_ratio_ = 0;
}

Joint_Gearbox::~Joint_Gearbox() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.Joint.Gearbox)
  SharedDtor();
}

void Joint_Gearbox::SharedDtor() {
  gearbox_reference_body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Joint_Gearbox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Joint_Gearbox& Joint_Gearbox::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Joint_Gearbox_joint_2eproto.base);
  return *internal_default_instance();
}


void Joint_Gearbox::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.Joint.Gearbox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    gearbox_reference_body_.ClearNonDefaultToEmptyNoArena();
  }
  gearbox_ratio_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Joint_Gearbox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string gearbox_reference_body = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gearbox_reference_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gazebo.msgs.Joint.Gearbox.gearbox_reference_body");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double gearbox_ratio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_gearbox_ratio(&has_bits);
          gearbox_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Joint_Gearbox::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.Joint.Gearbox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string gearbox_reference_body = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gearbox_reference_body().data(), static_cast<int>(this->_internal_gearbox_reference_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.Joint.Gearbox.gearbox_reference_body");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gearbox_reference_body(), target);
  }

  // required double gearbox_ratio = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_gearbox_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.Joint.Gearbox)
  return target;
}

size_t Joint_Gearbox::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gazebo.msgs.Joint.Gearbox)
  size_t total_size = 0;

  if (_internal_has_gearbox_reference_body()) {
    // required string gearbox_reference_body = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gearbox_reference_body());
  }

  if (_internal_has_gearbox_ratio()) {
    // required double gearbox_ratio = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t Joint_Gearbox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.Joint.Gearbox)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string gearbox_reference_body = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gearbox_reference_body());

    // required double gearbox_ratio = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Joint_Gearbox::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.Joint.Gearbox)
  GOOGLE_DCHECK_NE(&from, this);
  const Joint_Gearbox* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Joint_Gearbox>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.Joint.Gearbox)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.Joint.Gearbox)
    MergeFrom(*source);
  }
}

void Joint_Gearbox::MergeFrom(const Joint_Gearbox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.Joint.Gearbox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      gearbox_reference_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gearbox_reference_body_);
    }
    if (cached_has_bits & 0x00000002u) {
      gearbox_ratio_ = from.gearbox_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Joint_Gearbox::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.Joint.Gearbox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Joint_Gearbox::CopyFrom(const Joint_Gearbox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.Joint.Gearbox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Joint_Gearbox::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Joint_Gearbox::InternalSwap(Joint_Gearbox* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gearbox_reference_body_.Swap(&other->gearbox_reference_body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gearbox_ratio_, other->gearbox_ratio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Joint_Gearbox::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Joint_Screw::InitAsDefaultInstance() {
}
class Joint_Screw::_Internal {
 public:
  using HasBits = decltype(std::declval<Joint_Screw>()._has_bits_);
  static void set_has_thread_pitch(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Joint_Screw::Joint_Screw()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.Joint.Screw)
}
Joint_Screw::Joint_Screw(const Joint_Screw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thread_pitch_ = from.thread_pitch_;
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.Joint.Screw)
}

void Joint_Screw::SharedCtor() {
  thread_pitch_ = 0;
}

Joint_Screw::~Joint_Screw() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.Joint.Screw)
  SharedDtor();
}

void Joint_Screw::SharedDtor() {
}

void Joint_Screw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Joint_Screw& Joint_Screw::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Joint_Screw_joint_2eproto.base);
  return *internal_default_instance();
}


void Joint_Screw::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.Joint.Screw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  thread_pitch_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Joint_Screw::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double thread_pitch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_thread_pitch(&has_bits);
          thread_pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Joint_Screw::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.Joint.Screw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double thread_pitch = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_thread_pitch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.Joint.Screw)
  return target;
}

size_t Joint_Screw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.Joint.Screw)
  size_t total_size = 0;

  // required double thread_pitch = 1;
  if (_internal_has_thread_pitch()) {
    total_size += 1 + 8;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Joint_Screw::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.Joint.Screw)
  GOOGLE_DCHECK_NE(&from, this);
  const Joint_Screw* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Joint_Screw>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.Joint.Screw)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.Joint.Screw)
    MergeFrom(*source);
  }
}

void Joint_Screw::MergeFrom(const Joint_Screw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.Joint.Screw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_thread_pitch()) {
    _internal_set_thread_pitch(from._internal_thread_pitch());
  }
}

void Joint_Screw::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.Joint.Screw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Joint_Screw::CopyFrom(const Joint_Screw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.Joint.Screw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Joint_Screw::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Joint_Screw::InternalSwap(Joint_Screw* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(thread_pitch_, other->thread_pitch_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Joint_Screw::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Joint::InitAsDefaultInstance() {
  ::gazebo::msgs::_Joint_default_instance_._instance.get_mutable()->pose_ = const_cast< ::gazebo::msgs::Pose*>(
      ::gazebo::msgs::Pose::internal_default_instance());
  ::gazebo::msgs::_Joint_default_instance_._instance.get_mutable()->axis1_ = const_cast< ::gazebo::msgs::Axis*>(
      ::gazebo::msgs::Axis::internal_default_instance());
  ::gazebo::msgs::_Joint_default_instance_._instance.get_mutable()->axis2_ = const_cast< ::gazebo::msgs::Axis*>(
      ::gazebo::msgs::Axis::internal_default_instance());
  ::gazebo::msgs::_Joint_default_instance_._instance.get_mutable()->gearbox_ = const_cast< ::gazebo::msgs::Joint_Gearbox*>(
      ::gazebo::msgs::Joint_Gearbox::internal_default_instance());
  ::gazebo::msgs::_Joint_default_instance_._instance.get_mutable()->screw_ = const_cast< ::gazebo::msgs::Joint_Screw*>(
      ::gazebo::msgs::Joint_Screw::internal_default_instance());
}
class Joint::_Internal {
 public:
  using HasBits = decltype(std::declval<Joint>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_parent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_child(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_child_id(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::gazebo::msgs::Pose& pose(const Joint* msg);
  static void set_has_pose(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::gazebo::msgs::Axis& axis1(const Joint* msg);
  static void set_has_axis1(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::gazebo::msgs::Axis& axis2(const Joint* msg);
  static void set_has_axis2(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_cfm(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_bounce(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_fudge_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_limit_cfm(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_limit_erp(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_suspension_cfm(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_suspension_erp(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::gazebo::msgs::Joint_Gearbox& gearbox(const Joint* msg);
  static void set_has_gearbox(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::gazebo::msgs::Joint_Screw& screw(const Joint* msg);
  static void set_has_screw(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::gazebo::msgs::Pose&
Joint::_Internal::pose(const Joint* msg) {
  return *msg->pose_;
}
const ::gazebo::msgs::Axis&
Joint::_Internal::axis1(const Joint* msg) {
  return *msg->axis1_;
}
const ::gazebo::msgs::Axis&
Joint::_Internal::axis2(const Joint* msg) {
  return *msg->axis2_;
}
const ::gazebo::msgs::Joint_Gearbox&
Joint::_Internal::gearbox(const Joint* msg) {
  return *msg->gearbox_;
}
const ::gazebo::msgs::Joint_Screw&
Joint::_Internal::screw(const Joint* msg) {
  return *msg->screw_;
}
void Joint::clear_pose() {
  if (pose_ != nullptr) pose_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void Joint::clear_axis1() {
  if (axis1_ != nullptr) axis1_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void Joint::clear_axis2() {
  if (axis2_ != nullptr) axis2_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void Joint::clear_sensor() {
  sensor_.Clear();
}
Joint::Joint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.Joint)
}
Joint::Joint(const Joint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      angle_(from.angle_),
      sensor_(from.sensor_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_parent()) {
    parent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  child_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_child()) {
    child_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.child_);
  }
  if (from._internal_has_pose()) {
    pose_ = new ::gazebo::msgs::Pose(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  if (from._internal_has_axis1()) {
    axis1_ = new ::gazebo::msgs::Axis(*from.axis1_);
  } else {
    axis1_ = nullptr;
  }
  if (from._internal_has_axis2()) {
    axis2_ = new ::gazebo::msgs::Axis(*from.axis2_);
  } else {
    axis2_ = nullptr;
  }
  if (from._internal_has_gearbox()) {
    gearbox_ = new ::gazebo::msgs::Joint_Gearbox(*from.gearbox_);
  } else {
    gearbox_ = nullptr;
  }
  if (from._internal_has_screw()) {
    screw_ = new ::gazebo::msgs::Joint_Screw(*from.screw_);
  } else {
    screw_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.Joint)
}

void Joint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Joint_joint_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  child_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&child_id_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(child_id_));
  type_ = 1;
}

Joint::~Joint() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.Joint)
  SharedDtor();
}

void Joint::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  child_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete axis1_;
  if (this != internal_default_instance()) delete axis2_;
  if (this != internal_default_instance()) delete gearbox_;
  if (this != internal_default_instance()) delete screw_;
}

void Joint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Joint& Joint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Joint_joint_2eproto.base);
  return *internal_default_instance();
}


void Joint::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.Joint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  angle_.Clear();
  sensor_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      parent_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      child_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(pose_ != nullptr);
      pose_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(axis1_ != nullptr);
      axis1_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(axis2_ != nullptr);
      axis2_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(gearbox_ != nullptr);
      gearbox_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(screw_ != nullptr);
      screw_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&limit_erp_) -
        reinterpret_cast<char*>(&id_)) + sizeof(limit_erp_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&suspension_cfm_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&child_id_) -
        reinterpret_cast<char*>(&suspension_cfm_)) + sizeof(child_id_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Joint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gazebo.msgs.Joint.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double angle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_angle(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<25>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_angle(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.Joint.Type type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::gazebo::msgs::Joint_Type_IsValid(val))) {
            _internal_set_type(static_cast<::gazebo::msgs::Joint_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string parent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_parent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gazebo.msgs.Joint.parent");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 parent_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_parent_id(&has_bits);
          parent_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string child = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_child();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gazebo.msgs.Joint.child");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 child_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_child_id(&has_bits);
          child_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.Pose pose = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.Axis axis1 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_axis1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.Axis axis2 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_axis2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double cfm = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_cfm(&has_bits);
          cfm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double bounce = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_bounce(&has_bits);
          bounce_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double velocity = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_velocity(&has_bits);
          velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double fudge_factor = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_fudge_factor(&has_bits);
          fudge_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double limit_cfm = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_limit_cfm(&has_bits);
          limit_cfm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double limit_erp = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_limit_erp(&has_bits);
          limit_erp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double suspension_cfm = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_suspension_cfm(&has_bits);
          suspension_cfm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double suspension_erp = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_suspension_erp(&has_bits);
          suspension_erp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.Joint.Gearbox gearbox = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_gearbox(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.Joint.Screw screw = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_screw(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .gazebo.msgs.Sensor sensor = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_sensor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Joint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.Joint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.Joint.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 id = 2;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  // repeated double angle = 3;
  for (int i = 0, n = this->_internal_angle_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_angle(i), target);
  }

  // optional .gazebo.msgs.Joint.Type type = 4;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  // optional string parent = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_parent().data(), static_cast<int>(this->_internal_parent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.Joint.parent");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_parent(), target);
  }

  // optional uint32 parent_id = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_parent_id(), target);
  }

  // optional string child = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_child().data(), static_cast<int>(this->_internal_child().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.Joint.child");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_child(), target);
  }

  // optional uint32 child_id = 8;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_child_id(), target);
  }

  // optional .gazebo.msgs.Pose pose = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::pose(this), target, stream);
  }

  // optional .gazebo.msgs.Axis axis1 = 10;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::axis1(this), target, stream);
  }

  // optional .gazebo.msgs.Axis axis2 = 11;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::axis2(this), target, stream);
  }

  // optional double cfm = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_cfm(), target);
  }

  // optional double bounce = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_bounce(), target);
  }

  // optional double velocity = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_velocity(), target);
  }

  // optional double fudge_factor = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_fudge_factor(), target);
  }

  // optional double limit_cfm = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_limit_cfm(), target);
  }

  // optional double limit_erp = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_limit_erp(), target);
  }

  // optional double suspension_cfm = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_suspension_cfm(), target);
  }

  // optional double suspension_erp = 19;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_suspension_erp(), target);
  }

  // optional .gazebo.msgs.Joint.Gearbox gearbox = 20;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::gearbox(this), target, stream);
  }

  // optional .gazebo.msgs.Joint.Screw screw = 21;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::screw(this), target, stream);
  }

  // repeated .gazebo.msgs.Sensor sensor = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sensor_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, this->_internal_sensor(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.Joint)
  return target;
}

size_t Joint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.Joint)
  size_t total_size = 0;

  // required string name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double angle = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_angle_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_angle_size());
    total_size += data_size;
  }

  // repeated .gazebo.msgs.Sensor sensor = 22;
  total_size += 2UL * this->_internal_sensor_size();
  for (const auto& msg : this->sensor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional string parent = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_parent());
    }

    // optional string child = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_child());
    }

    // optional .gazebo.msgs.Pose pose = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pose_);
    }

    // optional .gazebo.msgs.Axis axis1 = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *axis1_);
    }

    // optional .gazebo.msgs.Axis axis2 = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *axis2_);
    }

    // optional .gazebo.msgs.Joint.Gearbox gearbox = 20;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gearbox_);
    }

    // optional .gazebo.msgs.Joint.Screw screw = 21;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *screw_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 id = 2;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional uint32 parent_id = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_parent_id());
    }

    // optional double cfm = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double bounce = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double velocity = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double fudge_factor = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double limit_cfm = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 8;
    }

    // optional double limit_erp = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional double suspension_cfm = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double suspension_erp = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional uint32 child_id = 8;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_child_id());
    }

    // optional .gazebo.msgs.Joint.Type type = 4;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Joint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.Joint)
  GOOGLE_DCHECK_NE(&from, this);
  const Joint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Joint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.Joint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.Joint)
    MergeFrom(*source);
  }
}

void Joint::MergeFrom(const Joint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.Joint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  angle_.MergeFrom(from.angle_);
  sensor_.MergeFrom(from.sensor_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      parent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.parent_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      child_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.child_);
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_pose()->::gazebo::msgs::Pose::MergeFrom(from._internal_pose());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_axis1()->::gazebo::msgs::Axis::MergeFrom(from._internal_axis1());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_axis2()->::gazebo::msgs::Axis::MergeFrom(from._internal_axis2());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_gearbox()->::gazebo::msgs::Joint_Gearbox::MergeFrom(from._internal_gearbox());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_screw()->::gazebo::msgs::Joint_Screw::MergeFrom(from._internal_screw());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000200u) {
      parent_id_ = from.parent_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      cfm_ = from.cfm_;
    }
    if (cached_has_bits & 0x00000800u) {
      bounce_ = from.bounce_;
    }
    if (cached_has_bits & 0x00001000u) {
      velocity_ = from.velocity_;
    }
    if (cached_has_bits & 0x00002000u) {
      fudge_factor_ = from.fudge_factor_;
    }
    if (cached_has_bits & 0x00004000u) {
      limit_cfm_ = from.limit_cfm_;
    }
    if (cached_has_bits & 0x00008000u) {
      limit_erp_ = from.limit_erp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      suspension_cfm_ = from.suspension_cfm_;
    }
    if (cached_has_bits & 0x00020000u) {
      suspension_erp_ = from.suspension_erp_;
    }
    if (cached_has_bits & 0x00040000u) {
      child_id_ = from.child_id_;
    }
    if (cached_has_bits & 0x00080000u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Joint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.Joint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Joint::CopyFrom(const Joint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.Joint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Joint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(sensor_)) return false;
  if (_internal_has_pose()) {
    if (!pose_->IsInitialized()) return false;
  }
  if (_internal_has_axis1()) {
    if (!axis1_->IsInitialized()) return false;
  }
  if (_internal_has_axis2()) {
    if (!axis2_->IsInitialized()) return false;
  }
  if (_internal_has_gearbox()) {
    if (!gearbox_->IsInitialized()) return false;
  }
  if (_internal_has_screw()) {
    if (!screw_->IsInitialized()) return false;
  }
  return true;
}

void Joint::InternalSwap(Joint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  angle_.InternalSwap(&other->angle_);
  sensor_.InternalSwap(&other->sensor_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  parent_.Swap(&other->parent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  child_.Swap(&other->child_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pose_, other->pose_);
  swap(axis1_, other->axis1_);
  swap(axis2_, other->axis2_);
  swap(gearbox_, other->gearbox_);
  swap(screw_, other->screw_);
  swap(id_, other->id_);
  swap(parent_id_, other->parent_id_);
  swap(cfm_, other->cfm_);
  swap(bounce_, other->bounce_);
  swap(velocity_, other->velocity_);
  swap(fudge_factor_, other->fudge_factor_);
  swap(limit_cfm_, other->limit_cfm_);
  swap(limit_erp_, other->limit_erp_);
  swap(suspension_cfm_, other->suspension_cfm_);
  swap(suspension_erp_, other->suspension_erp_);
  swap(child_id_, other->child_id_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Joint::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gazebo::msgs::Joint_Gearbox* Arena::CreateMaybeMessage< ::gazebo::msgs::Joint_Gearbox >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::Joint_Gearbox >(arena);
}
template<> PROTOBUF_NOINLINE ::gazebo::msgs::Joint_Screw* Arena::CreateMaybeMessage< ::gazebo::msgs::Joint_Screw >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::Joint_Screw >(arena);
}
template<> PROTOBUF_NOINLINE ::gazebo::msgs::Joint* Arena::CreateMaybeMessage< ::gazebo::msgs::Joint >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::Joint >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

GZ_REGISTER_STATIC_MSG("gazebo.msgs.Joint", Joint)
// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
