// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: world_stats.proto

#include "world_stats.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_log_5fplayback_5fstats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogPlaybackStatistics_log_5fplayback_5fstats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_time_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Time_time_2eproto;
namespace gazebo {
namespace msgs {
class WorldStatisticsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorldStatistics> _instance;
} _WorldStatistics_default_instance_;
}  // namespace msgs
}  // namespace gazebo
static void InitDefaultsscc_info_WorldStatistics_world_5fstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_WorldStatistics_default_instance_;
    new (ptr) ::gazebo::msgs::WorldStatistics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::WorldStatistics::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WorldStatistics_world_5fstats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_WorldStatistics_world_5fstats_2eproto}, {
      &scc_info_Time_time_2eproto.base,
      &scc_info_LogPlaybackStatistics_log_5fplayback_5fstats_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_world_5fstats_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_world_5fstats_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_world_5fstats_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_world_5fstats_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::WorldStatistics, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::WorldStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::WorldStatistics, sim_time_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::WorldStatistics, pause_time_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::WorldStatistics, real_time_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::WorldStatistics, paused_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::WorldStatistics, iterations_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::WorldStatistics, model_count_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::WorldStatistics, log_playback_stats_),
  0,
  1,
  2,
  5,
  4,
  6,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::gazebo::msgs::WorldStatistics)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_WorldStatistics_default_instance_),
};

const char descriptor_table_protodef_world_5fstats_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021world_stats.proto\022\013gazebo.msgs\032\030log_pl"
  "ayback_stats.proto\032\ntime.proto\"\374\001\n\017World"
  "Statistics\022#\n\010sim_time\030\002 \002(\0132\021.gazebo.ms"
  "gs.Time\022%\n\npause_time\030\003 \002(\0132\021.gazebo.msg"
  "s.Time\022$\n\treal_time\030\004 \002(\0132\021.gazebo.msgs."
  "Time\022\016\n\006paused\030\005 \002(\010\022\022\n\niterations\030\006 \002(\004"
  "\022\023\n\013model_count\030\007 \001(\005\022>\n\022log_playback_st"
  "ats\030\010 \001(\0132\".gazebo.msgs.LogPlaybackStati"
  "stics"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_world_5fstats_2eproto_deps[2] = {
  &::descriptor_table_log_5fplayback_5fstats_2eproto,
  &::descriptor_table_time_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_world_5fstats_2eproto_sccs[1] = {
  &scc_info_WorldStatistics_world_5fstats_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_world_5fstats_2eproto_once;
static bool descriptor_table_world_5fstats_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_world_5fstats_2eproto = {
  &descriptor_table_world_5fstats_2eproto_initialized, descriptor_table_protodef_world_5fstats_2eproto, "world_stats.proto", 325,
  &descriptor_table_world_5fstats_2eproto_once, descriptor_table_world_5fstats_2eproto_sccs, descriptor_table_world_5fstats_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_world_5fstats_2eproto::offsets,
  file_level_metadata_world_5fstats_2eproto, 1, file_level_enum_descriptors_world_5fstats_2eproto, file_level_service_descriptors_world_5fstats_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_world_5fstats_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_world_5fstats_2eproto), true);
namespace gazebo {
namespace msgs {

// ===================================================================

void WorldStatistics::InitAsDefaultInstance() {
  ::gazebo::msgs::_WorldStatistics_default_instance_._instance.get_mutable()->sim_time_ = const_cast< ::gazebo::msgs::Time*>(
      ::gazebo::msgs::Time::internal_default_instance());
  ::gazebo::msgs::_WorldStatistics_default_instance_._instance.get_mutable()->pause_time_ = const_cast< ::gazebo::msgs::Time*>(
      ::gazebo::msgs::Time::internal_default_instance());
  ::gazebo::msgs::_WorldStatistics_default_instance_._instance.get_mutable()->real_time_ = const_cast< ::gazebo::msgs::Time*>(
      ::gazebo::msgs::Time::internal_default_instance());
  ::gazebo::msgs::_WorldStatistics_default_instance_._instance.get_mutable()->log_playback_stats_ = const_cast< ::gazebo::msgs::LogPlaybackStatistics*>(
      ::gazebo::msgs::LogPlaybackStatistics::internal_default_instance());
}
class WorldStatistics::_Internal {
 public:
  using HasBits = decltype(std::declval<WorldStatistics>()._has_bits_);
  static const ::gazebo::msgs::Time& sim_time(const WorldStatistics* msg);
  static void set_has_sim_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::gazebo::msgs::Time& pause_time(const WorldStatistics* msg);
  static void set_has_pause_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::gazebo::msgs::Time& real_time(const WorldStatistics* msg);
  static void set_has_real_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_paused(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_iterations(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_model_count(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::gazebo::msgs::LogPlaybackStatistics& log_playback_stats(const WorldStatistics* msg);
  static void set_has_log_playback_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::gazebo::msgs::Time&
WorldStatistics::_Internal::sim_time(const WorldStatistics* msg) {
  return *msg->sim_time_;
}
const ::gazebo::msgs::Time&
WorldStatistics::_Internal::pause_time(const WorldStatistics* msg) {
  return *msg->pause_time_;
}
const ::gazebo::msgs::Time&
WorldStatistics::_Internal::real_time(const WorldStatistics* msg) {
  return *msg->real_time_;
}
const ::gazebo::msgs::LogPlaybackStatistics&
WorldStatistics::_Internal::log_playback_stats(const WorldStatistics* msg) {
  return *msg->log_playback_stats_;
}
void WorldStatistics::clear_sim_time() {
  if (sim_time_ != nullptr) sim_time_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void WorldStatistics::clear_pause_time() {
  if (pause_time_ != nullptr) pause_time_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void WorldStatistics::clear_real_time() {
  if (real_time_ != nullptr) real_time_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void WorldStatistics::clear_log_playback_stats() {
  if (log_playback_stats_ != nullptr) log_playback_stats_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
WorldStatistics::WorldStatistics()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.WorldStatistics)
}
WorldStatistics::WorldStatistics(const WorldStatistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_sim_time()) {
    sim_time_ = new ::gazebo::msgs::Time(*from.sim_time_);
  } else {
    sim_time_ = nullptr;
  }
  if (from._internal_has_pause_time()) {
    pause_time_ = new ::gazebo::msgs::Time(*from.pause_time_);
  } else {
    pause_time_ = nullptr;
  }
  if (from._internal_has_real_time()) {
    real_time_ = new ::gazebo::msgs::Time(*from.real_time_);
  } else {
    real_time_ = nullptr;
  }
  if (from._internal_has_log_playback_stats()) {
    log_playback_stats_ = new ::gazebo::msgs::LogPlaybackStatistics(*from.log_playback_stats_);
  } else {
    log_playback_stats_ = nullptr;
  }
  ::memcpy(&iterations_, &from.iterations_,
    static_cast<size_t>(reinterpret_cast<char*>(&model_count_) -
    reinterpret_cast<char*>(&iterations_)) + sizeof(model_count_));
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.WorldStatistics)
}

void WorldStatistics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorldStatistics_world_5fstats_2eproto.base);
  ::memset(&sim_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&model_count_) -
      reinterpret_cast<char*>(&sim_time_)) + sizeof(model_count_));
}

WorldStatistics::~WorldStatistics() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.WorldStatistics)
  SharedDtor();
}

void WorldStatistics::SharedDtor() {
  if (this != internal_default_instance()) delete sim_time_;
  if (this != internal_default_instance()) delete pause_time_;
  if (this != internal_default_instance()) delete real_time_;
  if (this != internal_default_instance()) delete log_playback_stats_;
}

void WorldStatistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorldStatistics& WorldStatistics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorldStatistics_world_5fstats_2eproto.base);
  return *internal_default_instance();
}


void WorldStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.WorldStatistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sim_time_ != nullptr);
      sim_time_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pause_time_ != nullptr);
      pause_time_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(real_time_ != nullptr);
      real_time_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(log_playback_stats_ != nullptr);
      log_playback_stats_->Clear();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&iterations_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&model_count_) -
        reinterpret_cast<char*>(&iterations_)) + sizeof(model_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* WorldStatistics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .gazebo.msgs.Time sim_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sim_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .gazebo.msgs.Time pause_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pause_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .gazebo.msgs.Time real_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_real_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool paused = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_paused(&has_bits);
          paused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 iterations = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_iterations(&has_bits);
          iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 model_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_model_count(&has_bits);
          model_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.LogPlaybackStatistics log_playback_stats = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_log_playback_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorldStatistics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.WorldStatistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gazebo.msgs.Time sim_time = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sim_time(this), target, stream);
  }

  // required .gazebo.msgs.Time pause_time = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pause_time(this), target, stream);
  }

  // required .gazebo.msgs.Time real_time = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::real_time(this), target, stream);
  }

  // required bool paused = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_paused(), target);
  }

  // required uint64 iterations = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_iterations(), target);
  }

  // optional int32 model_count = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_model_count(), target);
  }

  // optional .gazebo.msgs.LogPlaybackStatistics log_playback_stats = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::log_playback_stats(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.WorldStatistics)
  return target;
}

size_t WorldStatistics::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gazebo.msgs.WorldStatistics)
  size_t total_size = 0;

  if (_internal_has_sim_time()) {
    // required .gazebo.msgs.Time sim_time = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sim_time_);
  }

  if (_internal_has_pause_time()) {
    // required .gazebo.msgs.Time pause_time = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pause_time_);
  }

  if (_internal_has_real_time()) {
    // required .gazebo.msgs.Time real_time = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *real_time_);
  }

  if (_internal_has_iterations()) {
    // required uint64 iterations = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_iterations());
  }

  if (_internal_has_paused()) {
    // required bool paused = 5;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t WorldStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.WorldStatistics)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000037) ^ 0x00000037) == 0) {  // All required fields are present.
    // required .gazebo.msgs.Time sim_time = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sim_time_);

    // required .gazebo.msgs.Time pause_time = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pause_time_);

    // required .gazebo.msgs.Time real_time = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *real_time_);

    // required uint64 iterations = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_iterations());

    // required bool paused = 5;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .gazebo.msgs.LogPlaybackStatistics log_playback_stats = 8;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *log_playback_stats_);
  }

  // optional int32 model_count = 7;
  if (cached_has_bits & 0x00000040u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_model_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorldStatistics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.WorldStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  const WorldStatistics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorldStatistics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.WorldStatistics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.WorldStatistics)
    MergeFrom(*source);
  }
}

void WorldStatistics::MergeFrom(const WorldStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.WorldStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sim_time()->::gazebo::msgs::Time::MergeFrom(from._internal_sim_time());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_pause_time()->::gazebo::msgs::Time::MergeFrom(from._internal_pause_time());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_real_time()->::gazebo::msgs::Time::MergeFrom(from._internal_real_time());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_log_playback_stats()->::gazebo::msgs::LogPlaybackStatistics::MergeFrom(from._internal_log_playback_stats());
    }
    if (cached_has_bits & 0x00000010u) {
      iterations_ = from.iterations_;
    }
    if (cached_has_bits & 0x00000020u) {
      paused_ = from.paused_;
    }
    if (cached_has_bits & 0x00000040u) {
      model_count_ = from.model_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WorldStatistics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.WorldStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldStatistics::CopyFrom(const WorldStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.WorldStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldStatistics::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000037) != 0x00000037) return false;
  if (_internal_has_sim_time()) {
    if (!sim_time_->IsInitialized()) return false;
  }
  if (_internal_has_pause_time()) {
    if (!pause_time_->IsInitialized()) return false;
  }
  if (_internal_has_real_time()) {
    if (!real_time_->IsInitialized()) return false;
  }
  if (_internal_has_log_playback_stats()) {
    if (!log_playback_stats_->IsInitialized()) return false;
  }
  return true;
}

void WorldStatistics::InternalSwap(WorldStatistics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sim_time_, other->sim_time_);
  swap(pause_time_, other->pause_time_);
  swap(real_time_, other->real_time_);
  swap(log_playback_stats_, other->log_playback_stats_);
  swap(iterations_, other->iterations_);
  swap(paused_, other->paused_);
  swap(model_count_, other->model_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorldStatistics::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gazebo::msgs::WorldStatistics* Arena::CreateMaybeMessage< ::gazebo::msgs::WorldStatistics >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::WorldStatistics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

GZ_REGISTER_STATIC_MSG("gazebo.msgs.WorldStatistics", WorldStatistics)
// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
