// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: light.proto

#include "light.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_color_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Color_color_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pose_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Pose_pose_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vector3d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3d_vector3d_2eproto;
namespace gazebo {
namespace msgs {
class LightDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Light> _instance;
} _Light_default_instance_;
}  // namespace msgs
}  // namespace gazebo
static void InitDefaultsscc_info_Light_light_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_Light_default_instance_;
    new (ptr) ::gazebo::msgs::Light();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::Light::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Light_light_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Light_light_2eproto}, {
      &scc_info_Pose_pose_2eproto.base,
      &scc_info_Color_color_2eproto.base,
      &scc_info_Vector3d_vector3d_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_light_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_light_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_light_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_light_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Light, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Light, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Light, name_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Light, type_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Light, pose_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Light, diffuse_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Light, specular_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Light, attenuation_constant_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Light, attenuation_linear_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Light, attenuation_quadratic_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Light, direction_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Light, range_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Light, cast_shadows_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Light, spot_inner_angle_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Light, spot_outer_angle_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Light, spot_falloff_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Light, id_),
  0,
  14,
  1,
  2,
  3,
  5,
  6,
  7,
  4,
  8,
  9,
  10,
  11,
  12,
  13,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 20, sizeof(::gazebo::msgs::Light)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_Light_default_instance_),
};

const char descriptor_table_protodef_light_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013light.proto\022\013gazebo.msgs\032\npose.proto\032\016"
  "vector3d.proto\032\013color.proto\"\336\003\n\005Light\022\014\n"
  "\004name\030\001 \002(\t\022*\n\004type\030\002 \001(\0162\034.gazebo.msgs."
  "Light.LightType\022\037\n\004pose\030\003 \001(\0132\021.gazebo.m"
  "sgs.Pose\022#\n\007diffuse\030\004 \001(\0132\022.gazebo.msgs."
  "Color\022$\n\010specular\030\005 \001(\0132\022.gazebo.msgs.Co"
  "lor\022\034\n\024attenuation_constant\030\006 \001(\002\022\032\n\022att"
  "enuation_linear\030\007 \001(\002\022\035\n\025attenuation_qua"
  "dratic\030\010 \001(\002\022(\n\tdirection\030\t \001(\0132\025.gazebo"
  ".msgs.Vector3d\022\r\n\005range\030\n \001(\002\022\024\n\014cast_sh"
  "adows\030\013 \001(\010\022\030\n\020spot_inner_angle\030\014 \001(\002\022\030\n"
  "\020spot_outer_angle\030\r \001(\002\022\024\n\014spot_falloff\030"
  "\016 \001(\002\022\n\n\002id\030\017 \001(\r\"1\n\tLightType\022\t\n\005POINT\020"
  "\001\022\010\n\004SPOT\020\002\022\017\n\013DIRECTIONAL\020\003"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_light_2eproto_deps[3] = {
  &::descriptor_table_color_2eproto,
  &::descriptor_table_pose_2eproto,
  &::descriptor_table_vector3d_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_light_2eproto_sccs[1] = {
  &scc_info_Light_light_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_light_2eproto_once;
static bool descriptor_table_light_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_light_2eproto = {
  &descriptor_table_light_2eproto_initialized, descriptor_table_protodef_light_2eproto, "light.proto", 548,
  &descriptor_table_light_2eproto_once, descriptor_table_light_2eproto_sccs, descriptor_table_light_2eproto_deps, 1, 3,
  schemas, file_default_instances, TableStruct_light_2eproto::offsets,
  file_level_metadata_light_2eproto, 1, file_level_enum_descriptors_light_2eproto, file_level_service_descriptors_light_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_light_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_light_2eproto), true);
namespace gazebo {
namespace msgs {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Light_LightType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_light_2eproto);
  return file_level_enum_descriptors_light_2eproto[0];
}
bool Light_LightType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Light_LightType Light::POINT;
constexpr Light_LightType Light::SPOT;
constexpr Light_LightType Light::DIRECTIONAL;
constexpr Light_LightType Light::LightType_MIN;
constexpr Light_LightType Light::LightType_MAX;
constexpr int Light::LightType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Light::InitAsDefaultInstance() {
  ::gazebo::msgs::_Light_default_instance_._instance.get_mutable()->pose_ = const_cast< ::gazebo::msgs::Pose*>(
      ::gazebo::msgs::Pose::internal_default_instance());
  ::gazebo::msgs::_Light_default_instance_._instance.get_mutable()->diffuse_ = const_cast< ::gazebo::msgs::Color*>(
      ::gazebo::msgs::Color::internal_default_instance());
  ::gazebo::msgs::_Light_default_instance_._instance.get_mutable()->specular_ = const_cast< ::gazebo::msgs::Color*>(
      ::gazebo::msgs::Color::internal_default_instance());
  ::gazebo::msgs::_Light_default_instance_._instance.get_mutable()->direction_ = const_cast< ::gazebo::msgs::Vector3d*>(
      ::gazebo::msgs::Vector3d::internal_default_instance());
}
class Light::_Internal {
 public:
  using HasBits = decltype(std::declval<Light>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::gazebo::msgs::Pose& pose(const Light* msg);
  static void set_has_pose(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::gazebo::msgs::Color& diffuse(const Light* msg);
  static void set_has_diffuse(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::gazebo::msgs::Color& specular(const Light* msg);
  static void set_has_specular(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_attenuation_constant(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_attenuation_linear(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_attenuation_quadratic(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::gazebo::msgs::Vector3d& direction(const Light* msg);
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_cast_shadows(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_spot_inner_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_spot_outer_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_spot_falloff(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::gazebo::msgs::Pose&
Light::_Internal::pose(const Light* msg) {
  return *msg->pose_;
}
const ::gazebo::msgs::Color&
Light::_Internal::diffuse(const Light* msg) {
  return *msg->diffuse_;
}
const ::gazebo::msgs::Color&
Light::_Internal::specular(const Light* msg) {
  return *msg->specular_;
}
const ::gazebo::msgs::Vector3d&
Light::_Internal::direction(const Light* msg) {
  return *msg->direction_;
}
void Light::clear_pose() {
  if (pose_ != nullptr) pose_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Light::clear_diffuse() {
  if (diffuse_ != nullptr) diffuse_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void Light::clear_specular() {
  if (specular_ != nullptr) specular_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void Light::clear_direction() {
  if (direction_ != nullptr) direction_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
Light::Light()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.Light)
}
Light::Light(const Light& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_pose()) {
    pose_ = new ::gazebo::msgs::Pose(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  if (from._internal_has_diffuse()) {
    diffuse_ = new ::gazebo::msgs::Color(*from.diffuse_);
  } else {
    diffuse_ = nullptr;
  }
  if (from._internal_has_specular()) {
    specular_ = new ::gazebo::msgs::Color(*from.specular_);
  } else {
    specular_ = nullptr;
  }
  if (from._internal_has_direction()) {
    direction_ = new ::gazebo::msgs::Vector3d(*from.direction_);
  } else {
    direction_ = nullptr;
  }
  ::memcpy(&attenuation_constant_, &from.attenuation_constant_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&attenuation_constant_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.Light)
}

void Light::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Light_light_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(id_));
  type_ = 1;
}

Light::~Light() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.Light)
  SharedDtor();
}

void Light::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete diffuse_;
  if (this != internal_default_instance()) delete specular_;
  if (this != internal_default_instance()) delete direction_;
}

void Light::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Light& Light::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Light_light_2eproto.base);
  return *internal_default_instance();
}


void Light::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.Light)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pose_ != nullptr);
      pose_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(diffuse_ != nullptr);
      diffuse_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(specular_ != nullptr);
      specular_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(direction_ != nullptr);
      direction_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&attenuation_constant_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&attenuation_quadratic_) -
        reinterpret_cast<char*>(&attenuation_constant_)) + sizeof(attenuation_quadratic_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&range_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&range_)) + sizeof(id_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Light::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gazebo.msgs.Light.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.Light.LightType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::gazebo::msgs::Light_LightType_IsValid(val))) {
            _internal_set_type(static_cast<::gazebo::msgs::Light_LightType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.Pose pose = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.Color diffuse = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_diffuse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.Color specular = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_specular(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float attenuation_constant = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_attenuation_constant(&has_bits);
          attenuation_constant_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float attenuation_linear = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_attenuation_linear(&has_bits);
          attenuation_linear_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float attenuation_quadratic = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_attenuation_quadratic(&has_bits);
          attenuation_quadratic_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.Vector3d direction = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_direction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float range = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_range(&has_bits);
          range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool cast_shadows = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_cast_shadows(&has_bits);
          cast_shadows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float spot_inner_angle = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_spot_inner_angle(&has_bits);
          spot_inner_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float spot_outer_angle = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_spot_outer_angle(&has_bits);
          spot_outer_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float spot_falloff = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_spot_falloff(&has_bits);
          spot_falloff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Light::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.Light)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.Light.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .gazebo.msgs.Light.LightType type = 2;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional .gazebo.msgs.Pose pose = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pose(this), target, stream);
  }

  // optional .gazebo.msgs.Color diffuse = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::diffuse(this), target, stream);
  }

  // optional .gazebo.msgs.Color specular = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::specular(this), target, stream);
  }

  // optional float attenuation_constant = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_attenuation_constant(), target);
  }

  // optional float attenuation_linear = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_attenuation_linear(), target);
  }

  // optional float attenuation_quadratic = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_attenuation_quadratic(), target);
  }

  // optional .gazebo.msgs.Vector3d direction = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::direction(this), target, stream);
  }

  // optional float range = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_range(), target);
  }

  // optional bool cast_shadows = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_cast_shadows(), target);
  }

  // optional float spot_inner_angle = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_spot_inner_angle(), target);
  }

  // optional float spot_outer_angle = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_spot_outer_angle(), target);
  }

  // optional float spot_falloff = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_spot_falloff(), target);
  }

  // optional uint32 id = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.Light)
  return target;
}

size_t Light::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.Light)
  size_t total_size = 0;

  // required string name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional .gazebo.msgs.Pose pose = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pose_);
    }

    // optional .gazebo.msgs.Color diffuse = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *diffuse_);
    }

    // optional .gazebo.msgs.Color specular = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specular_);
    }

    // optional .gazebo.msgs.Vector3d direction = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *direction_);
    }

    // optional float attenuation_constant = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float attenuation_linear = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float attenuation_quadratic = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional float range = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional bool cast_shadows = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional float spot_inner_angle = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float spot_outer_angle = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float spot_falloff = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional uint32 id = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional .gazebo.msgs.Light.LightType type = 2;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Light::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.Light)
  GOOGLE_DCHECK_NE(&from, this);
  const Light* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Light>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.Light)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.Light)
    MergeFrom(*source);
  }
}

void Light::MergeFrom(const Light& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.Light)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_pose()->::gazebo::msgs::Pose::MergeFrom(from._internal_pose());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_diffuse()->::gazebo::msgs::Color::MergeFrom(from._internal_diffuse());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_specular()->::gazebo::msgs::Color::MergeFrom(from._internal_specular());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_direction()->::gazebo::msgs::Vector3d::MergeFrom(from._internal_direction());
    }
    if (cached_has_bits & 0x00000020u) {
      attenuation_constant_ = from.attenuation_constant_;
    }
    if (cached_has_bits & 0x00000040u) {
      attenuation_linear_ = from.attenuation_linear_;
    }
    if (cached_has_bits & 0x00000080u) {
      attenuation_quadratic_ = from.attenuation_quadratic_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      range_ = from.range_;
    }
    if (cached_has_bits & 0x00000200u) {
      cast_shadows_ = from.cast_shadows_;
    }
    if (cached_has_bits & 0x00000400u) {
      spot_inner_angle_ = from.spot_inner_angle_;
    }
    if (cached_has_bits & 0x00000800u) {
      spot_outer_angle_ = from.spot_outer_angle_;
    }
    if (cached_has_bits & 0x00001000u) {
      spot_falloff_ = from.spot_falloff_;
    }
    if (cached_has_bits & 0x00002000u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00004000u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Light::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.Light)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Light::CopyFrom(const Light& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.Light)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Light::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (_internal_has_pose()) {
    if (!pose_->IsInitialized()) return false;
  }
  if (_internal_has_diffuse()) {
    if (!diffuse_->IsInitialized()) return false;
  }
  if (_internal_has_specular()) {
    if (!specular_->IsInitialized()) return false;
  }
  if (_internal_has_direction()) {
    if (!direction_->IsInitialized()) return false;
  }
  return true;
}

void Light::InternalSwap(Light* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pose_, other->pose_);
  swap(diffuse_, other->diffuse_);
  swap(specular_, other->specular_);
  swap(direction_, other->direction_);
  swap(attenuation_constant_, other->attenuation_constant_);
  swap(attenuation_linear_, other->attenuation_linear_);
  swap(attenuation_quadratic_, other->attenuation_quadratic_);
  swap(range_, other->range_);
  swap(cast_shadows_, other->cast_shadows_);
  swap(spot_inner_angle_, other->spot_inner_angle_);
  swap(spot_outer_angle_, other->spot_outer_angle_);
  swap(spot_falloff_, other->spot_falloff_);
  swap(id_, other->id_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Light::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gazebo::msgs::Light* Arena::CreateMaybeMessage< ::gazebo::msgs::Light >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::Light >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

GZ_REGISTER_STATIC_MSG("gazebo.msgs.Light", Light)
// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
