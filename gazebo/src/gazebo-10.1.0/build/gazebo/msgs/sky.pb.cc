// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sky.proto

#include "sky.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_color_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Color_color_2eproto;
namespace gazebo {
namespace msgs {
class SkyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Sky> _instance;
} _Sky_default_instance_;
}  // namespace msgs
}  // namespace gazebo
static void InitDefaultsscc_info_Sky_sky_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_Sky_default_instance_;
    new (ptr) ::gazebo::msgs::Sky();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::Sky::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Sky_sky_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Sky_sky_2eproto}, {
      &scc_info_Color_color_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sky_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_sky_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sky_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sky_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Sky, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Sky, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Sky, time_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Sky, sunrise_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Sky, sunset_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Sky, wind_speed_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Sky, wind_direction_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Sky, cloud_ambient_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Sky, humidity_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Sky, mean_cloud_size_),
  1,
  2,
  3,
  4,
  5,
  0,
  6,
  7,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::gazebo::msgs::Sky)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_Sky_default_instance_),
};

const char descriptor_table_protodef_sky_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tsky.proto\022\013gazebo.msgs\032\013color.proto\"\266\001"
  "\n\003Sky\022\014\n\004time\030\001 \001(\001\022\017\n\007sunrise\030\002 \001(\001\022\016\n\006"
  "sunset\030\003 \001(\001\022\022\n\nwind_speed\030\004 \001(\001\022\026\n\016wind"
  "_direction\030\005 \001(\001\022)\n\rcloud_ambient\030\006 \001(\0132"
  "\022.gazebo.msgs.Color\022\020\n\010humidity\030\007 \001(\001\022\027\n"
  "\017mean_cloud_size\030\010 \001(\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sky_2eproto_deps[1] = {
  &::descriptor_table_color_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_sky_2eproto_sccs[1] = {
  &scc_info_Sky_sky_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sky_2eproto_once;
static bool descriptor_table_sky_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sky_2eproto = {
  &descriptor_table_sky_2eproto_initialized, descriptor_table_protodef_sky_2eproto, "sky.proto", 222,
  &descriptor_table_sky_2eproto_once, descriptor_table_sky_2eproto_sccs, descriptor_table_sky_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_sky_2eproto::offsets,
  file_level_metadata_sky_2eproto, 1, file_level_enum_descriptors_sky_2eproto, file_level_service_descriptors_sky_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sky_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_sky_2eproto), true);
namespace gazebo {
namespace msgs {

// ===================================================================

void Sky::InitAsDefaultInstance() {
  ::gazebo::msgs::_Sky_default_instance_._instance.get_mutable()->cloud_ambient_ = const_cast< ::gazebo::msgs::Color*>(
      ::gazebo::msgs::Color::internal_default_instance());
}
class Sky::_Internal {
 public:
  using HasBits = decltype(std::declval<Sky>()._has_bits_);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sunrise(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sunset(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_wind_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_wind_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::gazebo::msgs::Color& cloud_ambient(const Sky* msg);
  static void set_has_cloud_ambient(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_humidity(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_mean_cloud_size(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::gazebo::msgs::Color&
Sky::_Internal::cloud_ambient(const Sky* msg) {
  return *msg->cloud_ambient_;
}
void Sky::clear_cloud_ambient() {
  if (cloud_ambient_ != nullptr) cloud_ambient_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Sky::Sky()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.Sky)
}
Sky::Sky(const Sky& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_cloud_ambient()) {
    cloud_ambient_ = new ::gazebo::msgs::Color(*from.cloud_ambient_);
  } else {
    cloud_ambient_ = nullptr;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&mean_cloud_size_) -
    reinterpret_cast<char*>(&time_)) + sizeof(mean_cloud_size_));
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.Sky)
}

void Sky::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Sky_sky_2eproto.base);
  ::memset(&cloud_ambient_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mean_cloud_size_) -
      reinterpret_cast<char*>(&cloud_ambient_)) + sizeof(mean_cloud_size_));
}

Sky::~Sky() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.Sky)
  SharedDtor();
}

void Sky::SharedDtor() {
  if (this != internal_default_instance()) delete cloud_ambient_;
}

void Sky::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Sky& Sky::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Sky_sky_2eproto.base);
  return *internal_default_instance();
}


void Sky::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.Sky)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(cloud_ambient_ != nullptr);
    cloud_ambient_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mean_cloud_size_) -
        reinterpret_cast<char*>(&time_)) + sizeof(mean_cloud_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Sky::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double sunrise = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_sunrise(&has_bits);
          sunrise_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double sunset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_sunset(&has_bits);
          sunset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double wind_speed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_wind_speed(&has_bits);
          wind_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double wind_direction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_wind_direction(&has_bits);
          wind_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.Color cloud_ambient = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_cloud_ambient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double humidity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_humidity(&has_bits);
          humidity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double mean_cloud_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_mean_cloud_size(&has_bits);
          mean_cloud_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Sky::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.Sky)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double time = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_time(), target);
  }

  // optional double sunrise = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_sunrise(), target);
  }

  // optional double sunset = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_sunset(), target);
  }

  // optional double wind_speed = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_wind_speed(), target);
  }

  // optional double wind_direction = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_wind_direction(), target);
  }

  // optional .gazebo.msgs.Color cloud_ambient = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::cloud_ambient(this), target, stream);
  }

  // optional double humidity = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_humidity(), target);
  }

  // optional double mean_cloud_size = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_mean_cloud_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.Sky)
  return target;
}

size_t Sky::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.Sky)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .gazebo.msgs.Color cloud_ambient = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cloud_ambient_);
    }

    // optional double time = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double sunrise = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double sunset = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double wind_speed = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double wind_direction = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double humidity = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double mean_cloud_size = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sky::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.Sky)
  GOOGLE_DCHECK_NE(&from, this);
  const Sky* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Sky>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.Sky)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.Sky)
    MergeFrom(*source);
  }
}

void Sky::MergeFrom(const Sky& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.Sky)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_cloud_ambient()->::gazebo::msgs::Color::MergeFrom(from._internal_cloud_ambient());
    }
    if (cached_has_bits & 0x00000002u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000004u) {
      sunrise_ = from.sunrise_;
    }
    if (cached_has_bits & 0x00000008u) {
      sunset_ = from.sunset_;
    }
    if (cached_has_bits & 0x00000010u) {
      wind_speed_ = from.wind_speed_;
    }
    if (cached_has_bits & 0x00000020u) {
      wind_direction_ = from.wind_direction_;
    }
    if (cached_has_bits & 0x00000040u) {
      humidity_ = from.humidity_;
    }
    if (cached_has_bits & 0x00000080u) {
      mean_cloud_size_ = from.mean_cloud_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Sky::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.Sky)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sky::CopyFrom(const Sky& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.Sky)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sky::IsInitialized() const {
  if (_internal_has_cloud_ambient()) {
    if (!cloud_ambient_->IsInitialized()) return false;
  }
  return true;
}

void Sky::InternalSwap(Sky* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cloud_ambient_, other->cloud_ambient_);
  swap(time_, other->time_);
  swap(sunrise_, other->sunrise_);
  swap(sunset_, other->sunset_);
  swap(wind_speed_, other->wind_speed_);
  swap(wind_direction_, other->wind_direction_);
  swap(humidity_, other->humidity_);
  swap(mean_cloud_size_, other->mean_cloud_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Sky::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gazebo::msgs::Sky* Arena::CreateMaybeMessage< ::gazebo::msgs::Sky >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::Sky >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

GZ_REGISTER_STATIC_MSG("gazebo.msgs.Sky", Sky)
// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
