// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor.proto

#include "sensor.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_camerasensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CameraSensor_camerasensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_contactsensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContactSensor_contactsensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gps_5fsensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GPSSensor_gps_5fsensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_imu_5fsensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_IMUSensor_imu_5fsensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_logical_5fcamera_5fsensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogicalCameraSensor_logical_5fcamera_5fsensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pose_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Pose_pose_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raysensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RaySensor_raysensor_2eproto;
namespace gazebo {
namespace msgs {
class SensorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Sensor> _instance;
} _Sensor_default_instance_;
}  // namespace msgs
}  // namespace gazebo
static void InitDefaultsscc_info_Sensor_sensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_Sensor_default_instance_;
    new (ptr) ::gazebo::msgs::Sensor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::Sensor::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Sensor_sensor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_Sensor_sensor_2eproto}, {
      &scc_info_Pose_pose_2eproto.base,
      &scc_info_CameraSensor_camerasensor_2eproto.base,
      &scc_info_RaySensor_raysensor_2eproto.base,
      &scc_info_ContactSensor_contactsensor_2eproto.base,
      &scc_info_LogicalCameraSensor_logical_5fcamera_5fsensor_2eproto.base,
      &scc_info_GPSSensor_gps_5fsensor_2eproto.base,
      &scc_info_IMUSensor_imu_5fsensor_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sensor_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_sensor_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sensor_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sensor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Sensor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Sensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Sensor, name_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Sensor, id_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Sensor, parent_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Sensor, parent_id_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Sensor, type_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Sensor, always_on_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Sensor, update_rate_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Sensor, pose_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Sensor, camera_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Sensor, ray_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Sensor, contact_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Sensor, visualize_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Sensor, topic_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Sensor, logical_camera_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Sensor, gps_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Sensor, imu_),
  0,
  11,
  1,
  12,
  2,
  14,
  13,
  4,
  5,
  6,
  7,
  15,
  3,
  8,
  9,
  10,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 21, sizeof(::gazebo::msgs::Sensor)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_Sensor_default_instance_),
};

const char descriptor_table_protodef_sensor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014sensor.proto\022\013gazebo.msgs\032\npose.proto\032"
  "\022camerasensor.proto\032\017raysensor.proto\032\023co"
  "ntactsensor.proto\032\033logical_camera_sensor"
  ".proto\032\020gps_sensor.proto\032\020imu_sensor.pro"
  "to\"\277\003\n\006Sensor\022\014\n\004name\030\001 \002(\t\022\n\n\002id\030\002 \001(\r\022"
  "\016\n\006parent\030\003 \002(\t\022\021\n\tparent_id\030\004 \001(\r\022\014\n\004ty"
  "pe\030\005 \002(\t\022\021\n\talways_on\030\006 \001(\010\022\023\n\013update_ra"
  "te\030\007 \001(\001\022\037\n\004pose\030\010 \001(\0132\021.gazebo.msgs.Pos"
  "e\022)\n\006camera\030\t \001(\0132\031.gazebo.msgs.CameraSe"
  "nsor\022#\n\003ray\030\n \001(\0132\026.gazebo.msgs.RaySenso"
  "r\022+\n\007contact\030\013 \001(\0132\032.gazebo.msgs.Contact"
  "Sensor\022\021\n\tvisualize\030\014 \001(\010\022\r\n\005topic\030\r \001(\t"
  "\0228\n\016logical_camera\030\016 \001(\0132 .gazebo.msgs.L"
  "ogicalCameraSensor\022#\n\003gps\030\017 \001(\0132\026.gazebo"
  ".msgs.GPSSensor\022#\n\003imu\030\020 \001(\0132\026.gazebo.ms"
  "gs.IMUSensor"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sensor_2eproto_deps[7] = {
  &::descriptor_table_camerasensor_2eproto,
  &::descriptor_table_contactsensor_2eproto,
  &::descriptor_table_gps_5fsensor_2eproto,
  &::descriptor_table_imu_5fsensor_2eproto,
  &::descriptor_table_logical_5fcamera_5fsensor_2eproto,
  &::descriptor_table_pose_2eproto,
  &::descriptor_table_raysensor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_sensor_2eproto_sccs[1] = {
  &scc_info_Sensor_sensor_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sensor_2eproto_once;
static bool descriptor_table_sensor_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sensor_2eproto = {
  &descriptor_table_sensor_2eproto_initialized, descriptor_table_protodef_sensor_2eproto, "sensor.proto", 612,
  &descriptor_table_sensor_2eproto_once, descriptor_table_sensor_2eproto_sccs, descriptor_table_sensor_2eproto_deps, 1, 7,
  schemas, file_default_instances, TableStruct_sensor_2eproto::offsets,
  file_level_metadata_sensor_2eproto, 1, file_level_enum_descriptors_sensor_2eproto, file_level_service_descriptors_sensor_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sensor_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_sensor_2eproto), true);
namespace gazebo {
namespace msgs {

// ===================================================================

void Sensor::InitAsDefaultInstance() {
  ::gazebo::msgs::_Sensor_default_instance_._instance.get_mutable()->pose_ = const_cast< ::gazebo::msgs::Pose*>(
      ::gazebo::msgs::Pose::internal_default_instance());
  ::gazebo::msgs::_Sensor_default_instance_._instance.get_mutable()->camera_ = const_cast< ::gazebo::msgs::CameraSensor*>(
      ::gazebo::msgs::CameraSensor::internal_default_instance());
  ::gazebo::msgs::_Sensor_default_instance_._instance.get_mutable()->ray_ = const_cast< ::gazebo::msgs::RaySensor*>(
      ::gazebo::msgs::RaySensor::internal_default_instance());
  ::gazebo::msgs::_Sensor_default_instance_._instance.get_mutable()->contact_ = const_cast< ::gazebo::msgs::ContactSensor*>(
      ::gazebo::msgs::ContactSensor::internal_default_instance());
  ::gazebo::msgs::_Sensor_default_instance_._instance.get_mutable()->logical_camera_ = const_cast< ::gazebo::msgs::LogicalCameraSensor*>(
      ::gazebo::msgs::LogicalCameraSensor::internal_default_instance());
  ::gazebo::msgs::_Sensor_default_instance_._instance.get_mutable()->gps_ = const_cast< ::gazebo::msgs::GPSSensor*>(
      ::gazebo::msgs::GPSSensor::internal_default_instance());
  ::gazebo::msgs::_Sensor_default_instance_._instance.get_mutable()->imu_ = const_cast< ::gazebo::msgs::IMUSensor*>(
      ::gazebo::msgs::IMUSensor::internal_default_instance());
}
class Sensor::_Internal {
 public:
  using HasBits = decltype(std::declval<Sensor>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_parent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_always_on(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_update_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::gazebo::msgs::Pose& pose(const Sensor* msg);
  static void set_has_pose(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::gazebo::msgs::CameraSensor& camera(const Sensor* msg);
  static void set_has_camera(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::gazebo::msgs::RaySensor& ray(const Sensor* msg);
  static void set_has_ray(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::gazebo::msgs::ContactSensor& contact(const Sensor* msg);
  static void set_has_contact(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_visualize(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::gazebo::msgs::LogicalCameraSensor& logical_camera(const Sensor* msg);
  static void set_has_logical_camera(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::gazebo::msgs::GPSSensor& gps(const Sensor* msg);
  static void set_has_gps(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::gazebo::msgs::IMUSensor& imu(const Sensor* msg);
  static void set_has_imu(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::gazebo::msgs::Pose&
Sensor::_Internal::pose(const Sensor* msg) {
  return *msg->pose_;
}
const ::gazebo::msgs::CameraSensor&
Sensor::_Internal::camera(const Sensor* msg) {
  return *msg->camera_;
}
const ::gazebo::msgs::RaySensor&
Sensor::_Internal::ray(const Sensor* msg) {
  return *msg->ray_;
}
const ::gazebo::msgs::ContactSensor&
Sensor::_Internal::contact(const Sensor* msg) {
  return *msg->contact_;
}
const ::gazebo::msgs::LogicalCameraSensor&
Sensor::_Internal::logical_camera(const Sensor* msg) {
  return *msg->logical_camera_;
}
const ::gazebo::msgs::GPSSensor&
Sensor::_Internal::gps(const Sensor* msg) {
  return *msg->gps_;
}
const ::gazebo::msgs::IMUSensor&
Sensor::_Internal::imu(const Sensor* msg) {
  return *msg->imu_;
}
void Sensor::clear_pose() {
  if (pose_ != nullptr) pose_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void Sensor::clear_camera() {
  if (camera_ != nullptr) camera_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void Sensor::clear_ray() {
  if (ray_ != nullptr) ray_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void Sensor::clear_contact() {
  if (contact_ != nullptr) contact_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void Sensor::clear_logical_camera() {
  if (logical_camera_ != nullptr) logical_camera_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void Sensor::clear_gps() {
  if (gps_ != nullptr) gps_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void Sensor::clear_imu() {
  if (imu_ != nullptr) imu_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
Sensor::Sensor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.Sensor)
}
Sensor::Sensor(const Sensor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_parent()) {
    parent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_topic()) {
    topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  if (from._internal_has_pose()) {
    pose_ = new ::gazebo::msgs::Pose(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  if (from._internal_has_camera()) {
    camera_ = new ::gazebo::msgs::CameraSensor(*from.camera_);
  } else {
    camera_ = nullptr;
  }
  if (from._internal_has_ray()) {
    ray_ = new ::gazebo::msgs::RaySensor(*from.ray_);
  } else {
    ray_ = nullptr;
  }
  if (from._internal_has_contact()) {
    contact_ = new ::gazebo::msgs::ContactSensor(*from.contact_);
  } else {
    contact_ = nullptr;
  }
  if (from._internal_has_logical_camera()) {
    logical_camera_ = new ::gazebo::msgs::LogicalCameraSensor(*from.logical_camera_);
  } else {
    logical_camera_ = nullptr;
  }
  if (from._internal_has_gps()) {
    gps_ = new ::gazebo::msgs::GPSSensor(*from.gps_);
  } else {
    gps_ = nullptr;
  }
  if (from._internal_has_imu()) {
    imu_ = new ::gazebo::msgs::IMUSensor(*from.imu_);
  } else {
    imu_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&visualize_) -
    reinterpret_cast<char*>(&id_)) + sizeof(visualize_));
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.Sensor)
}

void Sensor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Sensor_sensor_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&visualize_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(visualize_));
}

Sensor::~Sensor() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.Sensor)
  SharedDtor();
}

void Sensor::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete camera_;
  if (this != internal_default_instance()) delete ray_;
  if (this != internal_default_instance()) delete contact_;
  if (this != internal_default_instance()) delete logical_camera_;
  if (this != internal_default_instance()) delete gps_;
  if (this != internal_default_instance()) delete imu_;
}

void Sensor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Sensor& Sensor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Sensor_sensor_2eproto.base);
  return *internal_default_instance();
}


void Sensor::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.Sensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      parent_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      topic_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(pose_ != nullptr);
      pose_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(camera_ != nullptr);
      camera_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(ray_ != nullptr);
      ray_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(contact_ != nullptr);
      contact_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(logical_camera_ != nullptr);
      logical_camera_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(gps_ != nullptr);
      gps_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(imu_ != nullptr);
      imu_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f800u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&visualize_) -
        reinterpret_cast<char*>(&id_)) + sizeof(visualize_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Sensor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gazebo.msgs.Sensor.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string parent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_parent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gazebo.msgs.Sensor.parent");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 parent_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_parent_id(&has_bits);
          parent_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gazebo.msgs.Sensor.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool always_on = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_always_on(&has_bits);
          always_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double update_rate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_update_rate(&has_bits);
          update_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.Pose pose = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.CameraSensor camera = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.RaySensor ray = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_ray(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.ContactSensor contact = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_contact(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool visualize = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_visualize(&has_bits);
          visualize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string topic = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_topic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gazebo.msgs.Sensor.topic");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.LogicalCameraSensor logical_camera = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_logical_camera(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.GPSSensor gps = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_gps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.IMUSensor imu = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_imu(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Sensor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.Sensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.Sensor.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 id = 2;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  // required string parent = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_parent().data(), static_cast<int>(this->_internal_parent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.Sensor.parent");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_parent(), target);
  }

  // optional uint32 parent_id = 4;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_parent_id(), target);
  }

  // required string type = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.Sensor.type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_type(), target);
  }

  // optional bool always_on = 6;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_always_on(), target);
  }

  // optional double update_rate = 7;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_update_rate(), target);
  }

  // optional .gazebo.msgs.Pose pose = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::pose(this), target, stream);
  }

  // optional .gazebo.msgs.CameraSensor camera = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::camera(this), target, stream);
  }

  // optional .gazebo.msgs.RaySensor ray = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::ray(this), target, stream);
  }

  // optional .gazebo.msgs.ContactSensor contact = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::contact(this), target, stream);
  }

  // optional bool visualize = 12;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_visualize(), target);
  }

  // optional string topic = 13;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.Sensor.topic");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_topic(), target);
  }

  // optional .gazebo.msgs.LogicalCameraSensor logical_camera = 14;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::logical_camera(this), target, stream);
  }

  // optional .gazebo.msgs.GPSSensor gps = 15;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::gps(this), target, stream);
  }

  // optional .gazebo.msgs.IMUSensor imu = 16;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::imu(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.Sensor)
  return target;
}

size_t Sensor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gazebo.msgs.Sensor)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_parent()) {
    // required string parent = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent());
  }

  if (_internal_has_type()) {
    // required string type = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  return total_size;
}
size_t Sensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.Sensor)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required string parent = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent());

    // required string type = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000f8u) {
    // optional string topic = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_topic());
    }

    // optional .gazebo.msgs.Pose pose = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pose_);
    }

    // optional .gazebo.msgs.CameraSensor camera = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *camera_);
    }

    // optional .gazebo.msgs.RaySensor ray = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ray_);
    }

    // optional .gazebo.msgs.ContactSensor contact = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contact_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .gazebo.msgs.LogicalCameraSensor logical_camera = 14;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *logical_camera_);
    }

    // optional .gazebo.msgs.GPSSensor gps = 15;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gps_);
    }

    // optional .gazebo.msgs.IMUSensor imu = 16;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *imu_);
    }

    // optional uint32 id = 2;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional uint32 parent_id = 4;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_parent_id());
    }

    // optional double update_rate = 7;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional bool always_on = 6;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool visualize = 12;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sensor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.Sensor)
  GOOGLE_DCHECK_NE(&from, this);
  const Sensor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Sensor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.Sensor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.Sensor)
    MergeFrom(*source);
  }
}

void Sensor::MergeFrom(const Sensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.Sensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      parent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.parent_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topic_);
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_pose()->::gazebo::msgs::Pose::MergeFrom(from._internal_pose());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_camera()->::gazebo::msgs::CameraSensor::MergeFrom(from._internal_camera());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_ray()->::gazebo::msgs::RaySensor::MergeFrom(from._internal_ray());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_contact()->::gazebo::msgs::ContactSensor::MergeFrom(from._internal_contact());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_logical_camera()->::gazebo::msgs::LogicalCameraSensor::MergeFrom(from._internal_logical_camera());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_gps()->::gazebo::msgs::GPSSensor::MergeFrom(from._internal_gps());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_imu()->::gazebo::msgs::IMUSensor::MergeFrom(from._internal_imu());
    }
    if (cached_has_bits & 0x00000800u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00001000u) {
      parent_id_ = from.parent_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      update_rate_ = from.update_rate_;
    }
    if (cached_has_bits & 0x00004000u) {
      always_on_ = from.always_on_;
    }
    if (cached_has_bits & 0x00008000u) {
      visualize_ = from.visualize_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Sensor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.Sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sensor::CopyFrom(const Sensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.Sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sensor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (_internal_has_pose()) {
    if (!pose_->IsInitialized()) return false;
  }
  if (_internal_has_camera()) {
    if (!camera_->IsInitialized()) return false;
  }
  if (_internal_has_logical_camera()) {
    if (!logical_camera_->IsInitialized()) return false;
  }
  if (_internal_has_gps()) {
    if (!gps_->IsInitialized()) return false;
  }
  if (_internal_has_imu()) {
    if (!imu_->IsInitialized()) return false;
  }
  return true;
}

void Sensor::InternalSwap(Sensor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  parent_.Swap(&other->parent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  topic_.Swap(&other->topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pose_, other->pose_);
  swap(camera_, other->camera_);
  swap(ray_, other->ray_);
  swap(contact_, other->contact_);
  swap(logical_camera_, other->logical_camera_);
  swap(gps_, other->gps_);
  swap(imu_, other->imu_);
  swap(id_, other->id_);
  swap(parent_id_, other->parent_id_);
  swap(update_rate_, other->update_rate_);
  swap(always_on_, other->always_on_);
  swap(visualize_, other->visualize_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Sensor::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gazebo::msgs::Sensor* Arena::CreateMaybeMessage< ::gazebo::msgs::Sensor >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::Sensor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

GZ_REGISTER_STATIC_MSG("gazebo.msgs.Sensor", Sensor)
// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
