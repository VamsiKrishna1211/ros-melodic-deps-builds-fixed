// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logical_camera_sensor.proto

#include "logical_camera_sensor.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace gazebo {
namespace msgs {
class LogicalCameraSensorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogicalCameraSensor> _instance;
} _LogicalCameraSensor_default_instance_;
}  // namespace msgs
}  // namespace gazebo
static void InitDefaultsscc_info_LogicalCameraSensor_logical_5fcamera_5fsensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_LogicalCameraSensor_default_instance_;
    new (ptr) ::gazebo::msgs::LogicalCameraSensor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::LogicalCameraSensor::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogicalCameraSensor_logical_5fcamera_5fsensor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogicalCameraSensor_logical_5fcamera_5fsensor_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_logical_5fcamera_5fsensor_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_logical_5fcamera_5fsensor_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_logical_5fcamera_5fsensor_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_logical_5fcamera_5fsensor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::LogicalCameraSensor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::LogicalCameraSensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::LogicalCameraSensor, near_clip_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::LogicalCameraSensor, far_clip_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::LogicalCameraSensor, horizontal_fov_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::LogicalCameraSensor, aspect_ratio_),
  0,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::gazebo::msgs::LogicalCameraSensor)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_LogicalCameraSensor_default_instance_),
};

const char descriptor_table_protodef_logical_5fcamera_5fsensor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033logical_camera_sensor.proto\022\013gazebo.ms"
  "gs\"h\n\023LogicalCameraSensor\022\021\n\tnear_clip\030\001"
  " \002(\001\022\020\n\010far_clip\030\002 \002(\001\022\026\n\016horizontal_fov"
  "\030\003 \002(\001\022\024\n\014aspect_ratio\030\004 \002(\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_logical_5fcamera_5fsensor_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_logical_5fcamera_5fsensor_2eproto_sccs[1] = {
  &scc_info_LogicalCameraSensor_logical_5fcamera_5fsensor_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_logical_5fcamera_5fsensor_2eproto_once;
static bool descriptor_table_logical_5fcamera_5fsensor_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_logical_5fcamera_5fsensor_2eproto = {
  &descriptor_table_logical_5fcamera_5fsensor_2eproto_initialized, descriptor_table_protodef_logical_5fcamera_5fsensor_2eproto, "logical_camera_sensor.proto", 148,
  &descriptor_table_logical_5fcamera_5fsensor_2eproto_once, descriptor_table_logical_5fcamera_5fsensor_2eproto_sccs, descriptor_table_logical_5fcamera_5fsensor_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_logical_5fcamera_5fsensor_2eproto::offsets,
  file_level_metadata_logical_5fcamera_5fsensor_2eproto, 1, file_level_enum_descriptors_logical_5fcamera_5fsensor_2eproto, file_level_service_descriptors_logical_5fcamera_5fsensor_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_logical_5fcamera_5fsensor_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_logical_5fcamera_5fsensor_2eproto), true);
namespace gazebo {
namespace msgs {

// ===================================================================

void LogicalCameraSensor::InitAsDefaultInstance() {
}
class LogicalCameraSensor::_Internal {
 public:
  using HasBits = decltype(std::declval<LogicalCameraSensor>()._has_bits_);
  static void set_has_near_clip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_far_clip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_horizontal_fov(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_aspect_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

LogicalCameraSensor::LogicalCameraSensor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.LogicalCameraSensor)
}
LogicalCameraSensor::LogicalCameraSensor(const LogicalCameraSensor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&near_clip_, &from.near_clip_,
    static_cast<size_t>(reinterpret_cast<char*>(&aspect_ratio_) -
    reinterpret_cast<char*>(&near_clip_)) + sizeof(aspect_ratio_));
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.LogicalCameraSensor)
}

void LogicalCameraSensor::SharedCtor() {
  ::memset(&near_clip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aspect_ratio_) -
      reinterpret_cast<char*>(&near_clip_)) + sizeof(aspect_ratio_));
}

LogicalCameraSensor::~LogicalCameraSensor() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.LogicalCameraSensor)
  SharedDtor();
}

void LogicalCameraSensor::SharedDtor() {
}

void LogicalCameraSensor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogicalCameraSensor& LogicalCameraSensor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogicalCameraSensor_logical_5fcamera_5fsensor_2eproto.base);
  return *internal_default_instance();
}


void LogicalCameraSensor::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.LogicalCameraSensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&near_clip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&aspect_ratio_) -
        reinterpret_cast<char*>(&near_clip_)) + sizeof(aspect_ratio_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LogicalCameraSensor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double near_clip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_near_clip(&has_bits);
          near_clip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double far_clip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_far_clip(&has_bits);
          far_clip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double horizontal_fov = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_horizontal_fov(&has_bits);
          horizontal_fov_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double aspect_ratio = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_aspect_ratio(&has_bits);
          aspect_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogicalCameraSensor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.LogicalCameraSensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double near_clip = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_near_clip(), target);
  }

  // required double far_clip = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_far_clip(), target);
  }

  // required double horizontal_fov = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_horizontal_fov(), target);
  }

  // required double aspect_ratio = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_aspect_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.LogicalCameraSensor)
  return target;
}

size_t LogicalCameraSensor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gazebo.msgs.LogicalCameraSensor)
  size_t total_size = 0;

  if (_internal_has_near_clip()) {
    // required double near_clip = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_far_clip()) {
    // required double far_clip = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_horizontal_fov()) {
    // required double horizontal_fov = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_aspect_ratio()) {
    // required double aspect_ratio = 4;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t LogicalCameraSensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.LogicalCameraSensor)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required double near_clip = 1;
    total_size += 1 + 8;

    // required double far_clip = 2;
    total_size += 1 + 8;

    // required double horizontal_fov = 3;
    total_size += 1 + 8;

    // required double aspect_ratio = 4;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogicalCameraSensor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.LogicalCameraSensor)
  GOOGLE_DCHECK_NE(&from, this);
  const LogicalCameraSensor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogicalCameraSensor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.LogicalCameraSensor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.LogicalCameraSensor)
    MergeFrom(*source);
  }
}

void LogicalCameraSensor::MergeFrom(const LogicalCameraSensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.LogicalCameraSensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      near_clip_ = from.near_clip_;
    }
    if (cached_has_bits & 0x00000002u) {
      far_clip_ = from.far_clip_;
    }
    if (cached_has_bits & 0x00000004u) {
      horizontal_fov_ = from.horizontal_fov_;
    }
    if (cached_has_bits & 0x00000008u) {
      aspect_ratio_ = from.aspect_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LogicalCameraSensor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.LogicalCameraSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicalCameraSensor::CopyFrom(const LogicalCameraSensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.LogicalCameraSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalCameraSensor::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void LogicalCameraSensor::InternalSwap(LogicalCameraSensor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(near_clip_, other->near_clip_);
  swap(far_clip_, other->far_clip_);
  swap(horizontal_fov_, other->horizontal_fov_);
  swap(aspect_ratio_, other->aspect_ratio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicalCameraSensor::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gazebo::msgs::LogicalCameraSensor* Arena::CreateMaybeMessage< ::gazebo::msgs::LogicalCameraSensor >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::LogicalCameraSensor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

GZ_REGISTER_STATIC_MSG("gazebo.msgs.LogicalCameraSensor", LogicalCameraSensor)
// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
