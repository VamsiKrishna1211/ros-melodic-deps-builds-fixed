// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: laserscan.proto

#include "laserscan.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pose_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Pose_pose_2eproto;
namespace gazebo {
namespace msgs {
class LaserScanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaserScan> _instance;
} _LaserScan_default_instance_;
}  // namespace msgs
}  // namespace gazebo
static void InitDefaultsscc_info_LaserScan_laserscan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_LaserScan_default_instance_;
    new (ptr) ::gazebo::msgs::LaserScan();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::LaserScan::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LaserScan_laserscan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LaserScan_laserscan_2eproto}, {
      &scc_info_Pose_pose_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_laserscan_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_laserscan_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_laserscan_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_laserscan_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::LaserScan, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::LaserScan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::LaserScan, frame_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::LaserScan, world_pose_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::LaserScan, angle_min_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::LaserScan, angle_max_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::LaserScan, angle_step_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::LaserScan, range_min_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::LaserScan, range_max_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::LaserScan, count_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::LaserScan, vertical_angle_min_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::LaserScan, vertical_angle_max_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::LaserScan, vertical_angle_step_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::LaserScan, vertical_count_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::LaserScan, ranges_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::LaserScan, intensities_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  9,
  7,
  8,
  11,
  10,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 19, sizeof(::gazebo::msgs::LaserScan)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_LaserScan_default_instance_),
};

const char descriptor_table_protodef_laserscan_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017laserscan.proto\022\013gazebo.msgs\032\npose.pro"
  "to\"\302\002\n\tLaserScan\022\r\n\005frame\030\001 \002(\t\022%\n\nworld"
  "_pose\030\002 \002(\0132\021.gazebo.msgs.Pose\022\021\n\tangle_"
  "min\030\003 \002(\001\022\021\n\tangle_max\030\004 \002(\001\022\022\n\nangle_st"
  "ep\030\005 \002(\001\022\021\n\trange_min\030\006 \002(\001\022\021\n\trange_max"
  "\030\007 \002(\001\022\r\n\005count\030\010 \002(\r\022\032\n\022vertical_angle_"
  "min\030\t \001(\001\022\032\n\022vertical_angle_max\030\n \001(\001\022\033\n"
  "\023vertical_angle_step\030\013 \001(\001\022\026\n\016vertical_c"
  "ount\030\014 \001(\r\022\016\n\006ranges\030\r \003(\001\022\023\n\013intensitie"
  "s\030\016 \003(\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_laserscan_2eproto_deps[1] = {
  &::descriptor_table_pose_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_laserscan_2eproto_sccs[1] = {
  &scc_info_LaserScan_laserscan_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_laserscan_2eproto_once;
static bool descriptor_table_laserscan_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_laserscan_2eproto = {
  &descriptor_table_laserscan_2eproto_initialized, descriptor_table_protodef_laserscan_2eproto, "laserscan.proto", 367,
  &descriptor_table_laserscan_2eproto_once, descriptor_table_laserscan_2eproto_sccs, descriptor_table_laserscan_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_laserscan_2eproto::offsets,
  file_level_metadata_laserscan_2eproto, 1, file_level_enum_descriptors_laserscan_2eproto, file_level_service_descriptors_laserscan_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_laserscan_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_laserscan_2eproto), true);
namespace gazebo {
namespace msgs {

// ===================================================================

void LaserScan::InitAsDefaultInstance() {
  ::gazebo::msgs::_LaserScan_default_instance_._instance.get_mutable()->world_pose_ = const_cast< ::gazebo::msgs::Pose*>(
      ::gazebo::msgs::Pose::internal_default_instance());
}
class LaserScan::_Internal {
 public:
  using HasBits = decltype(std::declval<LaserScan>()._has_bits_);
  static void set_has_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::gazebo::msgs::Pose& world_pose(const LaserScan* msg);
  static void set_has_world_pose(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_angle_min(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_angle_max(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_angle_step(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_range_min(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_range_max(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_vertical_angle_min(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_vertical_angle_max(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_vertical_angle_step(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_vertical_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::gazebo::msgs::Pose&
LaserScan::_Internal::world_pose(const LaserScan* msg) {
  return *msg->world_pose_;
}
void LaserScan::clear_world_pose() {
  if (world_pose_ != nullptr) world_pose_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
LaserScan::LaserScan()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.LaserScan)
}
LaserScan::LaserScan(const LaserScan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      ranges_(from.ranges_),
      intensities_(from.intensities_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_frame()) {
    frame_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.frame_);
  }
  if (from._internal_has_world_pose()) {
    world_pose_ = new ::gazebo::msgs::Pose(*from.world_pose_);
  } else {
    world_pose_ = nullptr;
  }
  ::memcpy(&angle_min_, &from.angle_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&vertical_angle_step_) -
    reinterpret_cast<char*>(&angle_min_)) + sizeof(vertical_angle_step_));
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.LaserScan)
}

void LaserScan::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LaserScan_laserscan_2eproto.base);
  frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&world_pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vertical_angle_step_) -
      reinterpret_cast<char*>(&world_pose_)) + sizeof(vertical_angle_step_));
}

LaserScan::~LaserScan() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.LaserScan)
  SharedDtor();
}

void LaserScan::SharedDtor() {
  frame_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete world_pose_;
}

void LaserScan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaserScan& LaserScan::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaserScan_laserscan_2eproto.base);
  return *internal_default_instance();
}


void LaserScan::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.LaserScan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ranges_.Clear();
  intensities_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      frame_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(world_pose_ != nullptr);
      world_pose_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&angle_min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vertical_angle_min_) -
        reinterpret_cast<char*>(&angle_min_)) + sizeof(vertical_angle_min_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&vertical_angle_max_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vertical_angle_step_) -
        reinterpret_cast<char*>(&vertical_angle_max_)) + sizeof(vertical_angle_step_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LaserScan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_frame();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gazebo.msgs.LaserScan.frame");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .gazebo.msgs.Pose world_pose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_world_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double angle_min = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_angle_min(&has_bits);
          angle_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double angle_max = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_angle_max(&has_bits);
          angle_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double angle_step = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_angle_step(&has_bits);
          angle_step_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double range_min = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_range_min(&has_bits);
          range_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double range_max = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_range_max(&has_bits);
          range_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required uint32 count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double vertical_angle_min = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_vertical_angle_min(&has_bits);
          vertical_angle_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double vertical_angle_max = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_vertical_angle_max(&has_bits);
          vertical_angle_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double vertical_angle_step = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_vertical_angle_step(&has_bits);
          vertical_angle_step_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 vertical_count = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_vertical_count(&has_bits);
          vertical_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double ranges = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ranges(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<105>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_ranges(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double intensities = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_intensities(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<113>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_intensities(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaserScan::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.LaserScan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string frame = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_frame().data(), static_cast<int>(this->_internal_frame().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.LaserScan.frame");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_frame(), target);
  }

  // required .gazebo.msgs.Pose world_pose = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::world_pose(this), target, stream);
  }

  // required double angle_min = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_angle_min(), target);
  }

  // required double angle_max = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_angle_max(), target);
  }

  // required double angle_step = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_angle_step(), target);
  }

  // required double range_min = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_range_min(), target);
  }

  // required double range_max = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_range_max(), target);
  }

  // required uint32 count = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_count(), target);
  }

  // optional double vertical_angle_min = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_vertical_angle_min(), target);
  }

  // optional double vertical_angle_max = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_vertical_angle_max(), target);
  }

  // optional double vertical_angle_step = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_vertical_angle_step(), target);
  }

  // optional uint32 vertical_count = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_vertical_count(), target);
  }

  // repeated double ranges = 13;
  for (int i = 0, n = this->_internal_ranges_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_ranges(i), target);
  }

  // repeated double intensities = 14;
  for (int i = 0, n = this->_internal_intensities_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_intensities(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.LaserScan)
  return target;
}

size_t LaserScan::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gazebo.msgs.LaserScan)
  size_t total_size = 0;

  if (_internal_has_frame()) {
    // required string frame = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame());
  }

  if (_internal_has_world_pose()) {
    // required .gazebo.msgs.Pose world_pose = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *world_pose_);
  }

  if (_internal_has_angle_min()) {
    // required double angle_min = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_angle_max()) {
    // required double angle_max = 4;
    total_size += 1 + 8;
  }

  if (_internal_has_angle_step()) {
    // required double angle_step = 5;
    total_size += 1 + 8;
  }

  if (_internal_has_range_min()) {
    // required double range_min = 6;
    total_size += 1 + 8;
  }

  if (_internal_has_range_max()) {
    // required double range_max = 7;
    total_size += 1 + 8;
  }

  if (_internal_has_count()) {
    // required uint32 count = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  return total_size;
}
size_t LaserScan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.LaserScan)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000027f) ^ 0x0000027f) == 0) {  // All required fields are present.
    // required string frame = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame());

    // required .gazebo.msgs.Pose world_pose = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *world_pose_);

    // required double angle_min = 3;
    total_size += 1 + 8;

    // required double angle_max = 4;
    total_size += 1 + 8;

    // required double angle_step = 5;
    total_size += 1 + 8;

    // required double range_min = 6;
    total_size += 1 + 8;

    // required double range_max = 7;
    total_size += 1 + 8;

    // required uint32 count = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double ranges = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ranges_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ranges_size());
    total_size += data_size;
  }

  // repeated double intensities = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_intensities_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_intensities_size());
    total_size += data_size;
  }

  // optional double vertical_angle_min = 9;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000080u) {
    total_size += 1 + 8;
  }

  // optional double vertical_angle_max = 10;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 8;
  }

  if (cached_has_bits & 0x00000c00u) {
    // optional uint32 vertical_count = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_vertical_count());
    }

    // optional double vertical_angle_step = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaserScan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.LaserScan)
  GOOGLE_DCHECK_NE(&from, this);
  const LaserScan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaserScan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.LaserScan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.LaserScan)
    MergeFrom(*source);
  }
}

void LaserScan::MergeFrom(const LaserScan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.LaserScan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ranges_.MergeFrom(from.ranges_);
  intensities_.MergeFrom(from.intensities_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      frame_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.frame_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_world_pose()->::gazebo::msgs::Pose::MergeFrom(from._internal_world_pose());
    }
    if (cached_has_bits & 0x00000004u) {
      angle_min_ = from.angle_min_;
    }
    if (cached_has_bits & 0x00000008u) {
      angle_max_ = from.angle_max_;
    }
    if (cached_has_bits & 0x00000010u) {
      angle_step_ = from.angle_step_;
    }
    if (cached_has_bits & 0x00000020u) {
      range_min_ = from.range_min_;
    }
    if (cached_has_bits & 0x00000040u) {
      range_max_ = from.range_max_;
    }
    if (cached_has_bits & 0x00000080u) {
      vertical_angle_min_ = from.vertical_angle_min_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      vertical_angle_max_ = from.vertical_angle_max_;
    }
    if (cached_has_bits & 0x00000200u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000400u) {
      vertical_count_ = from.vertical_count_;
    }
    if (cached_has_bits & 0x00000800u) {
      vertical_angle_step_ = from.vertical_angle_step_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaserScan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.LaserScan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaserScan::CopyFrom(const LaserScan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.LaserScan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaserScan::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000027f) != 0x0000027f) return false;
  if (_internal_has_world_pose()) {
    if (!world_pose_->IsInitialized()) return false;
  }
  return true;
}

void LaserScan::InternalSwap(LaserScan* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ranges_.InternalSwap(&other->ranges_);
  intensities_.InternalSwap(&other->intensities_);
  frame_.Swap(&other->frame_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(world_pose_, other->world_pose_);
  swap(angle_min_, other->angle_min_);
  swap(angle_max_, other->angle_max_);
  swap(angle_step_, other->angle_step_);
  swap(range_min_, other->range_min_);
  swap(range_max_, other->range_max_);
  swap(vertical_angle_min_, other->vertical_angle_min_);
  swap(vertical_angle_max_, other->vertical_angle_max_);
  swap(count_, other->count_);
  swap(vertical_count_, other->vertical_count_);
  swap(vertical_angle_step_, other->vertical_angle_step_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaserScan::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gazebo::msgs::LaserScan* Arena::CreateMaybeMessage< ::gazebo::msgs::LaserScan >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::LaserScan >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

GZ_REGISTER_STATIC_MSG("gazebo.msgs.LaserScan", LaserScan)
// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
