// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gps_sensor.proto

#include "gps_sensor.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_gps_5fsensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GPSSensor_Sensing_gps_5fsensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sensor_5fnoise_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorNoise_sensor_5fnoise_2eproto;
namespace gazebo {
namespace msgs {
class GPSSensor_SensingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GPSSensor_Sensing> _instance;
} _GPSSensor_Sensing_default_instance_;
class GPSSensorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GPSSensor> _instance;
} _GPSSensor_default_instance_;
}  // namespace msgs
}  // namespace gazebo
static void InitDefaultsscc_info_GPSSensor_gps_5fsensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_GPSSensor_default_instance_;
    new (ptr) ::gazebo::msgs::GPSSensor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::GPSSensor::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GPSSensor_gps_5fsensor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GPSSensor_gps_5fsensor_2eproto}, {
      &scc_info_GPSSensor_Sensing_gps_5fsensor_2eproto.base,}};

static void InitDefaultsscc_info_GPSSensor_Sensing_gps_5fsensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_GPSSensor_Sensing_default_instance_;
    new (ptr) ::gazebo::msgs::GPSSensor_Sensing();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::GPSSensor_Sensing::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GPSSensor_Sensing_gps_5fsensor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GPSSensor_Sensing_gps_5fsensor_2eproto}, {
      &scc_info_SensorNoise_sensor_5fnoise_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gps_5fsensor_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_gps_5fsensor_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gps_5fsensor_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_gps_5fsensor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::GPSSensor_Sensing, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::GPSSensor_Sensing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::GPSSensor_Sensing, horizontal_noise_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::GPSSensor_Sensing, vertical_noise_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::GPSSensor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::GPSSensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::GPSSensor, position_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::GPSSensor, velocity_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::gazebo::msgs::GPSSensor_Sensing)},
  { 9, 16, sizeof(::gazebo::msgs::GPSSensor)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_GPSSensor_Sensing_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_GPSSensor_default_instance_),
};

const char descriptor_table_protodef_gps_5fsensor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020gps_sensor.proto\022\013gazebo.msgs\032\022sensor_"
  "noise.proto\"\340\001\n\tGPSSensor\0220\n\010position\030\001 "
  "\001(\0132\036.gazebo.msgs.GPSSensor.Sensing\0220\n\010v"
  "elocity\030\002 \001(\0132\036.gazebo.msgs.GPSSensor.Se"
  "nsing\032o\n\007Sensing\0222\n\020horizontal_noise\030\001 \001"
  "(\0132\030.gazebo.msgs.SensorNoise\0220\n\016vertical"
  "_noise\030\002 \001(\0132\030.gazebo.msgs.SensorNoise"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gps_5fsensor_2eproto_deps[1] = {
  &::descriptor_table_sensor_5fnoise_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_gps_5fsensor_2eproto_sccs[2] = {
  &scc_info_GPSSensor_gps_5fsensor_2eproto.base,
  &scc_info_GPSSensor_Sensing_gps_5fsensor_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gps_5fsensor_2eproto_once;
static bool descriptor_table_gps_5fsensor_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gps_5fsensor_2eproto = {
  &descriptor_table_gps_5fsensor_2eproto_initialized, descriptor_table_protodef_gps_5fsensor_2eproto, "gps_sensor.proto", 278,
  &descriptor_table_gps_5fsensor_2eproto_once, descriptor_table_gps_5fsensor_2eproto_sccs, descriptor_table_gps_5fsensor_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_gps_5fsensor_2eproto::offsets,
  file_level_metadata_gps_5fsensor_2eproto, 2, file_level_enum_descriptors_gps_5fsensor_2eproto, file_level_service_descriptors_gps_5fsensor_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_gps_5fsensor_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_gps_5fsensor_2eproto), true);
namespace gazebo {
namespace msgs {

// ===================================================================

void GPSSensor_Sensing::InitAsDefaultInstance() {
  ::gazebo::msgs::_GPSSensor_Sensing_default_instance_._instance.get_mutable()->horizontal_noise_ = const_cast< ::gazebo::msgs::SensorNoise*>(
      ::gazebo::msgs::SensorNoise::internal_default_instance());
  ::gazebo::msgs::_GPSSensor_Sensing_default_instance_._instance.get_mutable()->vertical_noise_ = const_cast< ::gazebo::msgs::SensorNoise*>(
      ::gazebo::msgs::SensorNoise::internal_default_instance());
}
class GPSSensor_Sensing::_Internal {
 public:
  using HasBits = decltype(std::declval<GPSSensor_Sensing>()._has_bits_);
  static const ::gazebo::msgs::SensorNoise& horizontal_noise(const GPSSensor_Sensing* msg);
  static void set_has_horizontal_noise(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::gazebo::msgs::SensorNoise& vertical_noise(const GPSSensor_Sensing* msg);
  static void set_has_vertical_noise(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::gazebo::msgs::SensorNoise&
GPSSensor_Sensing::_Internal::horizontal_noise(const GPSSensor_Sensing* msg) {
  return *msg->horizontal_noise_;
}
const ::gazebo::msgs::SensorNoise&
GPSSensor_Sensing::_Internal::vertical_noise(const GPSSensor_Sensing* msg) {
  return *msg->vertical_noise_;
}
void GPSSensor_Sensing::clear_horizontal_noise() {
  if (horizontal_noise_ != nullptr) horizontal_noise_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GPSSensor_Sensing::clear_vertical_noise() {
  if (vertical_noise_ != nullptr) vertical_noise_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GPSSensor_Sensing::GPSSensor_Sensing()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.GPSSensor.Sensing)
}
GPSSensor_Sensing::GPSSensor_Sensing(const GPSSensor_Sensing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_horizontal_noise()) {
    horizontal_noise_ = new ::gazebo::msgs::SensorNoise(*from.horizontal_noise_);
  } else {
    horizontal_noise_ = nullptr;
  }
  if (from._internal_has_vertical_noise()) {
    vertical_noise_ = new ::gazebo::msgs::SensorNoise(*from.vertical_noise_);
  } else {
    vertical_noise_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.GPSSensor.Sensing)
}

void GPSSensor_Sensing::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GPSSensor_Sensing_gps_5fsensor_2eproto.base);
  ::memset(&horizontal_noise_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vertical_noise_) -
      reinterpret_cast<char*>(&horizontal_noise_)) + sizeof(vertical_noise_));
}

GPSSensor_Sensing::~GPSSensor_Sensing() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.GPSSensor.Sensing)
  SharedDtor();
}

void GPSSensor_Sensing::SharedDtor() {
  if (this != internal_default_instance()) delete horizontal_noise_;
  if (this != internal_default_instance()) delete vertical_noise_;
}

void GPSSensor_Sensing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GPSSensor_Sensing& GPSSensor_Sensing::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GPSSensor_Sensing_gps_5fsensor_2eproto.base);
  return *internal_default_instance();
}


void GPSSensor_Sensing::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.GPSSensor.Sensing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(horizontal_noise_ != nullptr);
      horizontal_noise_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(vertical_noise_ != nullptr);
      vertical_noise_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GPSSensor_Sensing::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .gazebo.msgs.SensorNoise horizontal_noise = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_horizontal_noise(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.SensorNoise vertical_noise = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vertical_noise(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GPSSensor_Sensing::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.GPSSensor.Sensing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .gazebo.msgs.SensorNoise horizontal_noise = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::horizontal_noise(this), target, stream);
  }

  // optional .gazebo.msgs.SensorNoise vertical_noise = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::vertical_noise(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.GPSSensor.Sensing)
  return target;
}

size_t GPSSensor_Sensing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.GPSSensor.Sensing)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .gazebo.msgs.SensorNoise horizontal_noise = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *horizontal_noise_);
    }

    // optional .gazebo.msgs.SensorNoise vertical_noise = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vertical_noise_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GPSSensor_Sensing::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.GPSSensor.Sensing)
  GOOGLE_DCHECK_NE(&from, this);
  const GPSSensor_Sensing* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GPSSensor_Sensing>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.GPSSensor.Sensing)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.GPSSensor.Sensing)
    MergeFrom(*source);
  }
}

void GPSSensor_Sensing::MergeFrom(const GPSSensor_Sensing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.GPSSensor.Sensing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_horizontal_noise()->::gazebo::msgs::SensorNoise::MergeFrom(from._internal_horizontal_noise());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_vertical_noise()->::gazebo::msgs::SensorNoise::MergeFrom(from._internal_vertical_noise());
    }
  }
}

void GPSSensor_Sensing::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.GPSSensor.Sensing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPSSensor_Sensing::CopyFrom(const GPSSensor_Sensing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.GPSSensor.Sensing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPSSensor_Sensing::IsInitialized() const {
  if (_internal_has_horizontal_noise()) {
    if (!horizontal_noise_->IsInitialized()) return false;
  }
  if (_internal_has_vertical_noise()) {
    if (!vertical_noise_->IsInitialized()) return false;
  }
  return true;
}

void GPSSensor_Sensing::InternalSwap(GPSSensor_Sensing* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(horizontal_noise_, other->horizontal_noise_);
  swap(vertical_noise_, other->vertical_noise_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GPSSensor_Sensing::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GPSSensor::InitAsDefaultInstance() {
  ::gazebo::msgs::_GPSSensor_default_instance_._instance.get_mutable()->position_ = const_cast< ::gazebo::msgs::GPSSensor_Sensing*>(
      ::gazebo::msgs::GPSSensor_Sensing::internal_default_instance());
  ::gazebo::msgs::_GPSSensor_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::gazebo::msgs::GPSSensor_Sensing*>(
      ::gazebo::msgs::GPSSensor_Sensing::internal_default_instance());
}
class GPSSensor::_Internal {
 public:
  using HasBits = decltype(std::declval<GPSSensor>()._has_bits_);
  static const ::gazebo::msgs::GPSSensor_Sensing& position(const GPSSensor* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::gazebo::msgs::GPSSensor_Sensing& velocity(const GPSSensor* msg);
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::gazebo::msgs::GPSSensor_Sensing&
GPSSensor::_Internal::position(const GPSSensor* msg) {
  return *msg->position_;
}
const ::gazebo::msgs::GPSSensor_Sensing&
GPSSensor::_Internal::velocity(const GPSSensor* msg) {
  return *msg->velocity_;
}
GPSSensor::GPSSensor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.GPSSensor)
}
GPSSensor::GPSSensor(const GPSSensor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::gazebo::msgs::GPSSensor_Sensing(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_velocity()) {
    velocity_ = new ::gazebo::msgs::GPSSensor_Sensing(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.GPSSensor)
}

void GPSSensor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GPSSensor_gps_5fsensor_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&velocity_) -
      reinterpret_cast<char*>(&position_)) + sizeof(velocity_));
}

GPSSensor::~GPSSensor() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.GPSSensor)
  SharedDtor();
}

void GPSSensor::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete velocity_;
}

void GPSSensor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GPSSensor& GPSSensor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GPSSensor_gps_5fsensor_2eproto.base);
  return *internal_default_instance();
}


void GPSSensor::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.GPSSensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(position_ != nullptr);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(velocity_ != nullptr);
      velocity_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GPSSensor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .gazebo.msgs.GPSSensor.Sensing position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.GPSSensor.Sensing velocity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GPSSensor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.GPSSensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .gazebo.msgs.GPSSensor.Sensing position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // optional .gazebo.msgs.GPSSensor.Sensing velocity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::velocity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.GPSSensor)
  return target;
}

size_t GPSSensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.GPSSensor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .gazebo.msgs.GPSSensor.Sensing position = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional .gazebo.msgs.GPSSensor.Sensing velocity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *velocity_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GPSSensor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.GPSSensor)
  GOOGLE_DCHECK_NE(&from, this);
  const GPSSensor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GPSSensor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.GPSSensor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.GPSSensor)
    MergeFrom(*source);
  }
}

void GPSSensor::MergeFrom(const GPSSensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.GPSSensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_position()->::gazebo::msgs::GPSSensor_Sensing::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_velocity()->::gazebo::msgs::GPSSensor_Sensing::MergeFrom(from._internal_velocity());
    }
  }
}

void GPSSensor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.GPSSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPSSensor::CopyFrom(const GPSSensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.GPSSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPSSensor::IsInitialized() const {
  if (_internal_has_position()) {
    if (!position_->IsInitialized()) return false;
  }
  if (_internal_has_velocity()) {
    if (!velocity_->IsInitialized()) return false;
  }
  return true;
}

void GPSSensor::InternalSwap(GPSSensor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(position_, other->position_);
  swap(velocity_, other->velocity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GPSSensor::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gazebo::msgs::GPSSensor_Sensing* Arena::CreateMaybeMessage< ::gazebo::msgs::GPSSensor_Sensing >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::GPSSensor_Sensing >(arena);
}
template<> PROTOBUF_NOINLINE ::gazebo::msgs::GPSSensor* Arena::CreateMaybeMessage< ::gazebo::msgs::GPSSensor >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::GPSSensor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

GZ_REGISTER_STATIC_MSG("gazebo.msgs.GPSSensor", GPSSensor)
// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
