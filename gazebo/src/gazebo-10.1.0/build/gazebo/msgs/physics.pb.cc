// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: physics.proto

#include "physics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_vector3d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3d_vector3d_2eproto;
namespace gazebo {
namespace msgs {
class PhysicsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Physics> _instance;
} _Physics_default_instance_;
}  // namespace msgs
}  // namespace gazebo
static void InitDefaultsscc_info_Physics_physics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_Physics_default_instance_;
    new (ptr) ::gazebo::msgs::Physics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::Physics::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Physics_physics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Physics_physics_2eproto}, {
      &scc_info_Vector3d_vector3d_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_physics_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_physics_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_physics_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_physics_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Physics, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Physics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Physics, type_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Physics, solver_type_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Physics, min_step_size_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Physics, precon_iters_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Physics, iters_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Physics, sor_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Physics, cfm_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Physics, erp_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Physics, contact_max_correcting_vel_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Physics, contact_surface_layer_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Physics, gravity_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Physics, enable_physics_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Physics, real_time_factor_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Physics, real_time_update_rate_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Physics, max_step_size_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Physics, profile_name_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Physics, magnetic_field_),
  16,
  0,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  2,
  15,
  12,
  13,
  14,
  1,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 22, sizeof(::gazebo::msgs::Physics)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_Physics_default_instance_),
};

const char descriptor_table_protodef_physics_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rphysics.proto\022\013gazebo.msgs\032\016vector3d.p"
  "roto\"\373\003\n\007Physics\022,\n\004type\030\001 \001(\0162\031.gazebo."
  "msgs.Physics.Type:\003ODE\022\023\n\013solver_type\030\002 "
  "\001(\t\022\025\n\rmin_step_size\030\003 \001(\001\022\024\n\014precon_ite"
  "rs\030\004 \001(\005\022\r\n\005iters\030\005 \001(\005\022\013\n\003sor\030\006 \001(\001\022\013\n\003"
  "cfm\030\007 \001(\001\022\013\n\003erp\030\010 \001(\001\022\"\n\032contact_max_co"
  "rrecting_vel\030\t \001(\001\022\035\n\025contact_surface_la"
  "yer\030\n \001(\001\022&\n\007gravity\030\013 \001(\0132\025.gazebo.msgs"
  ".Vector3d\022\026\n\016enable_physics\030\014 \001(\010\022\030\n\020rea"
  "l_time_factor\030\r \001(\001\022\035\n\025real_time_update_"
  "rate\030\016 \001(\001\022\025\n\rmax_step_size\030\017 \001(\001\022\024\n\014pro"
  "file_name\030\020 \001(\t\022-\n\016magnetic_field\030\021 \001(\0132"
  "\025.gazebo.msgs.Vector3d\"2\n\004Type\022\007\n\003ODE\020\001\022"
  "\n\n\006BULLET\020\002\022\013\n\007SIMBODY\020\003\022\010\n\004DART\020\004"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_physics_2eproto_deps[1] = {
  &::descriptor_table_vector3d_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_physics_2eproto_sccs[1] = {
  &scc_info_Physics_physics_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_physics_2eproto_once;
static bool descriptor_table_physics_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_physics_2eproto = {
  &descriptor_table_physics_2eproto_initialized, descriptor_table_protodef_physics_2eproto, "physics.proto", 554,
  &descriptor_table_physics_2eproto_once, descriptor_table_physics_2eproto_sccs, descriptor_table_physics_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_physics_2eproto::offsets,
  file_level_metadata_physics_2eproto, 1, file_level_enum_descriptors_physics_2eproto, file_level_service_descriptors_physics_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_physics_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_physics_2eproto), true);
namespace gazebo {
namespace msgs {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Physics_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_physics_2eproto);
  return file_level_enum_descriptors_physics_2eproto[0];
}
bool Physics_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Physics_Type Physics::ODE;
constexpr Physics_Type Physics::BULLET;
constexpr Physics_Type Physics::SIMBODY;
constexpr Physics_Type Physics::DART;
constexpr Physics_Type Physics::Type_MIN;
constexpr Physics_Type Physics::Type_MAX;
constexpr int Physics::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Physics::InitAsDefaultInstance() {
  ::gazebo::msgs::_Physics_default_instance_._instance.get_mutable()->gravity_ = const_cast< ::gazebo::msgs::Vector3d*>(
      ::gazebo::msgs::Vector3d::internal_default_instance());
  ::gazebo::msgs::_Physics_default_instance_._instance.get_mutable()->magnetic_field_ = const_cast< ::gazebo::msgs::Vector3d*>(
      ::gazebo::msgs::Vector3d::internal_default_instance());
}
class Physics::_Internal {
 public:
  using HasBits = decltype(std::declval<Physics>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_solver_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_step_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_precon_iters(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_iters(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sor(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_cfm(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_erp(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_contact_max_correcting_vel(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_contact_surface_layer(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::gazebo::msgs::Vector3d& gravity(const Physics* msg);
  static void set_has_gravity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enable_physics(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_real_time_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_real_time_update_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_max_step_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_profile_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::gazebo::msgs::Vector3d& magnetic_field(const Physics* msg);
  static void set_has_magnetic_field(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::gazebo::msgs::Vector3d&
Physics::_Internal::gravity(const Physics* msg) {
  return *msg->gravity_;
}
const ::gazebo::msgs::Vector3d&
Physics::_Internal::magnetic_field(const Physics* msg) {
  return *msg->magnetic_field_;
}
void Physics::clear_gravity() {
  if (gravity_ != nullptr) gravity_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void Physics::clear_magnetic_field() {
  if (magnetic_field_ != nullptr) magnetic_field_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
Physics::Physics()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.Physics)
}
Physics::Physics(const Physics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  solver_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_solver_type()) {
    solver_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.solver_type_);
  }
  profile_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_profile_name()) {
    profile_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.profile_name_);
  }
  if (from._internal_has_gravity()) {
    gravity_ = new ::gazebo::msgs::Vector3d(*from.gravity_);
  } else {
    gravity_ = nullptr;
  }
  if (from._internal_has_magnetic_field()) {
    magnetic_field_ = new ::gazebo::msgs::Vector3d(*from.magnetic_field_);
  } else {
    magnetic_field_ = nullptr;
  }
  ::memcpy(&min_step_size_, &from.min_step_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&min_step_size_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.Physics)
}

void Physics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Physics_physics_2eproto.base);
  solver_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  profile_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gravity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_physics_) -
      reinterpret_cast<char*>(&gravity_)) + sizeof(enable_physics_));
  type_ = 1;
}

Physics::~Physics() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.Physics)
  SharedDtor();
}

void Physics::SharedDtor() {
  solver_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  profile_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete gravity_;
  if (this != internal_default_instance()) delete magnetic_field_;
}

void Physics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Physics& Physics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Physics_physics_2eproto.base);
  return *internal_default_instance();
}


void Physics::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.Physics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      solver_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      profile_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(gravity_ != nullptr);
      gravity_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(magnetic_field_ != nullptr);
      magnetic_field_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&min_step_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sor_) -
        reinterpret_cast<char*>(&min_step_size_)) + sizeof(sor_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&cfm_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_physics_) -
        reinterpret_cast<char*>(&cfm_)) + sizeof(enable_physics_));
  }
  type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Physics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .gazebo.msgs.Physics.Type type = 1 [default = ODE];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::gazebo::msgs::Physics_Type_IsValid(val))) {
            _internal_set_type(static_cast<::gazebo::msgs::Physics_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string solver_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_solver_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gazebo.msgs.Physics.solver_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double min_step_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_min_step_size(&has_bits);
          min_step_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 precon_iters = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_precon_iters(&has_bits);
          precon_iters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 iters = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_iters(&has_bits);
          iters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double sor = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_sor(&has_bits);
          sor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double cfm = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_cfm(&has_bits);
          cfm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double erp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_erp(&has_bits);
          erp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double contact_max_correcting_vel = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_contact_max_correcting_vel(&has_bits);
          contact_max_correcting_vel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double contact_surface_layer = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_contact_surface_layer(&has_bits);
          contact_surface_layer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.Vector3d gravity = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_gravity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_physics = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_enable_physics(&has_bits);
          enable_physics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double real_time_factor = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_real_time_factor(&has_bits);
          real_time_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double real_time_update_rate = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_real_time_update_rate(&has_bits);
          real_time_update_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_step_size = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_max_step_size(&has_bits);
          max_step_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string profile_name = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_profile_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gazebo.msgs.Physics.profile_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.Vector3d magnetic_field = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_magnetic_field(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Physics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.Physics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .gazebo.msgs.Physics.Type type = 1 [default = ODE];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional string solver_type = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_solver_type().data(), static_cast<int>(this->_internal_solver_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.Physics.solver_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_solver_type(), target);
  }

  // optional double min_step_size = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_min_step_size(), target);
  }

  // optional int32 precon_iters = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_precon_iters(), target);
  }

  // optional int32 iters = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_iters(), target);
  }

  // optional double sor = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_sor(), target);
  }

  // optional double cfm = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_cfm(), target);
  }

  // optional double erp = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_erp(), target);
  }

  // optional double contact_max_correcting_vel = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_contact_max_correcting_vel(), target);
  }

  // optional double contact_surface_layer = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_contact_surface_layer(), target);
  }

  // optional .gazebo.msgs.Vector3d gravity = 11;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::gravity(this), target, stream);
  }

  // optional bool enable_physics = 12;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_enable_physics(), target);
  }

  // optional double real_time_factor = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_real_time_factor(), target);
  }

  // optional double real_time_update_rate = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_real_time_update_rate(), target);
  }

  // optional double max_step_size = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_max_step_size(), target);
  }

  // optional string profile_name = 16;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_profile_name().data(), static_cast<int>(this->_internal_profile_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.Physics.profile_name");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_profile_name(), target);
  }

  // optional .gazebo.msgs.Vector3d magnetic_field = 17;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::magnetic_field(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.Physics)
  return target;
}

size_t Physics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.Physics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string solver_type = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_solver_type());
    }

    // optional string profile_name = 16;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_profile_name());
    }

    // optional .gazebo.msgs.Vector3d gravity = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gravity_);
    }

    // optional .gazebo.msgs.Vector3d magnetic_field = 17;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *magnetic_field_);
    }

    // optional double min_step_size = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional int32 precon_iters = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_precon_iters());
    }

    // optional int32 iters = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_iters());
    }

    // optional double sor = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double cfm = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double erp = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double contact_max_correcting_vel = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double contact_surface_layer = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double real_time_factor = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double real_time_update_rate = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double max_step_size = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional bool enable_physics = 12;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  // optional .gazebo.msgs.Physics.Type type = 1 [default = ODE];
  if (cached_has_bits & 0x00010000u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Physics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.Physics)
  GOOGLE_DCHECK_NE(&from, this);
  const Physics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Physics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.Physics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.Physics)
    MergeFrom(*source);
  }
}

void Physics::MergeFrom(const Physics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.Physics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      solver_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.solver_type_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      profile_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.profile_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_gravity()->::gazebo::msgs::Vector3d::MergeFrom(from._internal_gravity());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_magnetic_field()->::gazebo::msgs::Vector3d::MergeFrom(from._internal_magnetic_field());
    }
    if (cached_has_bits & 0x00000010u) {
      min_step_size_ = from.min_step_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      precon_iters_ = from.precon_iters_;
    }
    if (cached_has_bits & 0x00000040u) {
      iters_ = from.iters_;
    }
    if (cached_has_bits & 0x00000080u) {
      sor_ = from.sor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      cfm_ = from.cfm_;
    }
    if (cached_has_bits & 0x00000200u) {
      erp_ = from.erp_;
    }
    if (cached_has_bits & 0x00000400u) {
      contact_max_correcting_vel_ = from.contact_max_correcting_vel_;
    }
    if (cached_has_bits & 0x00000800u) {
      contact_surface_layer_ = from.contact_surface_layer_;
    }
    if (cached_has_bits & 0x00001000u) {
      real_time_factor_ = from.real_time_factor_;
    }
    if (cached_has_bits & 0x00002000u) {
      real_time_update_rate_ = from.real_time_update_rate_;
    }
    if (cached_has_bits & 0x00004000u) {
      max_step_size_ = from.max_step_size_;
    }
    if (cached_has_bits & 0x00008000u) {
      enable_physics_ = from.enable_physics_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_type(from._internal_type());
  }
}

void Physics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.Physics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Physics::CopyFrom(const Physics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.Physics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Physics::IsInitialized() const {
  if (_internal_has_gravity()) {
    if (!gravity_->IsInitialized()) return false;
  }
  if (_internal_has_magnetic_field()) {
    if (!magnetic_field_->IsInitialized()) return false;
  }
  return true;
}

void Physics::InternalSwap(Physics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  solver_type_.Swap(&other->solver_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  profile_name_.Swap(&other->profile_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gravity_, other->gravity_);
  swap(magnetic_field_, other->magnetic_field_);
  swap(min_step_size_, other->min_step_size_);
  swap(precon_iters_, other->precon_iters_);
  swap(iters_, other->iters_);
  swap(sor_, other->sor_);
  swap(cfm_, other->cfm_);
  swap(erp_, other->erp_);
  swap(contact_max_correcting_vel_, other->contact_max_correcting_vel_);
  swap(contact_surface_layer_, other->contact_surface_layer_);
  swap(real_time_factor_, other->real_time_factor_);
  swap(real_time_update_rate_, other->real_time_update_rate_);
  swap(max_step_size_, other->max_step_size_);
  swap(enable_physics_, other->enable_physics_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Physics::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gazebo::msgs::Physics* Arena::CreateMaybeMessage< ::gazebo::msgs::Physics >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::Physics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

GZ_REGISTER_STATIC_MSG("gazebo.msgs.Physics", Physics)
// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
