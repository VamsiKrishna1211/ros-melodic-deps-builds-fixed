// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camerasensor.proto

#include "camerasensor.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_distortion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Distortion_distortion_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vector2d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector2d_vector2d_2eproto;
namespace gazebo {
namespace msgs {
class CameraSensorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraSensor> _instance;
} _CameraSensor_default_instance_;
}  // namespace msgs
}  // namespace gazebo
static void InitDefaultsscc_info_CameraSensor_camerasensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_CameraSensor_default_instance_;
    new (ptr) ::gazebo::msgs::CameraSensor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::CameraSensor::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CameraSensor_camerasensor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CameraSensor_camerasensor_2eproto}, {
      &scc_info_Vector2d_vector2d_2eproto.base,
      &scc_info_Distortion_distortion_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_camerasensor_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_camerasensor_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_camerasensor_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_camerasensor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::CameraSensor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::CameraSensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::CameraSensor, horizontal_fov_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::CameraSensor, image_size_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::CameraSensor, image_format_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::CameraSensor, near_clip_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::CameraSensor, far_clip_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::CameraSensor, save_enabled_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::CameraSensor, save_path_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::CameraSensor, distortion_),
  4,
  2,
  0,
  5,
  6,
  7,
  1,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::gazebo::msgs::CameraSensor)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_CameraSensor_default_instance_),
};

const char descriptor_table_protodef_camerasensor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022camerasensor.proto\022\013gazebo.msgs\032\016vecto"
  "r2d.proto\032\020distortion.proto\"\342\001\n\014CameraSe"
  "nsor\022\026\n\016horizontal_fov\030\001 \001(\001\022)\n\nimage_si"
  "ze\030\002 \001(\0132\025.gazebo.msgs.Vector2d\022\024\n\014image"
  "_format\030\003 \001(\t\022\021\n\tnear_clip\030\004 \001(\001\022\020\n\010far_"
  "clip\030\005 \001(\001\022\024\n\014save_enabled\030\006 \001(\010\022\021\n\tsave"
  "_path\030\007 \001(\t\022+\n\ndistortion\030\010 \001(\0132\027.gazebo"
  ".msgs.Distortion"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_camerasensor_2eproto_deps[2] = {
  &::descriptor_table_distortion_2eproto,
  &::descriptor_table_vector2d_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_camerasensor_2eproto_sccs[1] = {
  &scc_info_CameraSensor_camerasensor_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_camerasensor_2eproto_once;
static bool descriptor_table_camerasensor_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_camerasensor_2eproto = {
  &descriptor_table_camerasensor_2eproto_initialized, descriptor_table_protodef_camerasensor_2eproto, "camerasensor.proto", 296,
  &descriptor_table_camerasensor_2eproto_once, descriptor_table_camerasensor_2eproto_sccs, descriptor_table_camerasensor_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_camerasensor_2eproto::offsets,
  file_level_metadata_camerasensor_2eproto, 1, file_level_enum_descriptors_camerasensor_2eproto, file_level_service_descriptors_camerasensor_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_camerasensor_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_camerasensor_2eproto), true);
namespace gazebo {
namespace msgs {

// ===================================================================

void CameraSensor::InitAsDefaultInstance() {
  ::gazebo::msgs::_CameraSensor_default_instance_._instance.get_mutable()->image_size_ = const_cast< ::gazebo::msgs::Vector2d*>(
      ::gazebo::msgs::Vector2d::internal_default_instance());
  ::gazebo::msgs::_CameraSensor_default_instance_._instance.get_mutable()->distortion_ = const_cast< ::gazebo::msgs::Distortion*>(
      ::gazebo::msgs::Distortion::internal_default_instance());
}
class CameraSensor::_Internal {
 public:
  using HasBits = decltype(std::declval<CameraSensor>()._has_bits_);
  static void set_has_horizontal_fov(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::gazebo::msgs::Vector2d& image_size(const CameraSensor* msg);
  static void set_has_image_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_image_format(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_near_clip(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_far_clip(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_save_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_save_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::gazebo::msgs::Distortion& distortion(const CameraSensor* msg);
  static void set_has_distortion(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::gazebo::msgs::Vector2d&
CameraSensor::_Internal::image_size(const CameraSensor* msg) {
  return *msg->image_size_;
}
const ::gazebo::msgs::Distortion&
CameraSensor::_Internal::distortion(const CameraSensor* msg) {
  return *msg->distortion_;
}
void CameraSensor::clear_image_size() {
  if (image_size_ != nullptr) image_size_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CameraSensor::clear_distortion() {
  if (distortion_ != nullptr) distortion_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CameraSensor::CameraSensor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.CameraSensor)
}
CameraSensor::CameraSensor(const CameraSensor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_image_format()) {
    image_format_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.image_format_);
  }
  save_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_save_path()) {
    save_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.save_path_);
  }
  if (from._internal_has_image_size()) {
    image_size_ = new ::gazebo::msgs::Vector2d(*from.image_size_);
  } else {
    image_size_ = nullptr;
  }
  if (from._internal_has_distortion()) {
    distortion_ = new ::gazebo::msgs::Distortion(*from.distortion_);
  } else {
    distortion_ = nullptr;
  }
  ::memcpy(&horizontal_fov_, &from.horizontal_fov_,
    static_cast<size_t>(reinterpret_cast<char*>(&save_enabled_) -
    reinterpret_cast<char*>(&horizontal_fov_)) + sizeof(save_enabled_));
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.CameraSensor)
}

void CameraSensor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CameraSensor_camerasensor_2eproto.base);
  image_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  save_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&image_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&save_enabled_) -
      reinterpret_cast<char*>(&image_size_)) + sizeof(save_enabled_));
}

CameraSensor::~CameraSensor() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.CameraSensor)
  SharedDtor();
}

void CameraSensor::SharedDtor() {
  image_format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  save_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete image_size_;
  if (this != internal_default_instance()) delete distortion_;
}

void CameraSensor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraSensor& CameraSensor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraSensor_camerasensor_2eproto.base);
  return *internal_default_instance();
}


void CameraSensor::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.CameraSensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      image_format_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      save_path_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(image_size_ != nullptr);
      image_size_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(distortion_ != nullptr);
      distortion_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&horizontal_fov_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&save_enabled_) -
        reinterpret_cast<char*>(&horizontal_fov_)) + sizeof(save_enabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CameraSensor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double horizontal_fov = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_horizontal_fov(&has_bits);
          horizontal_fov_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.Vector2d image_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string image_format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_image_format();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gazebo.msgs.CameraSensor.image_format");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double near_clip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_near_clip(&has_bits);
          near_clip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double far_clip = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_far_clip(&has_bits);
          far_clip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool save_enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_save_enabled(&has_bits);
          save_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string save_path = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_save_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gazebo.msgs.CameraSensor.save_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.Distortion distortion = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_distortion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraSensor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.CameraSensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double horizontal_fov = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_horizontal_fov(), target);
  }

  // optional .gazebo.msgs.Vector2d image_size = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::image_size(this), target, stream);
  }

  // optional string image_format = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_image_format().data(), static_cast<int>(this->_internal_image_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.CameraSensor.image_format");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_image_format(), target);
  }

  // optional double near_clip = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_near_clip(), target);
  }

  // optional double far_clip = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_far_clip(), target);
  }

  // optional bool save_enabled = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_save_enabled(), target);
  }

  // optional string save_path = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_save_path().data(), static_cast<int>(this->_internal_save_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.CameraSensor.save_path");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_save_path(), target);
  }

  // optional .gazebo.msgs.Distortion distortion = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::distortion(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.CameraSensor)
  return target;
}

size_t CameraSensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.CameraSensor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string image_format = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_image_format());
    }

    // optional string save_path = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_save_path());
    }

    // optional .gazebo.msgs.Vector2d image_size = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *image_size_);
    }

    // optional .gazebo.msgs.Distortion distortion = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *distortion_);
    }

    // optional double horizontal_fov = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double near_clip = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double far_clip = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional bool save_enabled = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraSensor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.CameraSensor)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraSensor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraSensor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.CameraSensor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.CameraSensor)
    MergeFrom(*source);
  }
}

void CameraSensor::MergeFrom(const CameraSensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.CameraSensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      image_format_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.image_format_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      save_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.save_path_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_image_size()->::gazebo::msgs::Vector2d::MergeFrom(from._internal_image_size());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_distortion()->::gazebo::msgs::Distortion::MergeFrom(from._internal_distortion());
    }
    if (cached_has_bits & 0x00000010u) {
      horizontal_fov_ = from.horizontal_fov_;
    }
    if (cached_has_bits & 0x00000020u) {
      near_clip_ = from.near_clip_;
    }
    if (cached_has_bits & 0x00000040u) {
      far_clip_ = from.far_clip_;
    }
    if (cached_has_bits & 0x00000080u) {
      save_enabled_ = from.save_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CameraSensor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.CameraSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraSensor::CopyFrom(const CameraSensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.CameraSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraSensor::IsInitialized() const {
  if (_internal_has_image_size()) {
    if (!image_size_->IsInitialized()) return false;
  }
  if (_internal_has_distortion()) {
    if (!distortion_->IsInitialized()) return false;
  }
  return true;
}

void CameraSensor::InternalSwap(CameraSensor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  image_format_.Swap(&other->image_format_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  save_path_.Swap(&other->save_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(image_size_, other->image_size_);
  swap(distortion_, other->distortion_);
  swap(horizontal_fov_, other->horizontal_fov_);
  swap(near_clip_, other->near_clip_);
  swap(far_clip_, other->far_clip_);
  swap(save_enabled_, other->save_enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraSensor::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gazebo::msgs::CameraSensor* Arena::CreateMaybeMessage< ::gazebo::msgs::CameraSensor >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::CameraSensor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

GZ_REGISTER_STATIC_MSG("gazebo.msgs.CameraSensor", CameraSensor)
// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
