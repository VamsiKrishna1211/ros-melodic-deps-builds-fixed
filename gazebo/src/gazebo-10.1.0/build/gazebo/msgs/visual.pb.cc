// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: visual.proto

#include "visual.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_Geometry_geometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_material_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Material_material_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Plugin_plugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pose_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Pose_pose_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vector3d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3d_vector3d_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_visual_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Visual_Meta_visual_2eproto;
namespace gazebo {
namespace msgs {
class Visual_MetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Visual_Meta> _instance;
} _Visual_Meta_default_instance_;
class VisualDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Visual> _instance;
} _Visual_default_instance_;
}  // namespace msgs
}  // namespace gazebo
static void InitDefaultsscc_info_Visual_visual_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_Visual_default_instance_;
    new (ptr) ::gazebo::msgs::Visual();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::Visual::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Visual_visual_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_Visual_visual_2eproto}, {
      &scc_info_Pose_pose_2eproto.base,
      &scc_info_Geometry_geometry_2eproto.base,
      &scc_info_Material_material_2eproto.base,
      &scc_info_Plugin_plugin_2eproto.base,
      &scc_info_Vector3d_vector3d_2eproto.base,
      &scc_info_Visual_Meta_visual_2eproto.base,}};

static void InitDefaultsscc_info_Visual_Meta_visual_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_Visual_Meta_default_instance_;
    new (ptr) ::gazebo::msgs::Visual_Meta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::Visual_Meta::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Visual_Meta_visual_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Visual_Meta_visual_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_visual_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_visual_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_visual_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_visual_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Visual_Meta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Visual_Meta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Visual_Meta, layer_),
  0,
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Visual, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Visual, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Visual, name_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Visual, id_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Visual, parent_name_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Visual, parent_id_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Visual, cast_shadows_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Visual, transparency_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Visual, laser_retro_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Visual, pose_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Visual, geometry_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Visual, material_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Visual, visible_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Visual, delete_me_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Visual, is_static_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Visual, plugin_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Visual, scale_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Visual, meta_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Visual, type_),
  0,
  7,
  1,
  8,
  11,
  9,
  10,
  2,
  3,
  4,
  12,
  13,
  14,
  ~0u,
  5,
  6,
  15,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::gazebo::msgs::Visual_Meta)},
  { 7, 29, sizeof(::gazebo::msgs::Visual)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_Visual_Meta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_Visual_default_instance_),
};

const char descriptor_table_protodef_visual_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014visual.proto\022\013gazebo.msgs\032\npose.proto\032"
  "\016geometry.proto\032\016material.proto\032\014plugin."
  "proto\032\016vector3d.proto\"\315\004\n\006Visual\022\014\n\004name"
  "\030\001 \002(\t\022\n\n\002id\030\002 \001(\r\022\023\n\013parent_name\030\003 \002(\t\022"
  "\021\n\tparent_id\030\004 \001(\r\022\024\n\014cast_shadows\030\005 \001(\010"
  "\022\024\n\014transparency\030\006 \001(\001\022\023\n\013laser_retro\030\007 "
  "\001(\001\022\037\n\004pose\030\010 \001(\0132\021.gazebo.msgs.Pose\022\'\n\010"
  "geometry\030\t \001(\0132\025.gazebo.msgs.Geometry\022\'\n"
  "\010material\030\n \001(\0132\025.gazebo.msgs.Material\022\017"
  "\n\007visible\030\013 \001(\010\022\021\n\tdelete_me\030\014 \001(\010\022\021\n\tis"
  "_static\030\r \001(\010\022#\n\006plugin\030\016 \003(\0132\023.gazebo.m"
  "sgs.Plugin\022$\n\005scale\030\017 \001(\0132\025.gazebo.msgs."
  "Vector3d\022&\n\004meta\030\020 \001(\0132\030.gazebo.msgs.Vis"
  "ual.Meta\022&\n\004type\030\021 \001(\0162\030.gazebo.msgs.Vis"
  "ual.Type\032\025\n\004Meta\022\r\n\005layer\030\001 \001(\005\"d\n\004Type\022"
  "\n\n\006ENTITY\020\000\022\t\n\005MODEL\020\001\022\010\n\004LINK\020\002\022\n\n\006VISU"
  "AL\020\003\022\r\n\tCOLLISION\020\004\022\n\n\006SENSOR\020\005\022\007\n\003GUI\020\006"
  "\022\013\n\007PHYSICS\020\007"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_visual_2eproto_deps[5] = {
  &::descriptor_table_geometry_2eproto,
  &::descriptor_table_material_2eproto,
  &::descriptor_table_plugin_2eproto,
  &::descriptor_table_pose_2eproto,
  &::descriptor_table_vector3d_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_visual_2eproto_sccs[2] = {
  &scc_info_Visual_visual_2eproto.base,
  &scc_info_Visual_Meta_visual_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_visual_2eproto_once;
static bool descriptor_table_visual_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_visual_2eproto = {
  &descriptor_table_visual_2eproto_initialized, descriptor_table_protodef_visual_2eproto, "visual.proto", 693,
  &descriptor_table_visual_2eproto_once, descriptor_table_visual_2eproto_sccs, descriptor_table_visual_2eproto_deps, 2, 5,
  schemas, file_default_instances, TableStruct_visual_2eproto::offsets,
  file_level_metadata_visual_2eproto, 2, file_level_enum_descriptors_visual_2eproto, file_level_service_descriptors_visual_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_visual_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_visual_2eproto), true);
namespace gazebo {
namespace msgs {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Visual_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_visual_2eproto);
  return file_level_enum_descriptors_visual_2eproto[0];
}
bool Visual_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Visual_Type Visual::ENTITY;
constexpr Visual_Type Visual::MODEL;
constexpr Visual_Type Visual::LINK;
constexpr Visual_Type Visual::VISUAL;
constexpr Visual_Type Visual::COLLISION;
constexpr Visual_Type Visual::SENSOR;
constexpr Visual_Type Visual::GUI;
constexpr Visual_Type Visual::PHYSICS;
constexpr Visual_Type Visual::Type_MIN;
constexpr Visual_Type Visual::Type_MAX;
constexpr int Visual::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Visual_Meta::InitAsDefaultInstance() {
}
class Visual_Meta::_Internal {
 public:
  using HasBits = decltype(std::declval<Visual_Meta>()._has_bits_);
  static void set_has_layer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Visual_Meta::Visual_Meta()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.Visual.Meta)
}
Visual_Meta::Visual_Meta(const Visual_Meta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  layer_ = from.layer_;
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.Visual.Meta)
}

void Visual_Meta::SharedCtor() {
  layer_ = 0;
}

Visual_Meta::~Visual_Meta() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.Visual.Meta)
  SharedDtor();
}

void Visual_Meta::SharedDtor() {
}

void Visual_Meta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Visual_Meta& Visual_Meta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Visual_Meta_visual_2eproto.base);
  return *internal_default_instance();
}


void Visual_Meta::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.Visual.Meta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layer_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Visual_Meta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 layer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_layer(&has_bits);
          layer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Visual_Meta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.Visual.Meta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 layer = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_layer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.Visual.Meta)
  return target;
}

size_t Visual_Meta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.Visual.Meta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 layer = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_layer());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Visual_Meta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.Visual.Meta)
  GOOGLE_DCHECK_NE(&from, this);
  const Visual_Meta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Visual_Meta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.Visual.Meta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.Visual.Meta)
    MergeFrom(*source);
  }
}

void Visual_Meta::MergeFrom(const Visual_Meta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.Visual.Meta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_layer()) {
    _internal_set_layer(from._internal_layer());
  }
}

void Visual_Meta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.Visual.Meta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Visual_Meta::CopyFrom(const Visual_Meta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.Visual.Meta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Visual_Meta::IsInitialized() const {
  return true;
}

void Visual_Meta::InternalSwap(Visual_Meta* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(layer_, other->layer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Visual_Meta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Visual::InitAsDefaultInstance() {
  ::gazebo::msgs::_Visual_default_instance_._instance.get_mutable()->pose_ = const_cast< ::gazebo::msgs::Pose*>(
      ::gazebo::msgs::Pose::internal_default_instance());
  ::gazebo::msgs::_Visual_default_instance_._instance.get_mutable()->geometry_ = const_cast< ::gazebo::msgs::Geometry*>(
      ::gazebo::msgs::Geometry::internal_default_instance());
  ::gazebo::msgs::_Visual_default_instance_._instance.get_mutable()->material_ = const_cast< ::gazebo::msgs::Material*>(
      ::gazebo::msgs::Material::internal_default_instance());
  ::gazebo::msgs::_Visual_default_instance_._instance.get_mutable()->scale_ = const_cast< ::gazebo::msgs::Vector3d*>(
      ::gazebo::msgs::Vector3d::internal_default_instance());
  ::gazebo::msgs::_Visual_default_instance_._instance.get_mutable()->meta_ = const_cast< ::gazebo::msgs::Visual_Meta*>(
      ::gazebo::msgs::Visual_Meta::internal_default_instance());
}
class Visual::_Internal {
 public:
  using HasBits = decltype(std::declval<Visual>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_parent_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_parent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_cast_shadows(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_transparency(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_laser_retro(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::gazebo::msgs::Pose& pose(const Visual* msg);
  static void set_has_pose(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::gazebo::msgs::Geometry& geometry(const Visual* msg);
  static void set_has_geometry(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::gazebo::msgs::Material& material(const Visual* msg);
  static void set_has_material(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_delete_me(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_is_static(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::gazebo::msgs::Vector3d& scale(const Visual* msg);
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::gazebo::msgs::Visual_Meta& meta(const Visual* msg);
  static void set_has_meta(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

const ::gazebo::msgs::Pose&
Visual::_Internal::pose(const Visual* msg) {
  return *msg->pose_;
}
const ::gazebo::msgs::Geometry&
Visual::_Internal::geometry(const Visual* msg) {
  return *msg->geometry_;
}
const ::gazebo::msgs::Material&
Visual::_Internal::material(const Visual* msg) {
  return *msg->material_;
}
const ::gazebo::msgs::Vector3d&
Visual::_Internal::scale(const Visual* msg) {
  return *msg->scale_;
}
const ::gazebo::msgs::Visual_Meta&
Visual::_Internal::meta(const Visual* msg) {
  return *msg->meta_;
}
void Visual::clear_pose() {
  if (pose_ != nullptr) pose_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void Visual::clear_geometry() {
  if (geometry_ != nullptr) geometry_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void Visual::clear_material() {
  if (material_ != nullptr) material_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void Visual::clear_plugin() {
  plugin_.Clear();
}
void Visual::clear_scale() {
  if (scale_ != nullptr) scale_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
Visual::Visual()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.Visual)
}
Visual::Visual(const Visual& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      plugin_(from.plugin_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  parent_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_parent_name()) {
    parent_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.parent_name_);
  }
  if (from._internal_has_pose()) {
    pose_ = new ::gazebo::msgs::Pose(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  if (from._internal_has_geometry()) {
    geometry_ = new ::gazebo::msgs::Geometry(*from.geometry_);
  } else {
    geometry_ = nullptr;
  }
  if (from._internal_has_material()) {
    material_ = new ::gazebo::msgs::Material(*from.material_);
  } else {
    material_ = nullptr;
  }
  if (from._internal_has_scale()) {
    scale_ = new ::gazebo::msgs::Vector3d(*from.scale_);
  } else {
    scale_ = nullptr;
  }
  if (from._internal_has_meta()) {
    meta_ = new ::gazebo::msgs::Visual_Meta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.Visual)
}

void Visual::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Visual_visual_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parent_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(type_));
}

Visual::~Visual() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.Visual)
  SharedDtor();
}

void Visual::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parent_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete geometry_;
  if (this != internal_default_instance()) delete material_;
  if (this != internal_default_instance()) delete scale_;
  if (this != internal_default_instance()) delete meta_;
}

void Visual::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Visual& Visual::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Visual_visual_2eproto.base);
  return *internal_default_instance();
}


void Visual::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.Visual)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  plugin_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      parent_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(pose_ != nullptr);
      pose_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(geometry_ != nullptr);
      geometry_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(material_ != nullptr);
      material_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(scale_ != nullptr);
      scale_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(meta_ != nullptr);
      meta_->Clear();
    }
  }
  id_ = 0u;
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&parent_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&parent_id_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Visual::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gazebo.msgs.Visual.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string parent_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_parent_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gazebo.msgs.Visual.parent_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 parent_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_parent_id(&has_bits);
          parent_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cast_shadows = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_cast_shadows(&has_bits);
          cast_shadows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double transparency = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_transparency(&has_bits);
          transparency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double laser_retro = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_laser_retro(&has_bits);
          laser_retro_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.Pose pose = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.Geometry geometry = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_geometry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.Material material = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_material(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool visible = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_visible(&has_bits);
          visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool delete_me = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_delete_me(&has_bits);
          delete_me_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_static = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_is_static(&has_bits);
          is_static_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .gazebo.msgs.Plugin plugin = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_plugin(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.Vector3d scale = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_scale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.Visual.Meta meta = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.Visual.Type type = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::gazebo::msgs::Visual_Type_IsValid(val))) {
            _internal_set_type(static_cast<::gazebo::msgs::Visual_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(17, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Visual::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.Visual)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.Visual.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 id = 2;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  // required string parent_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_parent_name().data(), static_cast<int>(this->_internal_parent_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.Visual.parent_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_parent_name(), target);
  }

  // optional uint32 parent_id = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_parent_id(), target);
  }

  // optional bool cast_shadows = 5;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_cast_shadows(), target);
  }

  // optional double transparency = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_transparency(), target);
  }

  // optional double laser_retro = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_laser_retro(), target);
  }

  // optional .gazebo.msgs.Pose pose = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::pose(this), target, stream);
  }

  // optional .gazebo.msgs.Geometry geometry = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::geometry(this), target, stream);
  }

  // optional .gazebo.msgs.Material material = 10;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::material(this), target, stream);
  }

  // optional bool visible = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_visible(), target);
  }

  // optional bool delete_me = 12;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_delete_me(), target);
  }

  // optional bool is_static = 13;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_is_static(), target);
  }

  // repeated .gazebo.msgs.Plugin plugin = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_plugin_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_plugin(i), target, stream);
  }

  // optional .gazebo.msgs.Vector3d scale = 15;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::scale(this), target, stream);
  }

  // optional .gazebo.msgs.Visual.Meta meta = 16;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::meta(this), target, stream);
  }

  // optional .gazebo.msgs.Visual.Type type = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      17, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.Visual)
  return target;
}

size_t Visual::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gazebo.msgs.Visual)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_parent_name()) {
    // required string parent_name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent_name());
  }

  return total_size;
}
size_t Visual::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.Visual)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required string parent_name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent_name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gazebo.msgs.Plugin plugin = 14;
  total_size += 1UL * this->_internal_plugin_size();
  for (const auto& msg : this->plugin_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000fcu) {
    // optional .gazebo.msgs.Pose pose = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pose_);
    }

    // optional .gazebo.msgs.Geometry geometry = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *geometry_);
    }

    // optional .gazebo.msgs.Material material = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *material_);
    }

    // optional .gazebo.msgs.Vector3d scale = 15;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scale_);
    }

    // optional .gazebo.msgs.Visual.Meta meta = 16;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *meta_);
    }

    // optional uint32 id = 2;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 parent_id = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_parent_id());
    }

    // optional double transparency = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double laser_retro = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional bool cast_shadows = 5;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool visible = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool delete_me = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool is_static = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional .gazebo.msgs.Visual.Type type = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Visual::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.Visual)
  GOOGLE_DCHECK_NE(&from, this);
  const Visual* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Visual>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.Visual)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.Visual)
    MergeFrom(*source);
  }
}

void Visual::MergeFrom(const Visual& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.Visual)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  plugin_.MergeFrom(from.plugin_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      parent_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.parent_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_pose()->::gazebo::msgs::Pose::MergeFrom(from._internal_pose());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_geometry()->::gazebo::msgs::Geometry::MergeFrom(from._internal_geometry());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_material()->::gazebo::msgs::Material::MergeFrom(from._internal_material());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_scale()->::gazebo::msgs::Vector3d::MergeFrom(from._internal_scale());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_meta()->::gazebo::msgs::Visual_Meta::MergeFrom(from._internal_meta());
    }
    if (cached_has_bits & 0x00000080u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      parent_id_ = from.parent_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      transparency_ = from.transparency_;
    }
    if (cached_has_bits & 0x00000400u) {
      laser_retro_ = from.laser_retro_;
    }
    if (cached_has_bits & 0x00000800u) {
      cast_shadows_ = from.cast_shadows_;
    }
    if (cached_has_bits & 0x00001000u) {
      visible_ = from.visible_;
    }
    if (cached_has_bits & 0x00002000u) {
      delete_me_ = from.delete_me_;
    }
    if (cached_has_bits & 0x00004000u) {
      is_static_ = from.is_static_;
    }
    if (cached_has_bits & 0x00008000u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Visual::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.Visual)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Visual::CopyFrom(const Visual& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.Visual)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Visual::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(plugin_)) return false;
  if (_internal_has_pose()) {
    if (!pose_->IsInitialized()) return false;
  }
  if (_internal_has_geometry()) {
    if (!geometry_->IsInitialized()) return false;
  }
  if (_internal_has_material()) {
    if (!material_->IsInitialized()) return false;
  }
  if (_internal_has_scale()) {
    if (!scale_->IsInitialized()) return false;
  }
  return true;
}

void Visual::InternalSwap(Visual* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  plugin_.InternalSwap(&other->plugin_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  parent_name_.Swap(&other->parent_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pose_, other->pose_);
  swap(geometry_, other->geometry_);
  swap(material_, other->material_);
  swap(scale_, other->scale_);
  swap(meta_, other->meta_);
  swap(id_, other->id_);
  swap(parent_id_, other->parent_id_);
  swap(transparency_, other->transparency_);
  swap(laser_retro_, other->laser_retro_);
  swap(cast_shadows_, other->cast_shadows_);
  swap(visible_, other->visible_);
  swap(delete_me_, other->delete_me_);
  swap(is_static_, other->is_static_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Visual::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gazebo::msgs::Visual_Meta* Arena::CreateMaybeMessage< ::gazebo::msgs::Visual_Meta >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::Visual_Meta >(arena);
}
template<> PROTOBUF_NOINLINE ::gazebo::msgs::Visual* Arena::CreateMaybeMessage< ::gazebo::msgs::Visual >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::Visual >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

GZ_REGISTER_STATIC_MSG("gazebo.msgs.Visual", Visual)
// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
