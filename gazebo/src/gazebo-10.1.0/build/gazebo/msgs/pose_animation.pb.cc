// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pose_animation.proto

#include "pose_animation.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pose_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Pose_pose_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_time_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Time_time_2eproto;
namespace gazebo {
namespace msgs {
class PoseAnimationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PoseAnimation> _instance;
} _PoseAnimation_default_instance_;
}  // namespace msgs
}  // namespace gazebo
static void InitDefaultsscc_info_PoseAnimation_pose_5fanimation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_PoseAnimation_default_instance_;
    new (ptr) ::gazebo::msgs::PoseAnimation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::PoseAnimation::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PoseAnimation_pose_5fanimation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PoseAnimation_pose_5fanimation_2eproto}, {
      &scc_info_Pose_pose_2eproto.base,
      &scc_info_Time_time_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pose_5fanimation_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pose_5fanimation_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pose_5fanimation_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pose_5fanimation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::PoseAnimation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::PoseAnimation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::PoseAnimation, model_name_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::PoseAnimation, model_id_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::PoseAnimation, pose_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::PoseAnimation, time_),
  0,
  1,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::gazebo::msgs::PoseAnimation)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_PoseAnimation_default_instance_),
};

const char descriptor_table_protodef_pose_5fanimation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024pose_animation.proto\022\013gazebo.msgs\032\npos"
  "e.proto\032\ntime.proto\"w\n\rPoseAnimation\022\022\n\n"
  "model_name\030\001 \002(\t\022\020\n\010model_id\030\002 \001(\r\022\037\n\004po"
  "se\030\003 \003(\0132\021.gazebo.msgs.Pose\022\037\n\004time\030\004 \003("
  "\0132\021.gazebo.msgs.Time"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pose_5fanimation_2eproto_deps[2] = {
  &::descriptor_table_pose_2eproto,
  &::descriptor_table_time_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pose_5fanimation_2eproto_sccs[1] = {
  &scc_info_PoseAnimation_pose_5fanimation_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pose_5fanimation_2eproto_once;
static bool descriptor_table_pose_5fanimation_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pose_5fanimation_2eproto = {
  &descriptor_table_pose_5fanimation_2eproto_initialized, descriptor_table_protodef_pose_5fanimation_2eproto, "pose_animation.proto", 180,
  &descriptor_table_pose_5fanimation_2eproto_once, descriptor_table_pose_5fanimation_2eproto_sccs, descriptor_table_pose_5fanimation_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_pose_5fanimation_2eproto::offsets,
  file_level_metadata_pose_5fanimation_2eproto, 1, file_level_enum_descriptors_pose_5fanimation_2eproto, file_level_service_descriptors_pose_5fanimation_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pose_5fanimation_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pose_5fanimation_2eproto), true);
namespace gazebo {
namespace msgs {

// ===================================================================

void PoseAnimation::InitAsDefaultInstance() {
}
class PoseAnimation::_Internal {
 public:
  using HasBits = decltype(std::declval<PoseAnimation>()._has_bits_);
  static void set_has_model_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_model_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void PoseAnimation::clear_pose() {
  pose_.Clear();
}
void PoseAnimation::clear_time() {
  time_.Clear();
}
PoseAnimation::PoseAnimation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.PoseAnimation)
}
PoseAnimation::PoseAnimation(const PoseAnimation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      pose_(from.pose_),
      time_(from.time_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_model_name()) {
    model_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_name_);
  }
  model_id_ = from.model_id_;
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.PoseAnimation)
}

void PoseAnimation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PoseAnimation_pose_5fanimation_2eproto.base);
  model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_id_ = 0u;
}

PoseAnimation::~PoseAnimation() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.PoseAnimation)
  SharedDtor();
}

void PoseAnimation::SharedDtor() {
  model_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PoseAnimation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PoseAnimation& PoseAnimation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PoseAnimation_pose_5fanimation_2eproto.base);
  return *internal_default_instance();
}


void PoseAnimation::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.PoseAnimation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pose_.Clear();
  time_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    model_name_.ClearNonDefaultToEmptyNoArena();
  }
  model_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PoseAnimation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string model_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_model_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gazebo.msgs.PoseAnimation.model_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_model_id(&has_bits);
          model_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .gazebo.msgs.Pose pose = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pose(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .gazebo.msgs.Time time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_time(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PoseAnimation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.PoseAnimation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string model_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_model_name().data(), static_cast<int>(this->_internal_model_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.PoseAnimation.model_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model_name(), target);
  }

  // optional uint32 model_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_model_id(), target);
  }

  // repeated .gazebo.msgs.Pose pose = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pose_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_pose(i), target, stream);
  }

  // repeated .gazebo.msgs.Time time = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_time_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_time(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.PoseAnimation)
  return target;
}

size_t PoseAnimation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.PoseAnimation)
  size_t total_size = 0;

  // required string model_name = 1;
  if (_internal_has_model_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gazebo.msgs.Pose pose = 3;
  total_size += 1UL * this->_internal_pose_size();
  for (const auto& msg : this->pose_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gazebo.msgs.Time time = 4;
  total_size += 1UL * this->_internal_time_size();
  for (const auto& msg : this->time_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 model_id = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_model_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoseAnimation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.PoseAnimation)
  GOOGLE_DCHECK_NE(&from, this);
  const PoseAnimation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PoseAnimation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.PoseAnimation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.PoseAnimation)
    MergeFrom(*source);
  }
}

void PoseAnimation::MergeFrom(const PoseAnimation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.PoseAnimation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pose_.MergeFrom(from.pose_);
  time_.MergeFrom(from.time_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      model_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      model_id_ = from.model_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PoseAnimation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.PoseAnimation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoseAnimation::CopyFrom(const PoseAnimation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.PoseAnimation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseAnimation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pose_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(time_)) return false;
  return true;
}

void PoseAnimation::InternalSwap(PoseAnimation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pose_.InternalSwap(&other->pose_);
  time_.InternalSwap(&other->time_);
  model_name_.Swap(&other->model_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(model_id_, other->model_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PoseAnimation::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gazebo::msgs::PoseAnimation* Arena::CreateMaybeMessage< ::gazebo::msgs::PoseAnimation >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::PoseAnimation >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

GZ_REGISTER_STATIC_MSG("gazebo.msgs.PoseAnimation", PoseAnimation)
// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
