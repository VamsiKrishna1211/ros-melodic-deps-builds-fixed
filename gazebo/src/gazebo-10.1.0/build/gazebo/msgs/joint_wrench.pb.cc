// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: joint_wrench.proto

#include "joint_wrench.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_wrench_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Wrench_wrench_2eproto;
namespace gazebo {
namespace msgs {
class JointWrenchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JointWrench> _instance;
} _JointWrench_default_instance_;
}  // namespace msgs
}  // namespace gazebo
static void InitDefaultsscc_info_JointWrench_joint_5fwrench_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_JointWrench_default_instance_;
    new (ptr) ::gazebo::msgs::JointWrench();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::JointWrench::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JointWrench_joint_5fwrench_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_JointWrench_joint_5fwrench_2eproto}, {
      &scc_info_Wrench_wrench_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_joint_5fwrench_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_joint_5fwrench_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_joint_5fwrench_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_joint_5fwrench_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::JointWrench, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::JointWrench, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::JointWrench, body_1_name_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::JointWrench, body_1_id_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::JointWrench, body_2_name_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::JointWrench, body_2_id_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::JointWrench, body_1_wrench_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::JointWrench, body_2_wrench_),
  0,
  4,
  1,
  5,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::gazebo::msgs::JointWrench)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_JointWrench_default_instance_),
};

const char descriptor_table_protodef_joint_5fwrench_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022joint_wrench.proto\022\013gazebo.msgs\032\014wrenc"
  "h.proto\"\265\001\n\013JointWrench\022\023\n\013body_1_name\030\001"
  " \002(\t\022\021\n\tbody_1_id\030\002 \002(\r\022\023\n\013body_2_name\030\003"
  " \002(\t\022\021\n\tbody_2_id\030\004 \002(\r\022*\n\rbody_1_wrench"
  "\030\005 \002(\0132\023.gazebo.msgs.Wrench\022*\n\rbody_2_wr"
  "ench\030\006 \002(\0132\023.gazebo.msgs.Wrench"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_joint_5fwrench_2eproto_deps[1] = {
  &::descriptor_table_wrench_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_joint_5fwrench_2eproto_sccs[1] = {
  &scc_info_JointWrench_joint_5fwrench_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_joint_5fwrench_2eproto_once;
static bool descriptor_table_joint_5fwrench_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_joint_5fwrench_2eproto = {
  &descriptor_table_joint_5fwrench_2eproto_initialized, descriptor_table_protodef_joint_5fwrench_2eproto, "joint_wrench.proto", 231,
  &descriptor_table_joint_5fwrench_2eproto_once, descriptor_table_joint_5fwrench_2eproto_sccs, descriptor_table_joint_5fwrench_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_joint_5fwrench_2eproto::offsets,
  file_level_metadata_joint_5fwrench_2eproto, 1, file_level_enum_descriptors_joint_5fwrench_2eproto, file_level_service_descriptors_joint_5fwrench_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_joint_5fwrench_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_joint_5fwrench_2eproto), true);
namespace gazebo {
namespace msgs {

// ===================================================================

void JointWrench::InitAsDefaultInstance() {
  ::gazebo::msgs::_JointWrench_default_instance_._instance.get_mutable()->body_1_wrench_ = const_cast< ::gazebo::msgs::Wrench*>(
      ::gazebo::msgs::Wrench::internal_default_instance());
  ::gazebo::msgs::_JointWrench_default_instance_._instance.get_mutable()->body_2_wrench_ = const_cast< ::gazebo::msgs::Wrench*>(
      ::gazebo::msgs::Wrench::internal_default_instance());
}
class JointWrench::_Internal {
 public:
  using HasBits = decltype(std::declval<JointWrench>()._has_bits_);
  static void set_has_body_1_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_body_1_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_body_2_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_body_2_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::gazebo::msgs::Wrench& body_1_wrench(const JointWrench* msg);
  static void set_has_body_1_wrench(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::gazebo::msgs::Wrench& body_2_wrench(const JointWrench* msg);
  static void set_has_body_2_wrench(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::gazebo::msgs::Wrench&
JointWrench::_Internal::body_1_wrench(const JointWrench* msg) {
  return *msg->body_1_wrench_;
}
const ::gazebo::msgs::Wrench&
JointWrench::_Internal::body_2_wrench(const JointWrench* msg) {
  return *msg->body_2_wrench_;
}
void JointWrench::clear_body_1_wrench() {
  if (body_1_wrench_ != nullptr) body_1_wrench_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void JointWrench::clear_body_2_wrench() {
  if (body_2_wrench_ != nullptr) body_2_wrench_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
JointWrench::JointWrench()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.JointWrench)
}
JointWrench::JointWrench(const JointWrench& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  body_1_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_body_1_name()) {
    body_1_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.body_1_name_);
  }
  body_2_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_body_2_name()) {
    body_2_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.body_2_name_);
  }
  if (from._internal_has_body_1_wrench()) {
    body_1_wrench_ = new ::gazebo::msgs::Wrench(*from.body_1_wrench_);
  } else {
    body_1_wrench_ = nullptr;
  }
  if (from._internal_has_body_2_wrench()) {
    body_2_wrench_ = new ::gazebo::msgs::Wrench(*from.body_2_wrench_);
  } else {
    body_2_wrench_ = nullptr;
  }
  ::memcpy(&body_1_id_, &from.body_1_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&body_2_id_) -
    reinterpret_cast<char*>(&body_1_id_)) + sizeof(body_2_id_));
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.JointWrench)
}

void JointWrench::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JointWrench_joint_5fwrench_2eproto.base);
  body_1_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_2_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&body_1_wrench_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&body_2_id_) -
      reinterpret_cast<char*>(&body_1_wrench_)) + sizeof(body_2_id_));
}

JointWrench::~JointWrench() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.JointWrench)
  SharedDtor();
}

void JointWrench::SharedDtor() {
  body_1_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_2_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete body_1_wrench_;
  if (this != internal_default_instance()) delete body_2_wrench_;
}

void JointWrench::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JointWrench& JointWrench::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JointWrench_joint_5fwrench_2eproto.base);
  return *internal_default_instance();
}


void JointWrench::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.JointWrench)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      body_1_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      body_2_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(body_1_wrench_ != nullptr);
      body_1_wrench_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(body_2_wrench_ != nullptr);
      body_2_wrench_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&body_1_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&body_2_id_) -
        reinterpret_cast<char*>(&body_1_id_)) + sizeof(body_2_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* JointWrench::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string body_1_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_body_1_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gazebo.msgs.JointWrench.body_1_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 body_1_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_body_1_id(&has_bits);
          body_1_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string body_2_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_body_2_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gazebo.msgs.JointWrench.body_2_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 body_2_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_body_2_id(&has_bits);
          body_2_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .gazebo.msgs.Wrench body_1_wrench = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_body_1_wrench(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .gazebo.msgs.Wrench body_2_wrench = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_body_2_wrench(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JointWrench::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.JointWrench)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string body_1_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_body_1_name().data(), static_cast<int>(this->_internal_body_1_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.JointWrench.body_1_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_body_1_name(), target);
  }

  // required uint32 body_1_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_body_1_id(), target);
  }

  // required string body_2_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_body_2_name().data(), static_cast<int>(this->_internal_body_2_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.JointWrench.body_2_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_body_2_name(), target);
  }

  // required uint32 body_2_id = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_body_2_id(), target);
  }

  // required .gazebo.msgs.Wrench body_1_wrench = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::body_1_wrench(this), target, stream);
  }

  // required .gazebo.msgs.Wrench body_2_wrench = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::body_2_wrench(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.JointWrench)
  return target;
}

size_t JointWrench::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gazebo.msgs.JointWrench)
  size_t total_size = 0;

  if (_internal_has_body_1_name()) {
    // required string body_1_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body_1_name());
  }

  if (_internal_has_body_2_name()) {
    // required string body_2_name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body_2_name());
  }

  if (_internal_has_body_1_wrench()) {
    // required .gazebo.msgs.Wrench body_1_wrench = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *body_1_wrench_);
  }

  if (_internal_has_body_2_wrench()) {
    // required .gazebo.msgs.Wrench body_2_wrench = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *body_2_wrench_);
  }

  if (_internal_has_body_1_id()) {
    // required uint32 body_1_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_body_1_id());
  }

  if (_internal_has_body_2_id()) {
    // required uint32 body_2_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_body_2_id());
  }

  return total_size;
}
size_t JointWrench::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.JointWrench)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string body_1_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body_1_name());

    // required string body_2_name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body_2_name());

    // required .gazebo.msgs.Wrench body_1_wrench = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *body_1_wrench_);

    // required .gazebo.msgs.Wrench body_2_wrench = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *body_2_wrench_);

    // required uint32 body_1_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_body_1_id());

    // required uint32 body_2_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_body_2_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JointWrench::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.JointWrench)
  GOOGLE_DCHECK_NE(&from, this);
  const JointWrench* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JointWrench>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.JointWrench)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.JointWrench)
    MergeFrom(*source);
  }
}

void JointWrench::MergeFrom(const JointWrench& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.JointWrench)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      body_1_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.body_1_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      body_2_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.body_2_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_body_1_wrench()->::gazebo::msgs::Wrench::MergeFrom(from._internal_body_1_wrench());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_body_2_wrench()->::gazebo::msgs::Wrench::MergeFrom(from._internal_body_2_wrench());
    }
    if (cached_has_bits & 0x00000010u) {
      body_1_id_ = from.body_1_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      body_2_id_ = from.body_2_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JointWrench::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.JointWrench)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointWrench::CopyFrom(const JointWrench& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.JointWrench)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointWrench::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  if (_internal_has_body_1_wrench()) {
    if (!body_1_wrench_->IsInitialized()) return false;
  }
  if (_internal_has_body_2_wrench()) {
    if (!body_2_wrench_->IsInitialized()) return false;
  }
  return true;
}

void JointWrench::InternalSwap(JointWrench* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  body_1_name_.Swap(&other->body_1_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  body_2_name_.Swap(&other->body_2_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(body_1_wrench_, other->body_1_wrench_);
  swap(body_2_wrench_, other->body_2_wrench_);
  swap(body_1_id_, other->body_1_id_);
  swap(body_2_id_, other->body_2_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JointWrench::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gazebo::msgs::JointWrench* Arena::CreateMaybeMessage< ::gazebo::msgs::JointWrench >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::JointWrench >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

GZ_REGISTER_STATIC_MSG("gazebo.msgs.JointWrench", JointWrench)
// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
