// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: track_visual.proto

#include "track_visual.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_vector3d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3d_vector3d_2eproto;
namespace gazebo {
namespace msgs {
class TrackVisualDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackVisual> _instance;
} _TrackVisual_default_instance_;
}  // namespace msgs
}  // namespace gazebo
static void InitDefaultsscc_info_TrackVisual_track_5fvisual_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_TrackVisual_default_instance_;
    new (ptr) ::gazebo::msgs::TrackVisual();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::TrackVisual::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrackVisual_track_5fvisual_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrackVisual_track_5fvisual_2eproto}, {
      &scc_info_Vector3d_vector3d_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_track_5fvisual_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_track_5fvisual_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_track_5fvisual_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_track_5fvisual_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::TrackVisual, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::TrackVisual, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::TrackVisual, name_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::TrackVisual, id_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::TrackVisual, inherit_orientation_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::TrackVisual, min_dist_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::TrackVisual, max_dist_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::TrackVisual, static__),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::TrackVisual, use_model_frame_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::TrackVisual, xyz_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::TrackVisual, inherit_yaw_),
  0,
  4,
  5,
  2,
  3,
  6,
  7,
  1,
  8,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::gazebo::msgs::TrackVisual)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_TrackVisual_default_instance_),
};

const char descriptor_table_protodef_track_5fvisual_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022track_visual.proto\022\013gazebo.msgs\032\016vecto"
  "r3d.proto\"\312\001\n\013TrackVisual\022\014\n\004name\030\001 \002(\t\022"
  "\n\n\002id\030\002 \001(\r\022\033\n\023inherit_orientation\030\003 \001(\010"
  "\022\020\n\010min_dist\030\004 \001(\001\022\020\n\010max_dist\030\005 \001(\001\022\016\n\006"
  "static\030\006 \001(\010\022\027\n\017use_model_frame\030\007 \001(\010\022\"\n"
  "\003xyz\030\010 \001(\0132\025.gazebo.msgs.Vector3d\022\023\n\013inh"
  "erit_yaw\030\t \001(\010"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_track_5fvisual_2eproto_deps[1] = {
  &::descriptor_table_vector3d_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_track_5fvisual_2eproto_sccs[1] = {
  &scc_info_TrackVisual_track_5fvisual_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_track_5fvisual_2eproto_once;
static bool descriptor_table_track_5fvisual_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_track_5fvisual_2eproto = {
  &descriptor_table_track_5fvisual_2eproto_initialized, descriptor_table_protodef_track_5fvisual_2eproto, "track_visual.proto", 254,
  &descriptor_table_track_5fvisual_2eproto_once, descriptor_table_track_5fvisual_2eproto_sccs, descriptor_table_track_5fvisual_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_track_5fvisual_2eproto::offsets,
  file_level_metadata_track_5fvisual_2eproto, 1, file_level_enum_descriptors_track_5fvisual_2eproto, file_level_service_descriptors_track_5fvisual_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_track_5fvisual_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_track_5fvisual_2eproto), true);
namespace gazebo {
namespace msgs {

// ===================================================================

void TrackVisual::InitAsDefaultInstance() {
  ::gazebo::msgs::_TrackVisual_default_instance_._instance.get_mutable()->xyz_ = const_cast< ::gazebo::msgs::Vector3d*>(
      ::gazebo::msgs::Vector3d::internal_default_instance());
}
class TrackVisual::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackVisual>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_inherit_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_min_dist(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_dist(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_static_(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_use_model_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::gazebo::msgs::Vector3d& xyz(const TrackVisual* msg);
  static void set_has_xyz(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_inherit_yaw(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::gazebo::msgs::Vector3d&
TrackVisual::_Internal::xyz(const TrackVisual* msg) {
  return *msg->xyz_;
}
void TrackVisual::clear_xyz() {
  if (xyz_ != nullptr) xyz_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
TrackVisual::TrackVisual()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.TrackVisual)
}
TrackVisual::TrackVisual(const TrackVisual& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_xyz()) {
    xyz_ = new ::gazebo::msgs::Vector3d(*from.xyz_);
  } else {
    xyz_ = nullptr;
  }
  ::memcpy(&min_dist_, &from.min_dist_,
    static_cast<size_t>(reinterpret_cast<char*>(&inherit_yaw_) -
    reinterpret_cast<char*>(&min_dist_)) + sizeof(inherit_yaw_));
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.TrackVisual)
}

void TrackVisual::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrackVisual_track_5fvisual_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&xyz_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inherit_yaw_) -
      reinterpret_cast<char*>(&xyz_)) + sizeof(inherit_yaw_));
}

TrackVisual::~TrackVisual() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.TrackVisual)
  SharedDtor();
}

void TrackVisual::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete xyz_;
}

void TrackVisual::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackVisual& TrackVisual::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackVisual_track_5fvisual_2eproto.base);
  return *internal_default_instance();
}


void TrackVisual::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.TrackVisual)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(xyz_ != nullptr);
      xyz_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&min_dist_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_model_frame_) -
        reinterpret_cast<char*>(&min_dist_)) + sizeof(use_model_frame_));
  }
  inherit_yaw_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TrackVisual::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gazebo.msgs.TrackVisual.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool inherit_orientation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_inherit_orientation(&has_bits);
          inherit_orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double min_dist = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_min_dist(&has_bits);
          min_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_dist = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_max_dist(&has_bits);
          max_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool static = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_static_(&has_bits);
          static__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_model_frame = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_use_model_frame(&has_bits);
          use_model_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.Vector3d xyz = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_xyz(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool inherit_yaw = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_inherit_yaw(&has_bits);
          inherit_yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackVisual::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.TrackVisual)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.TrackVisual.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  // optional bool inherit_orientation = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_inherit_orientation(), target);
  }

  // optional double min_dist = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_min_dist(), target);
  }

  // optional double max_dist = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_max_dist(), target);
  }

  // optional bool static = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_static_(), target);
  }

  // optional bool use_model_frame = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_use_model_frame(), target);
  }

  // optional .gazebo.msgs.Vector3d xyz = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::xyz(this), target, stream);
  }

  // optional bool inherit_yaw = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_inherit_yaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.TrackVisual)
  return target;
}

size_t TrackVisual::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.TrackVisual)
  size_t total_size = 0;

  // required string name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional .gazebo.msgs.Vector3d xyz = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *xyz_);
    }

    // optional double min_dist = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double max_dist = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint32 id = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional bool inherit_orientation = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool static = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool use_model_frame = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool inherit_yaw = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackVisual::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.TrackVisual)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackVisual* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackVisual>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.TrackVisual)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.TrackVisual)
    MergeFrom(*source);
  }
}

void TrackVisual::MergeFrom(const TrackVisual& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.TrackVisual)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_xyz()->::gazebo::msgs::Vector3d::MergeFrom(from._internal_xyz());
    }
    if (cached_has_bits & 0x00000004u) {
      min_dist_ = from.min_dist_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_dist_ = from.max_dist_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      inherit_orientation_ = from.inherit_orientation_;
    }
    if (cached_has_bits & 0x00000040u) {
      static__ = from.static__;
    }
    if (cached_has_bits & 0x00000080u) {
      use_model_frame_ = from.use_model_frame_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_inherit_yaw(from._internal_inherit_yaw());
  }
}

void TrackVisual::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.TrackVisual)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackVisual::CopyFrom(const TrackVisual& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.TrackVisual)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackVisual::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (_internal_has_xyz()) {
    if (!xyz_->IsInitialized()) return false;
  }
  return true;
}

void TrackVisual::InternalSwap(TrackVisual* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(xyz_, other->xyz_);
  swap(min_dist_, other->min_dist_);
  swap(max_dist_, other->max_dist_);
  swap(id_, other->id_);
  swap(inherit_orientation_, other->inherit_orientation_);
  swap(static__, other->static__);
  swap(use_model_frame_, other->use_model_frame_);
  swap(inherit_yaw_, other->inherit_yaw_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackVisual::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gazebo::msgs::TrackVisual* Arena::CreateMaybeMessage< ::gazebo::msgs::TrackVisual >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::TrackVisual >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

GZ_REGISTER_STATIC_MSG("gazebo.msgs.TrackVisual", TrackVisual)
// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
