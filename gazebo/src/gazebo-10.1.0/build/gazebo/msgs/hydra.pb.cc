// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hydra.proto

#include "hydra.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_hydra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Hydra_Paddle_hydra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pose_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Pose_pose_2eproto;
namespace gazebo {
namespace msgs {
class Hydra_PaddleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Hydra_Paddle> _instance;
} _Hydra_Paddle_default_instance_;
class HydraDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Hydra> _instance;
} _Hydra_default_instance_;
}  // namespace msgs
}  // namespace gazebo
static void InitDefaultsscc_info_Hydra_hydra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_Hydra_default_instance_;
    new (ptr) ::gazebo::msgs::Hydra();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::Hydra::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Hydra_hydra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Hydra_hydra_2eproto}, {
      &scc_info_Hydra_Paddle_hydra_2eproto.base,}};

static void InitDefaultsscc_info_Hydra_Paddle_hydra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_Hydra_Paddle_default_instance_;
    new (ptr) ::gazebo::msgs::Hydra_Paddle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::Hydra_Paddle::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Hydra_Paddle_hydra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Hydra_Paddle_hydra_2eproto}, {
      &scc_info_Pose_pose_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_hydra_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_hydra_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_hydra_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_hydra_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Hydra_Paddle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Hydra_Paddle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Hydra_Paddle, pose_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Hydra_Paddle, button_bumper_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Hydra_Paddle, button_1_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Hydra_Paddle, button_2_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Hydra_Paddle, button_3_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Hydra_Paddle, button_4_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Hydra_Paddle, button_joy_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Hydra_Paddle, button_center_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Hydra_Paddle, joy_x_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Hydra_Paddle, joy_y_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Hydra_Paddle, trigger_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Hydra, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Hydra, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Hydra, right_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Hydra, left_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, sizeof(::gazebo::msgs::Hydra_Paddle)},
  { 27, 34, sizeof(::gazebo::msgs::Hydra)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_Hydra_Paddle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_Hydra_default_instance_),
};

const char descriptor_table_protodef_hydra_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013hydra.proto\022\013gazebo.msgs\032\npose.proto\"\277"
  "\002\n\005Hydra\022(\n\005right\030\001 \002(\0132\031.gazebo.msgs.Hy"
  "dra.Paddle\022\'\n\004left\030\002 \002(\0132\031.gazebo.msgs.H"
  "ydra.Paddle\032\342\001\n\006Paddle\022\037\n\004pose\030\001 \002(\0132\021.g"
  "azebo.msgs.Pose\022\025\n\rbutton_bumper\030\002 \002(\010\022\020"
  "\n\010button_1\030\003 \002(\010\022\020\n\010button_2\030\004 \002(\010\022\020\n\010bu"
  "tton_3\030\005 \002(\010\022\020\n\010button_4\030\006 \002(\010\022\022\n\nbutton"
  "_joy\030\007 \002(\010\022\025\n\rbutton_center\030\010 \002(\010\022\r\n\005joy"
  "_x\030\t \002(\001\022\r\n\005joy_y\030\n \002(\001\022\017\n\007trigger\030\013 \002(\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_hydra_2eproto_deps[1] = {
  &::descriptor_table_pose_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_hydra_2eproto_sccs[2] = {
  &scc_info_Hydra_hydra_2eproto.base,
  &scc_info_Hydra_Paddle_hydra_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_hydra_2eproto_once;
static bool descriptor_table_hydra_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hydra_2eproto = {
  &descriptor_table_hydra_2eproto_initialized, descriptor_table_protodef_hydra_2eproto, "hydra.proto", 360,
  &descriptor_table_hydra_2eproto_once, descriptor_table_hydra_2eproto_sccs, descriptor_table_hydra_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_hydra_2eproto::offsets,
  file_level_metadata_hydra_2eproto, 2, file_level_enum_descriptors_hydra_2eproto, file_level_service_descriptors_hydra_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_hydra_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_hydra_2eproto), true);
namespace gazebo {
namespace msgs {

// ===================================================================

void Hydra_Paddle::InitAsDefaultInstance() {
  ::gazebo::msgs::_Hydra_Paddle_default_instance_._instance.get_mutable()->pose_ = const_cast< ::gazebo::msgs::Pose*>(
      ::gazebo::msgs::Pose::internal_default_instance());
}
class Hydra_Paddle::_Internal {
 public:
  using HasBits = decltype(std::declval<Hydra_Paddle>()._has_bits_);
  static const ::gazebo::msgs::Pose& pose(const Hydra_Paddle* msg);
  static void set_has_pose(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_button_bumper(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_button_1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_button_2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_button_3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_button_4(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_button_joy(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_button_center(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_joy_x(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_joy_y(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_trigger(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::gazebo::msgs::Pose&
Hydra_Paddle::_Internal::pose(const Hydra_Paddle* msg) {
  return *msg->pose_;
}
void Hydra_Paddle::clear_pose() {
  if (pose_ != nullptr) pose_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Hydra_Paddle::Hydra_Paddle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.Hydra.Paddle)
}
Hydra_Paddle::Hydra_Paddle(const Hydra_Paddle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pose()) {
    pose_ = new ::gazebo::msgs::Pose(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  ::memcpy(&button_bumper_, &from.button_bumper_,
    static_cast<size_t>(reinterpret_cast<char*>(&trigger_) -
    reinterpret_cast<char*>(&button_bumper_)) + sizeof(trigger_));
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.Hydra.Paddle)
}

void Hydra_Paddle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Hydra_Paddle_hydra_2eproto.base);
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trigger_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(trigger_));
}

Hydra_Paddle::~Hydra_Paddle() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.Hydra.Paddle)
  SharedDtor();
}

void Hydra_Paddle::SharedDtor() {
  if (this != internal_default_instance()) delete pose_;
}

void Hydra_Paddle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Hydra_Paddle& Hydra_Paddle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Hydra_Paddle_hydra_2eproto.base);
  return *internal_default_instance();
}


void Hydra_Paddle::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.Hydra.Paddle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(pose_ != nullptr);
    pose_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&button_bumper_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&button_center_) -
        reinterpret_cast<char*>(&button_bumper_)) + sizeof(button_center_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&joy_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trigger_) -
        reinterpret_cast<char*>(&joy_x_)) + sizeof(trigger_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Hydra_Paddle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .gazebo.msgs.Pose pose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool button_bumper = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_button_bumper(&has_bits);
          button_bumper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool button_1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_button_1(&has_bits);
          button_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool button_2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_button_2(&has_bits);
          button_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool button_3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_button_3(&has_bits);
          button_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool button_4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_button_4(&has_bits);
          button_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool button_joy = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_button_joy(&has_bits);
          button_joy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool button_center = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_button_center(&has_bits);
          button_center_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double joy_x = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_joy_x(&has_bits);
          joy_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double joy_y = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_joy_y(&has_bits);
          joy_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double trigger = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_trigger(&has_bits);
          trigger_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Hydra_Paddle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.Hydra.Paddle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gazebo.msgs.Pose pose = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pose(this), target, stream);
  }

  // required bool button_bumper = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_button_bumper(), target);
  }

  // required bool button_1 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_button_1(), target);
  }

  // required bool button_2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_button_2(), target);
  }

  // required bool button_3 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_button_3(), target);
  }

  // required bool button_4 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_button_4(), target);
  }

  // required bool button_joy = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_button_joy(), target);
  }

  // required bool button_center = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_button_center(), target);
  }

  // required double joy_x = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_joy_x(), target);
  }

  // required double joy_y = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_joy_y(), target);
  }

  // required double trigger = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_trigger(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.Hydra.Paddle)
  return target;
}

size_t Hydra_Paddle::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gazebo.msgs.Hydra.Paddle)
  size_t total_size = 0;

  if (_internal_has_pose()) {
    // required .gazebo.msgs.Pose pose = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  if (_internal_has_button_bumper()) {
    // required bool button_bumper = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_button_1()) {
    // required bool button_1 = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_button_2()) {
    // required bool button_2 = 4;
    total_size += 1 + 1;
  }

  if (_internal_has_button_3()) {
    // required bool button_3 = 5;
    total_size += 1 + 1;
  }

  if (_internal_has_button_4()) {
    // required bool button_4 = 6;
    total_size += 1 + 1;
  }

  if (_internal_has_button_joy()) {
    // required bool button_joy = 7;
    total_size += 1 + 1;
  }

  if (_internal_has_button_center()) {
    // required bool button_center = 8;
    total_size += 1 + 1;
  }

  if (_internal_has_joy_x()) {
    // required double joy_x = 9;
    total_size += 1 + 8;
  }

  if (_internal_has_joy_y()) {
    // required double joy_y = 10;
    total_size += 1 + 8;
  }

  if (_internal_has_trigger()) {
    // required double trigger = 11;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t Hydra_Paddle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.Hydra.Paddle)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000007ff) ^ 0x000007ff) == 0) {  // All required fields are present.
    // required .gazebo.msgs.Pose pose = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);

    // required bool button_bumper = 2;
    total_size += 1 + 1;

    // required bool button_1 = 3;
    total_size += 1 + 1;

    // required bool button_2 = 4;
    total_size += 1 + 1;

    // required bool button_3 = 5;
    total_size += 1 + 1;

    // required bool button_4 = 6;
    total_size += 1 + 1;

    // required bool button_joy = 7;
    total_size += 1 + 1;

    // required bool button_center = 8;
    total_size += 1 + 1;

    // required double joy_x = 9;
    total_size += 1 + 8;

    // required double joy_y = 10;
    total_size += 1 + 8;

    // required double trigger = 11;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Hydra_Paddle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.Hydra.Paddle)
  GOOGLE_DCHECK_NE(&from, this);
  const Hydra_Paddle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Hydra_Paddle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.Hydra.Paddle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.Hydra.Paddle)
    MergeFrom(*source);
  }
}

void Hydra_Paddle::MergeFrom(const Hydra_Paddle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.Hydra.Paddle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_pose()->::gazebo::msgs::Pose::MergeFrom(from._internal_pose());
    }
    if (cached_has_bits & 0x00000002u) {
      button_bumper_ = from.button_bumper_;
    }
    if (cached_has_bits & 0x00000004u) {
      button_1_ = from.button_1_;
    }
    if (cached_has_bits & 0x00000008u) {
      button_2_ = from.button_2_;
    }
    if (cached_has_bits & 0x00000010u) {
      button_3_ = from.button_3_;
    }
    if (cached_has_bits & 0x00000020u) {
      button_4_ = from.button_4_;
    }
    if (cached_has_bits & 0x00000040u) {
      button_joy_ = from.button_joy_;
    }
    if (cached_has_bits & 0x00000080u) {
      button_center_ = from.button_center_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      joy_x_ = from.joy_x_;
    }
    if (cached_has_bits & 0x00000200u) {
      joy_y_ = from.joy_y_;
    }
    if (cached_has_bits & 0x00000400u) {
      trigger_ = from.trigger_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Hydra_Paddle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.Hydra.Paddle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hydra_Paddle::CopyFrom(const Hydra_Paddle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.Hydra.Paddle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hydra_Paddle::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;
  if (_internal_has_pose()) {
    if (!pose_->IsInitialized()) return false;
  }
  return true;
}

void Hydra_Paddle::InternalSwap(Hydra_Paddle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pose_, other->pose_);
  swap(button_bumper_, other->button_bumper_);
  swap(button_1_, other->button_1_);
  swap(button_2_, other->button_2_);
  swap(button_3_, other->button_3_);
  swap(button_4_, other->button_4_);
  swap(button_joy_, other->button_joy_);
  swap(button_center_, other->button_center_);
  swap(joy_x_, other->joy_x_);
  swap(joy_y_, other->joy_y_);
  swap(trigger_, other->trigger_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Hydra_Paddle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Hydra::InitAsDefaultInstance() {
  ::gazebo::msgs::_Hydra_default_instance_._instance.get_mutable()->right_ = const_cast< ::gazebo::msgs::Hydra_Paddle*>(
      ::gazebo::msgs::Hydra_Paddle::internal_default_instance());
  ::gazebo::msgs::_Hydra_default_instance_._instance.get_mutable()->left_ = const_cast< ::gazebo::msgs::Hydra_Paddle*>(
      ::gazebo::msgs::Hydra_Paddle::internal_default_instance());
}
class Hydra::_Internal {
 public:
  using HasBits = decltype(std::declval<Hydra>()._has_bits_);
  static const ::gazebo::msgs::Hydra_Paddle& right(const Hydra* msg);
  static void set_has_right(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::gazebo::msgs::Hydra_Paddle& left(const Hydra* msg);
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::gazebo::msgs::Hydra_Paddle&
Hydra::_Internal::right(const Hydra* msg) {
  return *msg->right_;
}
const ::gazebo::msgs::Hydra_Paddle&
Hydra::_Internal::left(const Hydra* msg) {
  return *msg->left_;
}
Hydra::Hydra()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.Hydra)
}
Hydra::Hydra(const Hydra& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_right()) {
    right_ = new ::gazebo::msgs::Hydra_Paddle(*from.right_);
  } else {
    right_ = nullptr;
  }
  if (from._internal_has_left()) {
    left_ = new ::gazebo::msgs::Hydra_Paddle(*from.left_);
  } else {
    left_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.Hydra)
}

void Hydra::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Hydra_hydra_2eproto.base);
  ::memset(&right_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&left_) -
      reinterpret_cast<char*>(&right_)) + sizeof(left_));
}

Hydra::~Hydra() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.Hydra)
  SharedDtor();
}

void Hydra::SharedDtor() {
  if (this != internal_default_instance()) delete right_;
  if (this != internal_default_instance()) delete left_;
}

void Hydra::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Hydra& Hydra::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Hydra_hydra_2eproto.base);
  return *internal_default_instance();
}


void Hydra::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.Hydra)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(right_ != nullptr);
      right_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(left_ != nullptr);
      left_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Hydra::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .gazebo.msgs.Hydra.Paddle right = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .gazebo.msgs.Hydra.Paddle left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Hydra::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.Hydra)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gazebo.msgs.Hydra.Paddle right = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::right(this), target, stream);
  }

  // required .gazebo.msgs.Hydra.Paddle left = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::left(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.Hydra)
  return target;
}

size_t Hydra::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gazebo.msgs.Hydra)
  size_t total_size = 0;

  if (_internal_has_right()) {
    // required .gazebo.msgs.Hydra.Paddle right = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_);
  }

  if (_internal_has_left()) {
    // required .gazebo.msgs.Hydra.Paddle left = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *left_);
  }

  return total_size;
}
size_t Hydra::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.Hydra)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .gazebo.msgs.Hydra.Paddle right = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_);

    // required .gazebo.msgs.Hydra.Paddle left = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *left_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Hydra::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.Hydra)
  GOOGLE_DCHECK_NE(&from, this);
  const Hydra* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Hydra>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.Hydra)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.Hydra)
    MergeFrom(*source);
  }
}

void Hydra::MergeFrom(const Hydra& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.Hydra)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_right()->::gazebo::msgs::Hydra_Paddle::MergeFrom(from._internal_right());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_left()->::gazebo::msgs::Hydra_Paddle::MergeFrom(from._internal_left());
    }
  }
}

void Hydra::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.Hydra)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hydra::CopyFrom(const Hydra& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.Hydra)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hydra::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (_internal_has_right()) {
    if (!right_->IsInitialized()) return false;
  }
  if (_internal_has_left()) {
    if (!left_->IsInitialized()) return false;
  }
  return true;
}

void Hydra::InternalSwap(Hydra* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(right_, other->right_);
  swap(left_, other->left_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Hydra::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gazebo::msgs::Hydra_Paddle* Arena::CreateMaybeMessage< ::gazebo::msgs::Hydra_Paddle >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::Hydra_Paddle >(arena);
}
template<> PROTOBUF_NOINLINE ::gazebo::msgs::Hydra* Arena::CreateMaybeMessage< ::gazebo::msgs::Hydra >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::Hydra >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

GZ_REGISTER_STATIC_MSG("gazebo.msgs.Hydra", Hydra)
// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
