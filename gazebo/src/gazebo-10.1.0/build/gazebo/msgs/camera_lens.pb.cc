// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camera_lens.proto

#include "camera_lens.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace gazebo {
namespace msgs {
class CameraLensDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraLens> _instance;
} _CameraLens_default_instance_;
}  // namespace msgs
}  // namespace gazebo
static void InitDefaultsscc_info_CameraLens_camera_5flens_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_CameraLens_default_instance_;
    new (ptr) ::gazebo::msgs::CameraLens();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::CameraLens::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CameraLens_camera_5flens_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CameraLens_camera_5flens_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_camera_5flens_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_camera_5flens_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_camera_5flens_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_camera_5flens_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::CameraLens, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::CameraLens, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::CameraLens, type_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::CameraLens, c1_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::CameraLens, c2_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::CameraLens, c3_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::CameraLens, f_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::CameraLens, fun_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::CameraLens, scale_to_hfov_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::CameraLens, cutoff_angle_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::CameraLens, hfov_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::CameraLens, env_texture_size_),
  0,
  2,
  3,
  4,
  5,
  1,
  7,
  6,
  9,
  8,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::gazebo::msgs::CameraLens)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_CameraLens_default_instance_),
};

const char descriptor_table_protodef_camera_5flens_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021camera_lens.proto\022\013gazebo.msgs\"\253\001\n\nCam"
  "eraLens\022\014\n\004type\030\001 \002(\t\022\n\n\002c1\030\002 \001(\001\022\n\n\002c2\030"
  "\003 \001(\001\022\n\n\002c3\030\004 \001(\001\022\t\n\001f\030\005 \001(\001\022\013\n\003fun\030\006 \001("
  "\t\022\025\n\rscale_to_hfov\030\007 \001(\010\022\024\n\014cutoff_angle"
  "\030\010 \001(\001\022\014\n\004hfov\030\t \001(\001\022\030\n\020env_texture_size"
  "\030\n \001(\005"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_camera_5flens_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_camera_5flens_2eproto_sccs[1] = {
  &scc_info_CameraLens_camera_5flens_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_camera_5flens_2eproto_once;
static bool descriptor_table_camera_5flens_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_camera_5flens_2eproto = {
  &descriptor_table_camera_5flens_2eproto_initialized, descriptor_table_protodef_camera_5flens_2eproto, "camera_lens.proto", 206,
  &descriptor_table_camera_5flens_2eproto_once, descriptor_table_camera_5flens_2eproto_sccs, descriptor_table_camera_5flens_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_camera_5flens_2eproto::offsets,
  file_level_metadata_camera_5flens_2eproto, 1, file_level_enum_descriptors_camera_5flens_2eproto, file_level_service_descriptors_camera_5flens_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_camera_5flens_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_camera_5flens_2eproto), true);
namespace gazebo {
namespace msgs {

// ===================================================================

void CameraLens::InitAsDefaultInstance() {
}
class CameraLens::_Internal {
 public:
  using HasBits = decltype(std::declval<CameraLens>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_c1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_c2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_c3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fun(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_scale_to_hfov(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_cutoff_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_hfov(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_env_texture_size(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CameraLens::CameraLens()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.CameraLens)
}
CameraLens::CameraLens(const CameraLens& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  fun_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fun()) {
    fun_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fun_);
  }
  ::memcpy(&c1_, &from.c1_,
    static_cast<size_t>(reinterpret_cast<char*>(&hfov_) -
    reinterpret_cast<char*>(&c1_)) + sizeof(hfov_));
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.CameraLens)
}

void CameraLens::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CameraLens_camera_5flens_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fun_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&c1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hfov_) -
      reinterpret_cast<char*>(&c1_)) + sizeof(hfov_));
}

CameraLens::~CameraLens() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.CameraLens)
  SharedDtor();
}

void CameraLens::SharedDtor() {
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fun_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CameraLens::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraLens& CameraLens::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraLens_camera_5flens_2eproto.base);
  return *internal_default_instance();
}


void CameraLens::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.CameraLens)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      fun_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&c1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scale_to_hfov_) -
        reinterpret_cast<char*>(&c1_)) + sizeof(scale_to_hfov_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&env_texture_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hfov_) -
        reinterpret_cast<char*>(&env_texture_size_)) + sizeof(hfov_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CameraLens::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gazebo.msgs.CameraLens.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double c1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_c1(&has_bits);
          c1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double c2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_c2(&has_bits);
          c2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double c3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_c3(&has_bits);
          c3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double f = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_f(&has_bits);
          f_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string fun = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_fun();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gazebo.msgs.CameraLens.fun");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool scale_to_hfov = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_scale_to_hfov(&has_bits);
          scale_to_hfov_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double cutoff_angle = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_cutoff_angle(&has_bits);
          cutoff_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double hfov = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_hfov(&has_bits);
          hfov_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 env_texture_size = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_env_texture_size(&has_bits);
          env_texture_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraLens::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.CameraLens)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.CameraLens.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // optional double c1 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_c1(), target);
  }

  // optional double c2 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_c2(), target);
  }

  // optional double c3 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_c3(), target);
  }

  // optional double f = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_f(), target);
  }

  // optional string fun = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fun().data(), static_cast<int>(this->_internal_fun().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.CameraLens.fun");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_fun(), target);
  }

  // optional bool scale_to_hfov = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_scale_to_hfov(), target);
  }

  // optional double cutoff_angle = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_cutoff_angle(), target);
  }

  // optional double hfov = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_hfov(), target);
  }

  // optional int32 env_texture_size = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_env_texture_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.CameraLens)
  return target;
}

size_t CameraLens::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.CameraLens)
  size_t total_size = 0;

  // required string type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional string fun = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fun());
    }

    // optional double c1 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double c2 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double c3 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double f = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double cutoff_angle = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional bool scale_to_hfov = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int32 env_texture_size = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_env_texture_size());
    }

    // optional double hfov = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraLens::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.CameraLens)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraLens* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraLens>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.CameraLens)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.CameraLens)
    MergeFrom(*source);
  }
}

void CameraLens::MergeFrom(const CameraLens& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.CameraLens)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      fun_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fun_);
    }
    if (cached_has_bits & 0x00000004u) {
      c1_ = from.c1_;
    }
    if (cached_has_bits & 0x00000008u) {
      c2_ = from.c2_;
    }
    if (cached_has_bits & 0x00000010u) {
      c3_ = from.c3_;
    }
    if (cached_has_bits & 0x00000020u) {
      f_ = from.f_;
    }
    if (cached_has_bits & 0x00000040u) {
      cutoff_angle_ = from.cutoff_angle_;
    }
    if (cached_has_bits & 0x00000080u) {
      scale_to_hfov_ = from.scale_to_hfov_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      env_texture_size_ = from.env_texture_size_;
    }
    if (cached_has_bits & 0x00000200u) {
      hfov_ = from.hfov_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CameraLens::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.CameraLens)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraLens::CopyFrom(const CameraLens& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.CameraLens)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraLens::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CameraLens::InternalSwap(CameraLens* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fun_.Swap(&other->fun_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(c1_, other->c1_);
  swap(c2_, other->c2_);
  swap(c3_, other->c3_);
  swap(f_, other->f_);
  swap(cutoff_angle_, other->cutoff_angle_);
  swap(scale_to_hfov_, other->scale_to_hfov_);
  swap(env_texture_size_, other->env_texture_size_);
  swap(hfov_, other->hfov_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraLens::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gazebo::msgs::CameraLens* Arena::CreateMaybeMessage< ::gazebo::msgs::CameraLens >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::CameraLens >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

GZ_REGISTER_STATIC_MSG("gazebo.msgs.CameraLens", CameraLens)
// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
