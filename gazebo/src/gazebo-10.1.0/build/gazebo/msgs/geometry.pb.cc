// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geometry.proto

#include "geometry.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_boxgeom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BoxGeom_boxgeom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cylindergeom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CylinderGeom_cylindergeom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_heightmapgeom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_HeightmapGeom_heightmapgeom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_imagegeom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ImageGeom_imagegeom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_meshgeom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MeshGeom_meshgeom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_planegeom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PlaneGeom_planegeom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_polylinegeom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Polyline_polylinegeom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spheregeom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SphereGeom_spheregeom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vector3d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3d_vector3d_2eproto;
namespace gazebo {
namespace msgs {
class GeometryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Geometry> _instance;
} _Geometry_default_instance_;
}  // namespace msgs
}  // namespace gazebo
static void InitDefaultsscc_info_Geometry_geometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_Geometry_default_instance_;
    new (ptr) ::gazebo::msgs::Geometry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::Geometry::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_Geometry_geometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_Geometry_geometry_2eproto}, {
      &scc_info_BoxGeom_boxgeom_2eproto.base,
      &scc_info_CylinderGeom_cylindergeom_2eproto.base,
      &scc_info_PlaneGeom_planegeom_2eproto.base,
      &scc_info_SphereGeom_spheregeom_2eproto.base,
      &scc_info_ImageGeom_imagegeom_2eproto.base,
      &scc_info_HeightmapGeom_heightmapgeom_2eproto.base,
      &scc_info_MeshGeom_meshgeom_2eproto.base,
      &scc_info_Vector3d_vector3d_2eproto.base,
      &scc_info_Polyline_polylinegeom_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_geometry_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_geometry_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_geometry_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_geometry_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Geometry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Geometry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Geometry, type_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Geometry, box_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Geometry, cylinder_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Geometry, plane_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Geometry, sphere_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Geometry, image_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Geometry, heightmap_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Geometry, mesh_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Geometry, points_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Geometry, polyline_),
  7,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::gazebo::msgs::Geometry)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_Geometry_default_instance_),
};

const char descriptor_table_protodef_geometry_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016geometry.proto\022\013gazebo.msgs\032\rboxgeom.p"
  "roto\032\022cylindergeom.proto\032\020spheregeom.pro"
  "to\032\017planegeom.proto\032\017imagegeom.proto\032\023he"
  "ightmapgeom.proto\032\016meshgeom.proto\032\016vecto"
  "r3d.proto\032\022polylinegeom.proto\"\265\004\n\010Geomet"
  "ry\022(\n\004type\030\001 \001(\0162\032.gazebo.msgs.Geometry."
  "Type\022!\n\003box\030\002 \001(\0132\024.gazebo.msgs.BoxGeom\022"
  "+\n\010cylinder\030\003 \001(\0132\031.gazebo.msgs.Cylinder"
  "Geom\022%\n\005plane\030\004 \001(\0132\026.gazebo.msgs.PlaneG"
  "eom\022\'\n\006sphere\030\005 \001(\0132\027.gazebo.msgs.Sphere"
  "Geom\022%\n\005image\030\006 \001(\0132\026.gazebo.msgs.ImageG"
  "eom\022-\n\theightmap\030\007 \001(\0132\032.gazebo.msgs.Hei"
  "ghtmapGeom\022#\n\004mesh\030\010 \001(\0132\025.gazebo.msgs.M"
  "eshGeom\022%\n\006points\030\t \003(\0132\025.gazebo.msgs.Ve"
  "ctor3d\022\'\n\010polyline\030\n \003(\0132\025.gazebo.msgs.P"
  "olyline\"\223\001\n\004Type\022\007\n\003BOX\020\001\022\014\n\010CYLINDER\020\002\022"
  "\n\n\006SPHERE\020\003\022\t\n\005PLANE\020\004\022\t\n\005IMAGE\020\005\022\r\n\tHEI"
  "GHTMAP\020\006\022\010\n\004MESH\020\007\022\020\n\014TRIANGLE_FAN\020\010\022\016\n\n"
  "LINE_STRIP\020\t\022\014\n\010POLYLINE\020\n\022\t\n\005EMPTY\020\013"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_geometry_2eproto_deps[9] = {
  &::descriptor_table_boxgeom_2eproto,
  &::descriptor_table_cylindergeom_2eproto,
  &::descriptor_table_heightmapgeom_2eproto,
  &::descriptor_table_imagegeom_2eproto,
  &::descriptor_table_meshgeom_2eproto,
  &::descriptor_table_planegeom_2eproto,
  &::descriptor_table_polylinegeom_2eproto,
  &::descriptor_table_spheregeom_2eproto,
  &::descriptor_table_vector3d_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_geometry_2eproto_sccs[1] = {
  &scc_info_Geometry_geometry_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_geometry_2eproto_once;
static bool descriptor_table_geometry_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_geometry_2eproto = {
  &descriptor_table_geometry_2eproto_initialized, descriptor_table_protodef_geometry_2eproto, "geometry.proto", 757,
  &descriptor_table_geometry_2eproto_once, descriptor_table_geometry_2eproto_sccs, descriptor_table_geometry_2eproto_deps, 1, 9,
  schemas, file_default_instances, TableStruct_geometry_2eproto::offsets,
  file_level_metadata_geometry_2eproto, 1, file_level_enum_descriptors_geometry_2eproto, file_level_service_descriptors_geometry_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_geometry_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_geometry_2eproto), true);
namespace gazebo {
namespace msgs {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Geometry_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_geometry_2eproto);
  return file_level_enum_descriptors_geometry_2eproto[0];
}
bool Geometry_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Geometry_Type Geometry::BOX;
constexpr Geometry_Type Geometry::CYLINDER;
constexpr Geometry_Type Geometry::SPHERE;
constexpr Geometry_Type Geometry::PLANE;
constexpr Geometry_Type Geometry::IMAGE;
constexpr Geometry_Type Geometry::HEIGHTMAP;
constexpr Geometry_Type Geometry::MESH;
constexpr Geometry_Type Geometry::TRIANGLE_FAN;
constexpr Geometry_Type Geometry::LINE_STRIP;
constexpr Geometry_Type Geometry::POLYLINE;
constexpr Geometry_Type Geometry::EMPTY;
constexpr Geometry_Type Geometry::Type_MIN;
constexpr Geometry_Type Geometry::Type_MAX;
constexpr int Geometry::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Geometry::InitAsDefaultInstance() {
  ::gazebo::msgs::_Geometry_default_instance_._instance.get_mutable()->box_ = const_cast< ::gazebo::msgs::BoxGeom*>(
      ::gazebo::msgs::BoxGeom::internal_default_instance());
  ::gazebo::msgs::_Geometry_default_instance_._instance.get_mutable()->cylinder_ = const_cast< ::gazebo::msgs::CylinderGeom*>(
      ::gazebo::msgs::CylinderGeom::internal_default_instance());
  ::gazebo::msgs::_Geometry_default_instance_._instance.get_mutable()->plane_ = const_cast< ::gazebo::msgs::PlaneGeom*>(
      ::gazebo::msgs::PlaneGeom::internal_default_instance());
  ::gazebo::msgs::_Geometry_default_instance_._instance.get_mutable()->sphere_ = const_cast< ::gazebo::msgs::SphereGeom*>(
      ::gazebo::msgs::SphereGeom::internal_default_instance());
  ::gazebo::msgs::_Geometry_default_instance_._instance.get_mutable()->image_ = const_cast< ::gazebo::msgs::ImageGeom*>(
      ::gazebo::msgs::ImageGeom::internal_default_instance());
  ::gazebo::msgs::_Geometry_default_instance_._instance.get_mutable()->heightmap_ = const_cast< ::gazebo::msgs::HeightmapGeom*>(
      ::gazebo::msgs::HeightmapGeom::internal_default_instance());
  ::gazebo::msgs::_Geometry_default_instance_._instance.get_mutable()->mesh_ = const_cast< ::gazebo::msgs::MeshGeom*>(
      ::gazebo::msgs::MeshGeom::internal_default_instance());
}
class Geometry::_Internal {
 public:
  using HasBits = decltype(std::declval<Geometry>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::gazebo::msgs::BoxGeom& box(const Geometry* msg);
  static void set_has_box(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::gazebo::msgs::CylinderGeom& cylinder(const Geometry* msg);
  static void set_has_cylinder(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::gazebo::msgs::PlaneGeom& plane(const Geometry* msg);
  static void set_has_plane(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::gazebo::msgs::SphereGeom& sphere(const Geometry* msg);
  static void set_has_sphere(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::gazebo::msgs::ImageGeom& image(const Geometry* msg);
  static void set_has_image(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::gazebo::msgs::HeightmapGeom& heightmap(const Geometry* msg);
  static void set_has_heightmap(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::gazebo::msgs::MeshGeom& mesh(const Geometry* msg);
  static void set_has_mesh(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::gazebo::msgs::BoxGeom&
Geometry::_Internal::box(const Geometry* msg) {
  return *msg->box_;
}
const ::gazebo::msgs::CylinderGeom&
Geometry::_Internal::cylinder(const Geometry* msg) {
  return *msg->cylinder_;
}
const ::gazebo::msgs::PlaneGeom&
Geometry::_Internal::plane(const Geometry* msg) {
  return *msg->plane_;
}
const ::gazebo::msgs::SphereGeom&
Geometry::_Internal::sphere(const Geometry* msg) {
  return *msg->sphere_;
}
const ::gazebo::msgs::ImageGeom&
Geometry::_Internal::image(const Geometry* msg) {
  return *msg->image_;
}
const ::gazebo::msgs::HeightmapGeom&
Geometry::_Internal::heightmap(const Geometry* msg) {
  return *msg->heightmap_;
}
const ::gazebo::msgs::MeshGeom&
Geometry::_Internal::mesh(const Geometry* msg) {
  return *msg->mesh_;
}
void Geometry::clear_box() {
  if (box_ != nullptr) box_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Geometry::clear_cylinder() {
  if (cylinder_ != nullptr) cylinder_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Geometry::clear_plane() {
  if (plane_ != nullptr) plane_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void Geometry::clear_sphere() {
  if (sphere_ != nullptr) sphere_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void Geometry::clear_image() {
  if (image_ != nullptr) image_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void Geometry::clear_heightmap() {
  if (heightmap_ != nullptr) heightmap_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void Geometry::clear_mesh() {
  if (mesh_ != nullptr) mesh_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void Geometry::clear_points() {
  points_.Clear();
}
void Geometry::clear_polyline() {
  polyline_.Clear();
}
Geometry::Geometry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.Geometry)
}
Geometry::Geometry(const Geometry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      points_(from.points_),
      polyline_(from.polyline_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_box()) {
    box_ = new ::gazebo::msgs::BoxGeom(*from.box_);
  } else {
    box_ = nullptr;
  }
  if (from._internal_has_cylinder()) {
    cylinder_ = new ::gazebo::msgs::CylinderGeom(*from.cylinder_);
  } else {
    cylinder_ = nullptr;
  }
  if (from._internal_has_plane()) {
    plane_ = new ::gazebo::msgs::PlaneGeom(*from.plane_);
  } else {
    plane_ = nullptr;
  }
  if (from._internal_has_sphere()) {
    sphere_ = new ::gazebo::msgs::SphereGeom(*from.sphere_);
  } else {
    sphere_ = nullptr;
  }
  if (from._internal_has_image()) {
    image_ = new ::gazebo::msgs::ImageGeom(*from.image_);
  } else {
    image_ = nullptr;
  }
  if (from._internal_has_heightmap()) {
    heightmap_ = new ::gazebo::msgs::HeightmapGeom(*from.heightmap_);
  } else {
    heightmap_ = nullptr;
  }
  if (from._internal_has_mesh()) {
    mesh_ = new ::gazebo::msgs::MeshGeom(*from.mesh_);
  } else {
    mesh_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.Geometry)
}

void Geometry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Geometry_geometry_2eproto.base);
  ::memset(&box_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mesh_) -
      reinterpret_cast<char*>(&box_)) + sizeof(mesh_));
  type_ = 1;
}

Geometry::~Geometry() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.Geometry)
  SharedDtor();
}

void Geometry::SharedDtor() {
  if (this != internal_default_instance()) delete box_;
  if (this != internal_default_instance()) delete cylinder_;
  if (this != internal_default_instance()) delete plane_;
  if (this != internal_default_instance()) delete sphere_;
  if (this != internal_default_instance()) delete image_;
  if (this != internal_default_instance()) delete heightmap_;
  if (this != internal_default_instance()) delete mesh_;
}

void Geometry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Geometry& Geometry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Geometry_geometry_2eproto.base);
  return *internal_default_instance();
}


void Geometry::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.Geometry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  polyline_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(box_ != nullptr);
      box_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cylinder_ != nullptr);
      cylinder_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(plane_ != nullptr);
      plane_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(sphere_ != nullptr);
      sphere_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(image_ != nullptr);
      image_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(heightmap_ != nullptr);
      heightmap_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(mesh_ != nullptr);
      mesh_->Clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Geometry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .gazebo.msgs.Geometry.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::gazebo::msgs::Geometry_Type_IsValid(val))) {
            _internal_set_type(static_cast<::gazebo::msgs::Geometry_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.BoxGeom box = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_box(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.CylinderGeom cylinder = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cylinder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.PlaneGeom plane = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_plane(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.SphereGeom sphere = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sphere(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.ImageGeom image = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.HeightmapGeom heightmap = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_heightmap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.MeshGeom mesh = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_mesh(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .gazebo.msgs.Vector3d points = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .gazebo.msgs.Polyline polyline = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_polyline(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Geometry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.Geometry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .gazebo.msgs.Geometry.Type type = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional .gazebo.msgs.BoxGeom box = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::box(this), target, stream);
  }

  // optional .gazebo.msgs.CylinderGeom cylinder = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::cylinder(this), target, stream);
  }

  // optional .gazebo.msgs.PlaneGeom plane = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::plane(this), target, stream);
  }

  // optional .gazebo.msgs.SphereGeom sphere = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::sphere(this), target, stream);
  }

  // optional .gazebo.msgs.ImageGeom image = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::image(this), target, stream);
  }

  // optional .gazebo.msgs.HeightmapGeom heightmap = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::heightmap(this), target, stream);
  }

  // optional .gazebo.msgs.MeshGeom mesh = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::mesh(this), target, stream);
  }

  // repeated .gazebo.msgs.Vector3d points = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_points(i), target, stream);
  }

  // repeated .gazebo.msgs.Polyline polyline = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_polyline_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_polyline(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.Geometry)
  return target;
}

size_t Geometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.Geometry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gazebo.msgs.Vector3d points = 9;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gazebo.msgs.Polyline polyline = 10;
  total_size += 1UL * this->_internal_polyline_size();
  for (const auto& msg : this->polyline_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .gazebo.msgs.BoxGeom box = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *box_);
    }

    // optional .gazebo.msgs.CylinderGeom cylinder = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cylinder_);
    }

    // optional .gazebo.msgs.PlaneGeom plane = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *plane_);
    }

    // optional .gazebo.msgs.SphereGeom sphere = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sphere_);
    }

    // optional .gazebo.msgs.ImageGeom image = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *image_);
    }

    // optional .gazebo.msgs.HeightmapGeom heightmap = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *heightmap_);
    }

    // optional .gazebo.msgs.MeshGeom mesh = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mesh_);
    }

    // optional .gazebo.msgs.Geometry.Type type = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Geometry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.Geometry)
  GOOGLE_DCHECK_NE(&from, this);
  const Geometry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Geometry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.Geometry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.Geometry)
    MergeFrom(*source);
  }
}

void Geometry::MergeFrom(const Geometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.Geometry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  polyline_.MergeFrom(from.polyline_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_box()->::gazebo::msgs::BoxGeom::MergeFrom(from._internal_box());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cylinder()->::gazebo::msgs::CylinderGeom::MergeFrom(from._internal_cylinder());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_plane()->::gazebo::msgs::PlaneGeom::MergeFrom(from._internal_plane());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_sphere()->::gazebo::msgs::SphereGeom::MergeFrom(from._internal_sphere());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_image()->::gazebo::msgs::ImageGeom::MergeFrom(from._internal_image());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_heightmap()->::gazebo::msgs::HeightmapGeom::MergeFrom(from._internal_heightmap());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_mesh()->::gazebo::msgs::MeshGeom::MergeFrom(from._internal_mesh());
    }
    if (cached_has_bits & 0x00000080u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Geometry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.Geometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Geometry::CopyFrom(const Geometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.Geometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Geometry::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(points_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(polyline_)) return false;
  if (_internal_has_box()) {
    if (!box_->IsInitialized()) return false;
  }
  if (_internal_has_cylinder()) {
    if (!cylinder_->IsInitialized()) return false;
  }
  if (_internal_has_plane()) {
    if (!plane_->IsInitialized()) return false;
  }
  if (_internal_has_sphere()) {
    if (!sphere_->IsInitialized()) return false;
  }
  if (_internal_has_image()) {
    if (!image_->IsInitialized()) return false;
  }
  if (_internal_has_heightmap()) {
    if (!heightmap_->IsInitialized()) return false;
  }
  if (_internal_has_mesh()) {
    if (!mesh_->IsInitialized()) return false;
  }
  return true;
}

void Geometry::InternalSwap(Geometry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  points_.InternalSwap(&other->points_);
  polyline_.InternalSwap(&other->polyline_);
  swap(box_, other->box_);
  swap(cylinder_, other->cylinder_);
  swap(plane_, other->plane_);
  swap(sphere_, other->sphere_);
  swap(image_, other->image_);
  swap(heightmap_, other->heightmap_);
  swap(mesh_, other->mesh_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Geometry::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gazebo::msgs::Geometry* Arena::CreateMaybeMessage< ::gazebo::msgs::Geometry >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::Geometry >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

GZ_REGISTER_STATIC_MSG("gazebo.msgs.Geometry", Geometry)
// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
