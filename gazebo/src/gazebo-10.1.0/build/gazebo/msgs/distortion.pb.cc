// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: distortion.proto

#include "distortion.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_vector2d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector2d_vector2d_2eproto;
namespace gazebo {
namespace msgs {
class DistortionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Distortion> _instance;
} _Distortion_default_instance_;
}  // namespace msgs
}  // namespace gazebo
static void InitDefaultsscc_info_Distortion_distortion_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_Distortion_default_instance_;
    new (ptr) ::gazebo::msgs::Distortion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::Distortion::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Distortion_distortion_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Distortion_distortion_2eproto}, {
      &scc_info_Vector2d_vector2d_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_distortion_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_distortion_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_distortion_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_distortion_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Distortion, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Distortion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Distortion, center_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Distortion, k1_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Distortion, k2_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Distortion, k3_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Distortion, p1_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Distortion, p2_),
  0,
  1,
  2,
  3,
  4,
  5,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::gazebo::msgs::Distortion)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_Distortion_default_instance_),
};

const char descriptor_table_protodef_distortion_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020distortion.proto\022\013gazebo.msgs\032\016vector2"
  "d.proto\"o\n\nDistortion\022%\n\006center\030\001 \001(\0132\025."
  "gazebo.msgs.Vector2d\022\n\n\002k1\030\002 \001(\001\022\n\n\002k2\030\003"
  " \001(\001\022\n\n\002k3\030\004 \001(\001\022\n\n\002p1\030\005 \001(\001\022\n\n\002p2\030\006 \001(\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_distortion_2eproto_deps[1] = {
  &::descriptor_table_vector2d_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_distortion_2eproto_sccs[1] = {
  &scc_info_Distortion_distortion_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_distortion_2eproto_once;
static bool descriptor_table_distortion_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_distortion_2eproto = {
  &descriptor_table_distortion_2eproto_initialized, descriptor_table_protodef_distortion_2eproto, "distortion.proto", 160,
  &descriptor_table_distortion_2eproto_once, descriptor_table_distortion_2eproto_sccs, descriptor_table_distortion_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_distortion_2eproto::offsets,
  file_level_metadata_distortion_2eproto, 1, file_level_enum_descriptors_distortion_2eproto, file_level_service_descriptors_distortion_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_distortion_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_distortion_2eproto), true);
namespace gazebo {
namespace msgs {

// ===================================================================

void Distortion::InitAsDefaultInstance() {
  ::gazebo::msgs::_Distortion_default_instance_._instance.get_mutable()->center_ = const_cast< ::gazebo::msgs::Vector2d*>(
      ::gazebo::msgs::Vector2d::internal_default_instance());
}
class Distortion::_Internal {
 public:
  using HasBits = decltype(std::declval<Distortion>()._has_bits_);
  static const ::gazebo::msgs::Vector2d& center(const Distortion* msg);
  static void set_has_center(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_k1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_k2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_k3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_p1(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_p2(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::gazebo::msgs::Vector2d&
Distortion::_Internal::center(const Distortion* msg) {
  return *msg->center_;
}
void Distortion::clear_center() {
  if (center_ != nullptr) center_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Distortion::Distortion()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.Distortion)
}
Distortion::Distortion(const Distortion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_center()) {
    center_ = new ::gazebo::msgs::Vector2d(*from.center_);
  } else {
    center_ = nullptr;
  }
  ::memcpy(&k1_, &from.k1_,
    static_cast<size_t>(reinterpret_cast<char*>(&p2_) -
    reinterpret_cast<char*>(&k1_)) + sizeof(p2_));
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.Distortion)
}

void Distortion::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Distortion_distortion_2eproto.base);
  ::memset(&center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&p2_) -
      reinterpret_cast<char*>(&center_)) + sizeof(p2_));
}

Distortion::~Distortion() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.Distortion)
  SharedDtor();
}

void Distortion::SharedDtor() {
  if (this != internal_default_instance()) delete center_;
}

void Distortion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Distortion& Distortion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Distortion_distortion_2eproto.base);
  return *internal_default_instance();
}


void Distortion::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.Distortion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(center_ != nullptr);
    center_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&k1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&p2_) -
        reinterpret_cast<char*>(&k1_)) + sizeof(p2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Distortion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .gazebo.msgs.Vector2d center = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double k1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_k1(&has_bits);
          k1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double k2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_k2(&has_bits);
          k2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double k3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_k3(&has_bits);
          k3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double p1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_p1(&has_bits);
          p1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double p2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_p2(&has_bits);
          p2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Distortion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.Distortion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .gazebo.msgs.Vector2d center = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::center(this), target, stream);
  }

  // optional double k1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_k1(), target);
  }

  // optional double k2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_k2(), target);
  }

  // optional double k3 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_k3(), target);
  }

  // optional double p1 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_p1(), target);
  }

  // optional double p2 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_p2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.Distortion)
  return target;
}

size_t Distortion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.Distortion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .gazebo.msgs.Vector2d center = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *center_);
    }

    // optional double k1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double k2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double k3 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double p1 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double p2 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Distortion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.Distortion)
  GOOGLE_DCHECK_NE(&from, this);
  const Distortion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Distortion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.Distortion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.Distortion)
    MergeFrom(*source);
  }
}

void Distortion::MergeFrom(const Distortion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.Distortion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_center()->::gazebo::msgs::Vector2d::MergeFrom(from._internal_center());
    }
    if (cached_has_bits & 0x00000002u) {
      k1_ = from.k1_;
    }
    if (cached_has_bits & 0x00000004u) {
      k2_ = from.k2_;
    }
    if (cached_has_bits & 0x00000008u) {
      k3_ = from.k3_;
    }
    if (cached_has_bits & 0x00000010u) {
      p1_ = from.p1_;
    }
    if (cached_has_bits & 0x00000020u) {
      p2_ = from.p2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Distortion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.Distortion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Distortion::CopyFrom(const Distortion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.Distortion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Distortion::IsInitialized() const {
  if (_internal_has_center()) {
    if (!center_->IsInitialized()) return false;
  }
  return true;
}

void Distortion::InternalSwap(Distortion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(center_, other->center_);
  swap(k1_, other->k1_);
  swap(k2_, other->k2_);
  swap(k3_, other->k3_);
  swap(p1_, other->p1_);
  swap(p2_, other->p2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Distortion::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gazebo::msgs::Distortion* Arena::CreateMaybeMessage< ::gazebo::msgs::Distortion >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::Distortion >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

GZ_REGISTER_STATIC_MSG("gazebo.msgs.Distortion", Distortion)
// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
