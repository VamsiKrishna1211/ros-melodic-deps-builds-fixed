// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sonar.proto

#include "sonar.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pose_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Pose_pose_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vector3d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3d_vector3d_2eproto;
namespace gazebo {
namespace msgs {
class SonarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Sonar> _instance;
} _Sonar_default_instance_;
}  // namespace msgs
}  // namespace gazebo
static void InitDefaultsscc_info_Sonar_sonar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_Sonar_default_instance_;
    new (ptr) ::gazebo::msgs::Sonar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::Sonar::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Sonar_sonar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Sonar_sonar_2eproto}, {
      &scc_info_Pose_pose_2eproto.base,
      &scc_info_Vector3d_vector3d_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sonar_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_sonar_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sonar_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sonar_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Sonar, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Sonar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Sonar, frame_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Sonar, world_pose_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Sonar, range_min_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Sonar, range_max_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Sonar, radius_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Sonar, range_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Sonar, contact_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Sonar, geometry_),
  0,
  2,
  4,
  5,
  6,
  7,
  3,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::gazebo::msgs::Sonar)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_Sonar_default_instance_),
};

const char descriptor_table_protodef_sonar_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013sonar.proto\022\013gazebo.msgs\032\npose.proto\032\016"
  "vector3d.proto\"\274\001\n\005Sonar\022\r\n\005frame\030\001 \002(\t\022"
  "%\n\nworld_pose\030\002 \002(\0132\021.gazebo.msgs.Pose\022\021"
  "\n\trange_min\030\003 \002(\001\022\021\n\trange_max\030\004 \002(\001\022\016\n\006"
  "radius\030\005 \002(\001\022\r\n\005range\030\006 \002(\001\022&\n\007contact\030\007"
  " \001(\0132\025.gazebo.msgs.Vector3d\022\020\n\010geometry\030"
  "\010 \002(\t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sonar_2eproto_deps[2] = {
  &::descriptor_table_pose_2eproto,
  &::descriptor_table_vector3d_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_sonar_2eproto_sccs[1] = {
  &scc_info_Sonar_sonar_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sonar_2eproto_once;
static bool descriptor_table_sonar_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sonar_2eproto = {
  &descriptor_table_sonar_2eproto_initialized, descriptor_table_protodef_sonar_2eproto, "sonar.proto", 245,
  &descriptor_table_sonar_2eproto_once, descriptor_table_sonar_2eproto_sccs, descriptor_table_sonar_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_sonar_2eproto::offsets,
  file_level_metadata_sonar_2eproto, 1, file_level_enum_descriptors_sonar_2eproto, file_level_service_descriptors_sonar_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sonar_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_sonar_2eproto), true);
namespace gazebo {
namespace msgs {

// ===================================================================

void Sonar::InitAsDefaultInstance() {
  ::gazebo::msgs::_Sonar_default_instance_._instance.get_mutable()->world_pose_ = const_cast< ::gazebo::msgs::Pose*>(
      ::gazebo::msgs::Pose::internal_default_instance());
  ::gazebo::msgs::_Sonar_default_instance_._instance.get_mutable()->contact_ = const_cast< ::gazebo::msgs::Vector3d*>(
      ::gazebo::msgs::Vector3d::internal_default_instance());
}
class Sonar::_Internal {
 public:
  using HasBits = decltype(std::declval<Sonar>()._has_bits_);
  static void set_has_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::gazebo::msgs::Pose& world_pose(const Sonar* msg);
  static void set_has_world_pose(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_range_min(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_range_max(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::gazebo::msgs::Vector3d& contact(const Sonar* msg);
  static void set_has_contact(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_geometry(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::gazebo::msgs::Pose&
Sonar::_Internal::world_pose(const Sonar* msg) {
  return *msg->world_pose_;
}
const ::gazebo::msgs::Vector3d&
Sonar::_Internal::contact(const Sonar* msg) {
  return *msg->contact_;
}
void Sonar::clear_world_pose() {
  if (world_pose_ != nullptr) world_pose_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void Sonar::clear_contact() {
  if (contact_ != nullptr) contact_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
Sonar::Sonar()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.Sonar)
}
Sonar::Sonar(const Sonar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_frame()) {
    frame_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.frame_);
  }
  geometry_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_geometry()) {
    geometry_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.geometry_);
  }
  if (from._internal_has_world_pose()) {
    world_pose_ = new ::gazebo::msgs::Pose(*from.world_pose_);
  } else {
    world_pose_ = nullptr;
  }
  if (from._internal_has_contact()) {
    contact_ = new ::gazebo::msgs::Vector3d(*from.contact_);
  } else {
    contact_ = nullptr;
  }
  ::memcpy(&range_min_, &from.range_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&range_) -
    reinterpret_cast<char*>(&range_min_)) + sizeof(range_));
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.Sonar)
}

void Sonar::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Sonar_sonar_2eproto.base);
  frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geometry_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&world_pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_) -
      reinterpret_cast<char*>(&world_pose_)) + sizeof(range_));
}

Sonar::~Sonar() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.Sonar)
  SharedDtor();
}

void Sonar::SharedDtor() {
  frame_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geometry_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete world_pose_;
  if (this != internal_default_instance()) delete contact_;
}

void Sonar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Sonar& Sonar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Sonar_sonar_2eproto.base);
  return *internal_default_instance();
}


void Sonar::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.Sonar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      frame_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      geometry_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(world_pose_ != nullptr);
      world_pose_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(contact_ != nullptr);
      contact_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&range_min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&range_) -
        reinterpret_cast<char*>(&range_min_)) + sizeof(range_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Sonar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_frame();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gazebo.msgs.Sonar.frame");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .gazebo.msgs.Pose world_pose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_world_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double range_min = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_range_min(&has_bits);
          range_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double range_max = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_range_max(&has_bits);
          range_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double radius = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_radius(&has_bits);
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double range = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_range(&has_bits);
          range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.Vector3d contact = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_contact(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string geometry = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_geometry();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gazebo.msgs.Sonar.geometry");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Sonar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.Sonar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string frame = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_frame().data(), static_cast<int>(this->_internal_frame().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.Sonar.frame");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_frame(), target);
  }

  // required .gazebo.msgs.Pose world_pose = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::world_pose(this), target, stream);
  }

  // required double range_min = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_range_min(), target);
  }

  // required double range_max = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_range_max(), target);
  }

  // required double radius = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_radius(), target);
  }

  // required double range = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_range(), target);
  }

  // optional .gazebo.msgs.Vector3d contact = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::contact(this), target, stream);
  }

  // required string geometry = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_geometry().data(), static_cast<int>(this->_internal_geometry().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.Sonar.geometry");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_geometry(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.Sonar)
  return target;
}

size_t Sonar::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gazebo.msgs.Sonar)
  size_t total_size = 0;

  if (_internal_has_frame()) {
    // required string frame = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame());
  }

  if (_internal_has_geometry()) {
    // required string geometry = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_geometry());
  }

  if (_internal_has_world_pose()) {
    // required .gazebo.msgs.Pose world_pose = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *world_pose_);
  }

  if (_internal_has_range_min()) {
    // required double range_min = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_range_max()) {
    // required double range_max = 4;
    total_size += 1 + 8;
  }

  if (_internal_has_radius()) {
    // required double radius = 5;
    total_size += 1 + 8;
  }

  if (_internal_has_range()) {
    // required double range = 6;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t Sonar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.Sonar)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000000f7) ^ 0x000000f7) == 0) {  // All required fields are present.
    // required string frame = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame());

    // required string geometry = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_geometry());

    // required .gazebo.msgs.Pose world_pose = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *world_pose_);

    // required double range_min = 3;
    total_size += 1 + 8;

    // required double range_max = 4;
    total_size += 1 + 8;

    // required double radius = 5;
    total_size += 1 + 8;

    // required double range = 6;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .gazebo.msgs.Vector3d contact = 7;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *contact_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sonar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.Sonar)
  GOOGLE_DCHECK_NE(&from, this);
  const Sonar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Sonar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.Sonar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.Sonar)
    MergeFrom(*source);
  }
}

void Sonar::MergeFrom(const Sonar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.Sonar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      frame_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.frame_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      geometry_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.geometry_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_world_pose()->::gazebo::msgs::Pose::MergeFrom(from._internal_world_pose());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_contact()->::gazebo::msgs::Vector3d::MergeFrom(from._internal_contact());
    }
    if (cached_has_bits & 0x00000010u) {
      range_min_ = from.range_min_;
    }
    if (cached_has_bits & 0x00000020u) {
      range_max_ = from.range_max_;
    }
    if (cached_has_bits & 0x00000040u) {
      radius_ = from.radius_;
    }
    if (cached_has_bits & 0x00000080u) {
      range_ = from.range_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Sonar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.Sonar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sonar::CopyFrom(const Sonar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.Sonar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sonar::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000f7) != 0x000000f7) return false;
  if (_internal_has_world_pose()) {
    if (!world_pose_->IsInitialized()) return false;
  }
  if (_internal_has_contact()) {
    if (!contact_->IsInitialized()) return false;
  }
  return true;
}

void Sonar::InternalSwap(Sonar* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  frame_.Swap(&other->frame_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  geometry_.Swap(&other->geometry_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(world_pose_, other->world_pose_);
  swap(contact_, other->contact_);
  swap(range_min_, other->range_min_);
  swap(range_max_, other->range_max_);
  swap(radius_, other->radius_);
  swap(range_, other->range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Sonar::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gazebo::msgs::Sonar* Arena::CreateMaybeMessage< ::gazebo::msgs::Sonar >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::Sonar >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

GZ_REGISTER_STATIC_MSG("gazebo.msgs.Sonar", Sonar)
// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
