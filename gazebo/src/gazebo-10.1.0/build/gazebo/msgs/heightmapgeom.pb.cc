// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: heightmapgeom.proto

#include "heightmapgeom.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_heightmapgeom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeightmapGeom_Blend_heightmapgeom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_heightmapgeom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeightmapGeom_Texture_heightmapgeom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_image_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Image_image_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vector3d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3d_vector3d_2eproto;
namespace gazebo {
namespace msgs {
class HeightmapGeom_TextureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeightmapGeom_Texture> _instance;
} _HeightmapGeom_Texture_default_instance_;
class HeightmapGeom_BlendDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeightmapGeom_Blend> _instance;
} _HeightmapGeom_Blend_default_instance_;
class HeightmapGeomDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeightmapGeom> _instance;
} _HeightmapGeom_default_instance_;
}  // namespace msgs
}  // namespace gazebo
static void InitDefaultsscc_info_HeightmapGeom_heightmapgeom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_HeightmapGeom_default_instance_;
    new (ptr) ::gazebo::msgs::HeightmapGeom();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::HeightmapGeom::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_HeightmapGeom_heightmapgeom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_HeightmapGeom_heightmapgeom_2eproto}, {
      &scc_info_Image_image_2eproto.base,
      &scc_info_Vector3d_vector3d_2eproto.base,
      &scc_info_HeightmapGeom_Texture_heightmapgeom_2eproto.base,
      &scc_info_HeightmapGeom_Blend_heightmapgeom_2eproto.base,}};

static void InitDefaultsscc_info_HeightmapGeom_Blend_heightmapgeom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_HeightmapGeom_Blend_default_instance_;
    new (ptr) ::gazebo::msgs::HeightmapGeom_Blend();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::HeightmapGeom_Blend::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeightmapGeom_Blend_heightmapgeom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HeightmapGeom_Blend_heightmapgeom_2eproto}, {}};

static void InitDefaultsscc_info_HeightmapGeom_Texture_heightmapgeom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_HeightmapGeom_Texture_default_instance_;
    new (ptr) ::gazebo::msgs::HeightmapGeom_Texture();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::HeightmapGeom_Texture::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeightmapGeom_Texture_heightmapgeom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HeightmapGeom_Texture_heightmapgeom_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_heightmapgeom_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_heightmapgeom_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_heightmapgeom_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_heightmapgeom_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom_Texture, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom_Texture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom_Texture, diffuse_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom_Texture, normal_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom_Texture, size_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom_Blend, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom_Blend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom_Blend, min_height_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom_Blend, fade_dist_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom, image_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom, size_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom, origin_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom, heights_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom, width_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom, height_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom, texture_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom, blend_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom, use_terrain_paging_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom, filename_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom, sampling_),
  1,
  2,
  3,
  ~0u,
  4,
  5,
  ~0u,
  ~0u,
  6,
  0,
  7,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::gazebo::msgs::HeightmapGeom_Texture)},
  { 11, 18, sizeof(::gazebo::msgs::HeightmapGeom_Blend)},
  { 20, 36, sizeof(::gazebo::msgs::HeightmapGeom)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_HeightmapGeom_Texture_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_HeightmapGeom_Blend_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_HeightmapGeom_default_instance_),
};

const char descriptor_table_protodef_heightmapgeom_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023heightmapgeom.proto\022\013gazebo.msgs\032\013imag"
  "e.proto\032\016vector3d.proto\"\276\003\n\rHeightmapGeo"
  "m\022!\n\005image\030\001 \001(\0132\022.gazebo.msgs.Image\022#\n\004"
  "size\030\002 \002(\0132\025.gazebo.msgs.Vector3d\022%\n\006ori"
  "gin\030\003 \001(\0132\025.gazebo.msgs.Vector3d\022\017\n\007heig"
  "hts\030\004 \003(\002\022\r\n\005width\030\005 \001(\005\022\016\n\006height\030\006 \001(\005"
  "\0223\n\007texture\030\007 \003(\0132\".gazebo.msgs.Heightma"
  "pGeom.Texture\022/\n\005blend\030\010 \003(\0132 .gazebo.ms"
  "gs.HeightmapGeom.Blend\022\032\n\022use_terrain_pa"
  "ging\030\t \001(\010\022\020\n\010filename\030\n \001(\t\022\020\n\010sampling"
  "\030\013 \001(\r\0328\n\007Texture\022\017\n\007diffuse\030\001 \002(\t\022\016\n\006no"
  "rmal\030\002 \002(\t\022\014\n\004size\030\003 \002(\001\032.\n\005Blend\022\022\n\nmin"
  "_height\030\001 \002(\001\022\021\n\tfade_dist\030\002 \002(\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_heightmapgeom_2eproto_deps[2] = {
  &::descriptor_table_image_2eproto,
  &::descriptor_table_vector3d_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_heightmapgeom_2eproto_sccs[3] = {
  &scc_info_HeightmapGeom_heightmapgeom_2eproto.base,
  &scc_info_HeightmapGeom_Blend_heightmapgeom_2eproto.base,
  &scc_info_HeightmapGeom_Texture_heightmapgeom_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_heightmapgeom_2eproto_once;
static bool descriptor_table_heightmapgeom_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_heightmapgeom_2eproto = {
  &descriptor_table_heightmapgeom_2eproto_initialized, descriptor_table_protodef_heightmapgeom_2eproto, "heightmapgeom.proto", 512,
  &descriptor_table_heightmapgeom_2eproto_once, descriptor_table_heightmapgeom_2eproto_sccs, descriptor_table_heightmapgeom_2eproto_deps, 3, 2,
  schemas, file_default_instances, TableStruct_heightmapgeom_2eproto::offsets,
  file_level_metadata_heightmapgeom_2eproto, 3, file_level_enum_descriptors_heightmapgeom_2eproto, file_level_service_descriptors_heightmapgeom_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_heightmapgeom_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_heightmapgeom_2eproto), true);
namespace gazebo {
namespace msgs {

// ===================================================================

void HeightmapGeom_Texture::InitAsDefaultInstance() {
}
class HeightmapGeom_Texture::_Internal {
 public:
  using HasBits = decltype(std::declval<HeightmapGeom_Texture>()._has_bits_);
  static void set_has_diffuse(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_normal(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

HeightmapGeom_Texture::HeightmapGeom_Texture()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.HeightmapGeom.Texture)
}
HeightmapGeom_Texture::HeightmapGeom_Texture(const HeightmapGeom_Texture& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  diffuse_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_diffuse()) {
    diffuse_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diffuse_);
  }
  normal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_normal()) {
    normal_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.normal_);
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.HeightmapGeom.Texture)
}

void HeightmapGeom_Texture::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HeightmapGeom_Texture_heightmapgeom_2eproto.base);
  diffuse_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  normal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  size_ = 0;
}

HeightmapGeom_Texture::~HeightmapGeom_Texture() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.HeightmapGeom.Texture)
  SharedDtor();
}

void HeightmapGeom_Texture::SharedDtor() {
  diffuse_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  normal_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HeightmapGeom_Texture::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeightmapGeom_Texture& HeightmapGeom_Texture::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeightmapGeom_Texture_heightmapgeom_2eproto.base);
  return *internal_default_instance();
}


void HeightmapGeom_Texture::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.HeightmapGeom.Texture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      diffuse_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      normal_.ClearNonDefaultToEmptyNoArena();
    }
  }
  size_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* HeightmapGeom_Texture::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string diffuse = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_diffuse();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gazebo.msgs.HeightmapGeom.Texture.diffuse");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string normal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_normal();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gazebo.msgs.HeightmapGeom.Texture.normal");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeightmapGeom_Texture::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.HeightmapGeom.Texture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string diffuse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_diffuse().data(), static_cast<int>(this->_internal_diffuse().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.HeightmapGeom.Texture.diffuse");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_diffuse(), target);
  }

  // required string normal = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_normal().data(), static_cast<int>(this->_internal_normal().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.HeightmapGeom.Texture.normal");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_normal(), target);
  }

  // required double size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.HeightmapGeom.Texture)
  return target;
}

size_t HeightmapGeom_Texture::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gazebo.msgs.HeightmapGeom.Texture)
  size_t total_size = 0;

  if (_internal_has_diffuse()) {
    // required string diffuse = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_diffuse());
  }

  if (_internal_has_normal()) {
    // required string normal = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_normal());
  }

  if (_internal_has_size()) {
    // required double size = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t HeightmapGeom_Texture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.HeightmapGeom.Texture)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string diffuse = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_diffuse());

    // required string normal = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_normal());

    // required double size = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeightmapGeom_Texture::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.HeightmapGeom.Texture)
  GOOGLE_DCHECK_NE(&from, this);
  const HeightmapGeom_Texture* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeightmapGeom_Texture>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.HeightmapGeom.Texture)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.HeightmapGeom.Texture)
    MergeFrom(*source);
  }
}

void HeightmapGeom_Texture::MergeFrom(const HeightmapGeom_Texture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.HeightmapGeom.Texture)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      diffuse_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diffuse_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      normal_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.normal_);
    }
    if (cached_has_bits & 0x00000004u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HeightmapGeom_Texture::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.HeightmapGeom.Texture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeightmapGeom_Texture::CopyFrom(const HeightmapGeom_Texture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.HeightmapGeom.Texture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeightmapGeom_Texture::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void HeightmapGeom_Texture::InternalSwap(HeightmapGeom_Texture* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  diffuse_.Swap(&other->diffuse_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  normal_.Swap(&other->normal_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeightmapGeom_Texture::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HeightmapGeom_Blend::InitAsDefaultInstance() {
}
class HeightmapGeom_Blend::_Internal {
 public:
  using HasBits = decltype(std::declval<HeightmapGeom_Blend>()._has_bits_);
  static void set_has_min_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fade_dist(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

HeightmapGeom_Blend::HeightmapGeom_Blend()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.HeightmapGeom.Blend)
}
HeightmapGeom_Blend::HeightmapGeom_Blend(const HeightmapGeom_Blend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_height_, &from.min_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&fade_dist_) -
    reinterpret_cast<char*>(&min_height_)) + sizeof(fade_dist_));
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.HeightmapGeom.Blend)
}

void HeightmapGeom_Blend::SharedCtor() {
  ::memset(&min_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fade_dist_) -
      reinterpret_cast<char*>(&min_height_)) + sizeof(fade_dist_));
}

HeightmapGeom_Blend::~HeightmapGeom_Blend() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.HeightmapGeom.Blend)
  SharedDtor();
}

void HeightmapGeom_Blend::SharedDtor() {
}

void HeightmapGeom_Blend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeightmapGeom_Blend& HeightmapGeom_Blend::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeightmapGeom_Blend_heightmapgeom_2eproto.base);
  return *internal_default_instance();
}


void HeightmapGeom_Blend::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.HeightmapGeom.Blend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&min_height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fade_dist_) -
        reinterpret_cast<char*>(&min_height_)) + sizeof(fade_dist_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* HeightmapGeom_Blend::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double min_height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_min_height(&has_bits);
          min_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double fade_dist = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_fade_dist(&has_bits);
          fade_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeightmapGeom_Blend::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.HeightmapGeom.Blend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double min_height = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_min_height(), target);
  }

  // required double fade_dist = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_fade_dist(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.HeightmapGeom.Blend)
  return target;
}

size_t HeightmapGeom_Blend::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gazebo.msgs.HeightmapGeom.Blend)
  size_t total_size = 0;

  if (_internal_has_min_height()) {
    // required double min_height = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_fade_dist()) {
    // required double fade_dist = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t HeightmapGeom_Blend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.HeightmapGeom.Blend)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double min_height = 1;
    total_size += 1 + 8;

    // required double fade_dist = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeightmapGeom_Blend::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.HeightmapGeom.Blend)
  GOOGLE_DCHECK_NE(&from, this);
  const HeightmapGeom_Blend* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeightmapGeom_Blend>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.HeightmapGeom.Blend)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.HeightmapGeom.Blend)
    MergeFrom(*source);
  }
}

void HeightmapGeom_Blend::MergeFrom(const HeightmapGeom_Blend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.HeightmapGeom.Blend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      min_height_ = from.min_height_;
    }
    if (cached_has_bits & 0x00000002u) {
      fade_dist_ = from.fade_dist_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HeightmapGeom_Blend::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.HeightmapGeom.Blend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeightmapGeom_Blend::CopyFrom(const HeightmapGeom_Blend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.HeightmapGeom.Blend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeightmapGeom_Blend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void HeightmapGeom_Blend::InternalSwap(HeightmapGeom_Blend* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(min_height_, other->min_height_);
  swap(fade_dist_, other->fade_dist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeightmapGeom_Blend::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HeightmapGeom::InitAsDefaultInstance() {
  ::gazebo::msgs::_HeightmapGeom_default_instance_._instance.get_mutable()->image_ = const_cast< ::gazebo::msgs::Image*>(
      ::gazebo::msgs::Image::internal_default_instance());
  ::gazebo::msgs::_HeightmapGeom_default_instance_._instance.get_mutable()->size_ = const_cast< ::gazebo::msgs::Vector3d*>(
      ::gazebo::msgs::Vector3d::internal_default_instance());
  ::gazebo::msgs::_HeightmapGeom_default_instance_._instance.get_mutable()->origin_ = const_cast< ::gazebo::msgs::Vector3d*>(
      ::gazebo::msgs::Vector3d::internal_default_instance());
}
class HeightmapGeom::_Internal {
 public:
  using HasBits = decltype(std::declval<HeightmapGeom>()._has_bits_);
  static const ::gazebo::msgs::Image& image(const HeightmapGeom* msg);
  static void set_has_image(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::gazebo::msgs::Vector3d& size(const HeightmapGeom* msg);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::gazebo::msgs::Vector3d& origin(const HeightmapGeom* msg);
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_use_terrain_paging(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sampling(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::gazebo::msgs::Image&
HeightmapGeom::_Internal::image(const HeightmapGeom* msg) {
  return *msg->image_;
}
const ::gazebo::msgs::Vector3d&
HeightmapGeom::_Internal::size(const HeightmapGeom* msg) {
  return *msg->size_;
}
const ::gazebo::msgs::Vector3d&
HeightmapGeom::_Internal::origin(const HeightmapGeom* msg) {
  return *msg->origin_;
}
void HeightmapGeom::clear_image() {
  if (image_ != nullptr) image_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void HeightmapGeom::clear_size() {
  if (size_ != nullptr) size_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void HeightmapGeom::clear_origin() {
  if (origin_ != nullptr) origin_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
HeightmapGeom::HeightmapGeom()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.HeightmapGeom)
}
HeightmapGeom::HeightmapGeom(const HeightmapGeom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      heights_(from.heights_),
      texture_(from.texture_),
      blend_(from.blend_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_filename()) {
    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from._internal_has_image()) {
    image_ = new ::gazebo::msgs::Image(*from.image_);
  } else {
    image_ = nullptr;
  }
  if (from._internal_has_size()) {
    size_ = new ::gazebo::msgs::Vector3d(*from.size_);
  } else {
    size_ = nullptr;
  }
  if (from._internal_has_origin()) {
    origin_ = new ::gazebo::msgs::Vector3d(*from.origin_);
  } else {
    origin_ = nullptr;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&sampling_) -
    reinterpret_cast<char*>(&width_)) + sizeof(sampling_));
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.HeightmapGeom)
}

void HeightmapGeom::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HeightmapGeom_heightmapgeom_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&image_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sampling_) -
      reinterpret_cast<char*>(&image_)) + sizeof(sampling_));
}

HeightmapGeom::~HeightmapGeom() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.HeightmapGeom)
  SharedDtor();
}

void HeightmapGeom::SharedDtor() {
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete image_;
  if (this != internal_default_instance()) delete size_;
  if (this != internal_default_instance()) delete origin_;
}

void HeightmapGeom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeightmapGeom& HeightmapGeom::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeightmapGeom_heightmapgeom_2eproto.base);
  return *internal_default_instance();
}


void HeightmapGeom::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.HeightmapGeom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  heights_.Clear();
  texture_.Clear();
  blend_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      filename_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(image_ != nullptr);
      image_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(size_ != nullptr);
      size_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(origin_ != nullptr);
      origin_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sampling_) -
        reinterpret_cast<char*>(&width_)) + sizeof(sampling_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* HeightmapGeom::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .gazebo.msgs.Image image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .gazebo.msgs.Vector3d size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.Vector3d origin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float heights = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_heights(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<37>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_heights(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .gazebo.msgs.HeightmapGeom.Texture texture = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_texture(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .gazebo.msgs.HeightmapGeom.Blend blend = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blend(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool use_terrain_paging = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_use_terrain_paging(&has_bits);
          use_terrain_paging_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string filename = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gazebo.msgs.HeightmapGeom.filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sampling = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_sampling(&has_bits);
          sampling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeightmapGeom::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.HeightmapGeom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .gazebo.msgs.Image image = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::image(this), target, stream);
  }

  // required .gazebo.msgs.Vector3d size = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::size(this), target, stream);
  }

  // optional .gazebo.msgs.Vector3d origin = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::origin(this), target, stream);
  }

  // repeated float heights = 4;
  for (int i = 0, n = this->_internal_heights_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_heights(i), target);
  }

  // optional int32 width = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_width(), target);
  }

  // optional int32 height = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_height(), target);
  }

  // repeated .gazebo.msgs.HeightmapGeom.Texture texture = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_texture_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_texture(i), target, stream);
  }

  // repeated .gazebo.msgs.HeightmapGeom.Blend blend = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blend_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_blend(i), target, stream);
  }

  // optional bool use_terrain_paging = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_use_terrain_paging(), target);
  }

  // optional string filename = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.HeightmapGeom.filename");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_filename(), target);
  }

  // optional uint32 sampling = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_sampling(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.HeightmapGeom)
  return target;
}

size_t HeightmapGeom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.HeightmapGeom)
  size_t total_size = 0;

  // required .gazebo.msgs.Vector3d size = 2;
  if (_internal_has_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float heights = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_heights_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_heights_size());
    total_size += data_size;
  }

  // repeated .gazebo.msgs.HeightmapGeom.Texture texture = 7;
  total_size += 1UL * this->_internal_texture_size();
  for (const auto& msg : this->texture_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gazebo.msgs.HeightmapGeom.Blend blend = 8;
  total_size += 1UL * this->_internal_blend_size();
  for (const auto& msg : this->blend_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string filename = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional .gazebo.msgs.Image image = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *image_);
    }

  }
  if (cached_has_bits & 0x000000f8u) {
    // optional .gazebo.msgs.Vector3d origin = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *origin_);
    }

    // optional int32 width = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_width());
    }

    // optional int32 height = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_height());
    }

    // optional bool use_terrain_paging = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional uint32 sampling = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sampling());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeightmapGeom::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.HeightmapGeom)
  GOOGLE_DCHECK_NE(&from, this);
  const HeightmapGeom* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeightmapGeom>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.HeightmapGeom)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.HeightmapGeom)
    MergeFrom(*source);
  }
}

void HeightmapGeom::MergeFrom(const HeightmapGeom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.HeightmapGeom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  heights_.MergeFrom(from.heights_);
  texture_.MergeFrom(from.texture_);
  blend_.MergeFrom(from.blend_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_image()->::gazebo::msgs::Image::MergeFrom(from._internal_image());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_size()->::gazebo::msgs::Vector3d::MergeFrom(from._internal_size());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_origin()->::gazebo::msgs::Vector3d::MergeFrom(from._internal_origin());
    }
    if (cached_has_bits & 0x00000010u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000020u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000040u) {
      use_terrain_paging_ = from.use_terrain_paging_;
    }
    if (cached_has_bits & 0x00000080u) {
      sampling_ = from.sampling_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HeightmapGeom::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.HeightmapGeom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeightmapGeom::CopyFrom(const HeightmapGeom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.HeightmapGeom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeightmapGeom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(texture_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(blend_)) return false;
  if (_internal_has_image()) {
    if (!image_->IsInitialized()) return false;
  }
  if (_internal_has_size()) {
    if (!size_->IsInitialized()) return false;
  }
  if (_internal_has_origin()) {
    if (!origin_->IsInitialized()) return false;
  }
  return true;
}

void HeightmapGeom::InternalSwap(HeightmapGeom* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  heights_.InternalSwap(&other->heights_);
  texture_.InternalSwap(&other->texture_);
  blend_.InternalSwap(&other->blend_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(image_, other->image_);
  swap(size_, other->size_);
  swap(origin_, other->origin_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(use_terrain_paging_, other->use_terrain_paging_);
  swap(sampling_, other->sampling_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeightmapGeom::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gazebo::msgs::HeightmapGeom_Texture* Arena::CreateMaybeMessage< ::gazebo::msgs::HeightmapGeom_Texture >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::HeightmapGeom_Texture >(arena);
}
template<> PROTOBUF_NOINLINE ::gazebo::msgs::HeightmapGeom_Blend* Arena::CreateMaybeMessage< ::gazebo::msgs::HeightmapGeom_Blend >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::HeightmapGeom_Blend >(arena);
}
template<> PROTOBUF_NOINLINE ::gazebo::msgs::HeightmapGeom* Arena::CreateMaybeMessage< ::gazebo::msgs::HeightmapGeom >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::HeightmapGeom >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

GZ_REGISTER_STATIC_MSG("gazebo.msgs.HeightmapGeom", HeightmapGeom)
// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
