// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: imu_sensor.proto

#include "imu_sensor.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_imu_5fsensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IMUSensor_AngularVelocity_imu_5fsensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_imu_5fsensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IMUSensor_LinearAcceleration_imu_5fsensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sensor_5fnoise_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorNoise_sensor_5fnoise_2eproto;
namespace gazebo {
namespace msgs {
class IMUSensor_AngularVelocityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IMUSensor_AngularVelocity> _instance;
} _IMUSensor_AngularVelocity_default_instance_;
class IMUSensor_LinearAccelerationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IMUSensor_LinearAcceleration> _instance;
} _IMUSensor_LinearAcceleration_default_instance_;
class IMUSensorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IMUSensor> _instance;
} _IMUSensor_default_instance_;
}  // namespace msgs
}  // namespace gazebo
static void InitDefaultsscc_info_IMUSensor_imu_5fsensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_IMUSensor_default_instance_;
    new (ptr) ::gazebo::msgs::IMUSensor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::IMUSensor::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_IMUSensor_imu_5fsensor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_IMUSensor_imu_5fsensor_2eproto}, {
      &scc_info_IMUSensor_AngularVelocity_imu_5fsensor_2eproto.base,
      &scc_info_IMUSensor_LinearAcceleration_imu_5fsensor_2eproto.base,}};

static void InitDefaultsscc_info_IMUSensor_AngularVelocity_imu_5fsensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_IMUSensor_AngularVelocity_default_instance_;
    new (ptr) ::gazebo::msgs::IMUSensor_AngularVelocity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::IMUSensor_AngularVelocity::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IMUSensor_AngularVelocity_imu_5fsensor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IMUSensor_AngularVelocity_imu_5fsensor_2eproto}, {
      &scc_info_SensorNoise_sensor_5fnoise_2eproto.base,}};

static void InitDefaultsscc_info_IMUSensor_LinearAcceleration_imu_5fsensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_IMUSensor_LinearAcceleration_default_instance_;
    new (ptr) ::gazebo::msgs::IMUSensor_LinearAcceleration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::IMUSensor_LinearAcceleration::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IMUSensor_LinearAcceleration_imu_5fsensor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IMUSensor_LinearAcceleration_imu_5fsensor_2eproto}, {
      &scc_info_SensorNoise_sensor_5fnoise_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_imu_5fsensor_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_imu_5fsensor_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_imu_5fsensor_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_imu_5fsensor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::IMUSensor_AngularVelocity, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::IMUSensor_AngularVelocity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::IMUSensor_AngularVelocity, x_noise_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::IMUSensor_AngularVelocity, y_noise_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::IMUSensor_AngularVelocity, z_noise_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::IMUSensor_LinearAcceleration, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::IMUSensor_LinearAcceleration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::IMUSensor_LinearAcceleration, x_noise_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::IMUSensor_LinearAcceleration, y_noise_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::IMUSensor_LinearAcceleration, z_noise_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::IMUSensor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::IMUSensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::IMUSensor, angular_velocity_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::IMUSensor, linear_acceleration_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::gazebo::msgs::IMUSensor_AngularVelocity)},
  { 11, 19, sizeof(::gazebo::msgs::IMUSensor_LinearAcceleration)},
  { 22, 29, sizeof(::gazebo::msgs::IMUSensor)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_IMUSensor_AngularVelocity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_IMUSensor_LinearAcceleration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_IMUSensor_default_instance_),
};

const char descriptor_table_protodef_imu_5fsensor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020imu_sensor.proto\022\013gazebo.msgs\032\022sensor_"
  "noise.proto\"\302\003\n\tIMUSensor\022@\n\020angular_vel"
  "ocity\030\001 \001(\0132&.gazebo.msgs.IMUSensor.Angu"
  "larVelocity\022F\n\023linear_acceleration\030\002 \001(\013"
  "2).gazebo.msgs.IMUSensor.LinearAccelerat"
  "ion\032\222\001\n\017AngularVelocity\022)\n\007x_noise\030\001 \001(\013"
  "2\030.gazebo.msgs.SensorNoise\022)\n\007y_noise\030\002 "
  "\001(\0132\030.gazebo.msgs.SensorNoise\022)\n\007z_noise"
  "\030\003 \001(\0132\030.gazebo.msgs.SensorNoise\032\225\001\n\022Lin"
  "earAcceleration\022)\n\007x_noise\030\001 \001(\0132\030.gazeb"
  "o.msgs.SensorNoise\022)\n\007y_noise\030\002 \001(\0132\030.ga"
  "zebo.msgs.SensorNoise\022)\n\007z_noise\030\003 \001(\0132\030"
  ".gazebo.msgs.SensorNoise"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_imu_5fsensor_2eproto_deps[1] = {
  &::descriptor_table_sensor_5fnoise_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_imu_5fsensor_2eproto_sccs[3] = {
  &scc_info_IMUSensor_imu_5fsensor_2eproto.base,
  &scc_info_IMUSensor_AngularVelocity_imu_5fsensor_2eproto.base,
  &scc_info_IMUSensor_LinearAcceleration_imu_5fsensor_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_imu_5fsensor_2eproto_once;
static bool descriptor_table_imu_5fsensor_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_imu_5fsensor_2eproto = {
  &descriptor_table_imu_5fsensor_2eproto_initialized, descriptor_table_protodef_imu_5fsensor_2eproto, "imu_sensor.proto", 504,
  &descriptor_table_imu_5fsensor_2eproto_once, descriptor_table_imu_5fsensor_2eproto_sccs, descriptor_table_imu_5fsensor_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_imu_5fsensor_2eproto::offsets,
  file_level_metadata_imu_5fsensor_2eproto, 3, file_level_enum_descriptors_imu_5fsensor_2eproto, file_level_service_descriptors_imu_5fsensor_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_imu_5fsensor_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_imu_5fsensor_2eproto), true);
namespace gazebo {
namespace msgs {

// ===================================================================

void IMUSensor_AngularVelocity::InitAsDefaultInstance() {
  ::gazebo::msgs::_IMUSensor_AngularVelocity_default_instance_._instance.get_mutable()->x_noise_ = const_cast< ::gazebo::msgs::SensorNoise*>(
      ::gazebo::msgs::SensorNoise::internal_default_instance());
  ::gazebo::msgs::_IMUSensor_AngularVelocity_default_instance_._instance.get_mutable()->y_noise_ = const_cast< ::gazebo::msgs::SensorNoise*>(
      ::gazebo::msgs::SensorNoise::internal_default_instance());
  ::gazebo::msgs::_IMUSensor_AngularVelocity_default_instance_._instance.get_mutable()->z_noise_ = const_cast< ::gazebo::msgs::SensorNoise*>(
      ::gazebo::msgs::SensorNoise::internal_default_instance());
}
class IMUSensor_AngularVelocity::_Internal {
 public:
  using HasBits = decltype(std::declval<IMUSensor_AngularVelocity>()._has_bits_);
  static const ::gazebo::msgs::SensorNoise& x_noise(const IMUSensor_AngularVelocity* msg);
  static void set_has_x_noise(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::gazebo::msgs::SensorNoise& y_noise(const IMUSensor_AngularVelocity* msg);
  static void set_has_y_noise(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::gazebo::msgs::SensorNoise& z_noise(const IMUSensor_AngularVelocity* msg);
  static void set_has_z_noise(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::gazebo::msgs::SensorNoise&
IMUSensor_AngularVelocity::_Internal::x_noise(const IMUSensor_AngularVelocity* msg) {
  return *msg->x_noise_;
}
const ::gazebo::msgs::SensorNoise&
IMUSensor_AngularVelocity::_Internal::y_noise(const IMUSensor_AngularVelocity* msg) {
  return *msg->y_noise_;
}
const ::gazebo::msgs::SensorNoise&
IMUSensor_AngularVelocity::_Internal::z_noise(const IMUSensor_AngularVelocity* msg) {
  return *msg->z_noise_;
}
void IMUSensor_AngularVelocity::clear_x_noise() {
  if (x_noise_ != nullptr) x_noise_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void IMUSensor_AngularVelocity::clear_y_noise() {
  if (y_noise_ != nullptr) y_noise_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void IMUSensor_AngularVelocity::clear_z_noise() {
  if (z_noise_ != nullptr) z_noise_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
IMUSensor_AngularVelocity::IMUSensor_AngularVelocity()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.IMUSensor.AngularVelocity)
}
IMUSensor_AngularVelocity::IMUSensor_AngularVelocity(const IMUSensor_AngularVelocity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_x_noise()) {
    x_noise_ = new ::gazebo::msgs::SensorNoise(*from.x_noise_);
  } else {
    x_noise_ = nullptr;
  }
  if (from._internal_has_y_noise()) {
    y_noise_ = new ::gazebo::msgs::SensorNoise(*from.y_noise_);
  } else {
    y_noise_ = nullptr;
  }
  if (from._internal_has_z_noise()) {
    z_noise_ = new ::gazebo::msgs::SensorNoise(*from.z_noise_);
  } else {
    z_noise_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.IMUSensor.AngularVelocity)
}

void IMUSensor_AngularVelocity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IMUSensor_AngularVelocity_imu_5fsensor_2eproto.base);
  ::memset(&x_noise_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_noise_) -
      reinterpret_cast<char*>(&x_noise_)) + sizeof(z_noise_));
}

IMUSensor_AngularVelocity::~IMUSensor_AngularVelocity() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.IMUSensor.AngularVelocity)
  SharedDtor();
}

void IMUSensor_AngularVelocity::SharedDtor() {
  if (this != internal_default_instance()) delete x_noise_;
  if (this != internal_default_instance()) delete y_noise_;
  if (this != internal_default_instance()) delete z_noise_;
}

void IMUSensor_AngularVelocity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IMUSensor_AngularVelocity& IMUSensor_AngularVelocity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IMUSensor_AngularVelocity_imu_5fsensor_2eproto.base);
  return *internal_default_instance();
}


void IMUSensor_AngularVelocity::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.IMUSensor.AngularVelocity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(x_noise_ != nullptr);
      x_noise_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(y_noise_ != nullptr);
      y_noise_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(z_noise_ != nullptr);
      z_noise_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* IMUSensor_AngularVelocity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .gazebo.msgs.SensorNoise x_noise = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_x_noise(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.SensorNoise y_noise = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_y_noise(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.SensorNoise z_noise = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_z_noise(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMUSensor_AngularVelocity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.IMUSensor.AngularVelocity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .gazebo.msgs.SensorNoise x_noise = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::x_noise(this), target, stream);
  }

  // optional .gazebo.msgs.SensorNoise y_noise = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::y_noise(this), target, stream);
  }

  // optional .gazebo.msgs.SensorNoise z_noise = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::z_noise(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.IMUSensor.AngularVelocity)
  return target;
}

size_t IMUSensor_AngularVelocity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.IMUSensor.AngularVelocity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .gazebo.msgs.SensorNoise x_noise = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *x_noise_);
    }

    // optional .gazebo.msgs.SensorNoise y_noise = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *y_noise_);
    }

    // optional .gazebo.msgs.SensorNoise z_noise = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *z_noise_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMUSensor_AngularVelocity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.IMUSensor.AngularVelocity)
  GOOGLE_DCHECK_NE(&from, this);
  const IMUSensor_AngularVelocity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IMUSensor_AngularVelocity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.IMUSensor.AngularVelocity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.IMUSensor.AngularVelocity)
    MergeFrom(*source);
  }
}

void IMUSensor_AngularVelocity::MergeFrom(const IMUSensor_AngularVelocity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.IMUSensor.AngularVelocity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_x_noise()->::gazebo::msgs::SensorNoise::MergeFrom(from._internal_x_noise());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_y_noise()->::gazebo::msgs::SensorNoise::MergeFrom(from._internal_y_noise());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_z_noise()->::gazebo::msgs::SensorNoise::MergeFrom(from._internal_z_noise());
    }
  }
}

void IMUSensor_AngularVelocity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.IMUSensor.AngularVelocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMUSensor_AngularVelocity::CopyFrom(const IMUSensor_AngularVelocity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.IMUSensor.AngularVelocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUSensor_AngularVelocity::IsInitialized() const {
  if (_internal_has_x_noise()) {
    if (!x_noise_->IsInitialized()) return false;
  }
  if (_internal_has_y_noise()) {
    if (!y_noise_->IsInitialized()) return false;
  }
  if (_internal_has_z_noise()) {
    if (!z_noise_->IsInitialized()) return false;
  }
  return true;
}

void IMUSensor_AngularVelocity::InternalSwap(IMUSensor_AngularVelocity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_noise_, other->x_noise_);
  swap(y_noise_, other->y_noise_);
  swap(z_noise_, other->z_noise_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IMUSensor_AngularVelocity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IMUSensor_LinearAcceleration::InitAsDefaultInstance() {
  ::gazebo::msgs::_IMUSensor_LinearAcceleration_default_instance_._instance.get_mutable()->x_noise_ = const_cast< ::gazebo::msgs::SensorNoise*>(
      ::gazebo::msgs::SensorNoise::internal_default_instance());
  ::gazebo::msgs::_IMUSensor_LinearAcceleration_default_instance_._instance.get_mutable()->y_noise_ = const_cast< ::gazebo::msgs::SensorNoise*>(
      ::gazebo::msgs::SensorNoise::internal_default_instance());
  ::gazebo::msgs::_IMUSensor_LinearAcceleration_default_instance_._instance.get_mutable()->z_noise_ = const_cast< ::gazebo::msgs::SensorNoise*>(
      ::gazebo::msgs::SensorNoise::internal_default_instance());
}
class IMUSensor_LinearAcceleration::_Internal {
 public:
  using HasBits = decltype(std::declval<IMUSensor_LinearAcceleration>()._has_bits_);
  static const ::gazebo::msgs::SensorNoise& x_noise(const IMUSensor_LinearAcceleration* msg);
  static void set_has_x_noise(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::gazebo::msgs::SensorNoise& y_noise(const IMUSensor_LinearAcceleration* msg);
  static void set_has_y_noise(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::gazebo::msgs::SensorNoise& z_noise(const IMUSensor_LinearAcceleration* msg);
  static void set_has_z_noise(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::gazebo::msgs::SensorNoise&
IMUSensor_LinearAcceleration::_Internal::x_noise(const IMUSensor_LinearAcceleration* msg) {
  return *msg->x_noise_;
}
const ::gazebo::msgs::SensorNoise&
IMUSensor_LinearAcceleration::_Internal::y_noise(const IMUSensor_LinearAcceleration* msg) {
  return *msg->y_noise_;
}
const ::gazebo::msgs::SensorNoise&
IMUSensor_LinearAcceleration::_Internal::z_noise(const IMUSensor_LinearAcceleration* msg) {
  return *msg->z_noise_;
}
void IMUSensor_LinearAcceleration::clear_x_noise() {
  if (x_noise_ != nullptr) x_noise_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void IMUSensor_LinearAcceleration::clear_y_noise() {
  if (y_noise_ != nullptr) y_noise_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void IMUSensor_LinearAcceleration::clear_z_noise() {
  if (z_noise_ != nullptr) z_noise_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
IMUSensor_LinearAcceleration::IMUSensor_LinearAcceleration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.IMUSensor.LinearAcceleration)
}
IMUSensor_LinearAcceleration::IMUSensor_LinearAcceleration(const IMUSensor_LinearAcceleration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_x_noise()) {
    x_noise_ = new ::gazebo::msgs::SensorNoise(*from.x_noise_);
  } else {
    x_noise_ = nullptr;
  }
  if (from._internal_has_y_noise()) {
    y_noise_ = new ::gazebo::msgs::SensorNoise(*from.y_noise_);
  } else {
    y_noise_ = nullptr;
  }
  if (from._internal_has_z_noise()) {
    z_noise_ = new ::gazebo::msgs::SensorNoise(*from.z_noise_);
  } else {
    z_noise_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.IMUSensor.LinearAcceleration)
}

void IMUSensor_LinearAcceleration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IMUSensor_LinearAcceleration_imu_5fsensor_2eproto.base);
  ::memset(&x_noise_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_noise_) -
      reinterpret_cast<char*>(&x_noise_)) + sizeof(z_noise_));
}

IMUSensor_LinearAcceleration::~IMUSensor_LinearAcceleration() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.IMUSensor.LinearAcceleration)
  SharedDtor();
}

void IMUSensor_LinearAcceleration::SharedDtor() {
  if (this != internal_default_instance()) delete x_noise_;
  if (this != internal_default_instance()) delete y_noise_;
  if (this != internal_default_instance()) delete z_noise_;
}

void IMUSensor_LinearAcceleration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IMUSensor_LinearAcceleration& IMUSensor_LinearAcceleration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IMUSensor_LinearAcceleration_imu_5fsensor_2eproto.base);
  return *internal_default_instance();
}


void IMUSensor_LinearAcceleration::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.IMUSensor.LinearAcceleration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(x_noise_ != nullptr);
      x_noise_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(y_noise_ != nullptr);
      y_noise_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(z_noise_ != nullptr);
      z_noise_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* IMUSensor_LinearAcceleration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .gazebo.msgs.SensorNoise x_noise = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_x_noise(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.SensorNoise y_noise = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_y_noise(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.SensorNoise z_noise = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_z_noise(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMUSensor_LinearAcceleration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.IMUSensor.LinearAcceleration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .gazebo.msgs.SensorNoise x_noise = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::x_noise(this), target, stream);
  }

  // optional .gazebo.msgs.SensorNoise y_noise = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::y_noise(this), target, stream);
  }

  // optional .gazebo.msgs.SensorNoise z_noise = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::z_noise(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.IMUSensor.LinearAcceleration)
  return target;
}

size_t IMUSensor_LinearAcceleration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.IMUSensor.LinearAcceleration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .gazebo.msgs.SensorNoise x_noise = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *x_noise_);
    }

    // optional .gazebo.msgs.SensorNoise y_noise = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *y_noise_);
    }

    // optional .gazebo.msgs.SensorNoise z_noise = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *z_noise_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMUSensor_LinearAcceleration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.IMUSensor.LinearAcceleration)
  GOOGLE_DCHECK_NE(&from, this);
  const IMUSensor_LinearAcceleration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IMUSensor_LinearAcceleration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.IMUSensor.LinearAcceleration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.IMUSensor.LinearAcceleration)
    MergeFrom(*source);
  }
}

void IMUSensor_LinearAcceleration::MergeFrom(const IMUSensor_LinearAcceleration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.IMUSensor.LinearAcceleration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_x_noise()->::gazebo::msgs::SensorNoise::MergeFrom(from._internal_x_noise());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_y_noise()->::gazebo::msgs::SensorNoise::MergeFrom(from._internal_y_noise());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_z_noise()->::gazebo::msgs::SensorNoise::MergeFrom(from._internal_z_noise());
    }
  }
}

void IMUSensor_LinearAcceleration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.IMUSensor.LinearAcceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMUSensor_LinearAcceleration::CopyFrom(const IMUSensor_LinearAcceleration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.IMUSensor.LinearAcceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUSensor_LinearAcceleration::IsInitialized() const {
  if (_internal_has_x_noise()) {
    if (!x_noise_->IsInitialized()) return false;
  }
  if (_internal_has_y_noise()) {
    if (!y_noise_->IsInitialized()) return false;
  }
  if (_internal_has_z_noise()) {
    if (!z_noise_->IsInitialized()) return false;
  }
  return true;
}

void IMUSensor_LinearAcceleration::InternalSwap(IMUSensor_LinearAcceleration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_noise_, other->x_noise_);
  swap(y_noise_, other->y_noise_);
  swap(z_noise_, other->z_noise_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IMUSensor_LinearAcceleration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IMUSensor::InitAsDefaultInstance() {
  ::gazebo::msgs::_IMUSensor_default_instance_._instance.get_mutable()->angular_velocity_ = const_cast< ::gazebo::msgs::IMUSensor_AngularVelocity*>(
      ::gazebo::msgs::IMUSensor_AngularVelocity::internal_default_instance());
  ::gazebo::msgs::_IMUSensor_default_instance_._instance.get_mutable()->linear_acceleration_ = const_cast< ::gazebo::msgs::IMUSensor_LinearAcceleration*>(
      ::gazebo::msgs::IMUSensor_LinearAcceleration::internal_default_instance());
}
class IMUSensor::_Internal {
 public:
  using HasBits = decltype(std::declval<IMUSensor>()._has_bits_);
  static const ::gazebo::msgs::IMUSensor_AngularVelocity& angular_velocity(const IMUSensor* msg);
  static void set_has_angular_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::gazebo::msgs::IMUSensor_LinearAcceleration& linear_acceleration(const IMUSensor* msg);
  static void set_has_linear_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::gazebo::msgs::IMUSensor_AngularVelocity&
IMUSensor::_Internal::angular_velocity(const IMUSensor* msg) {
  return *msg->angular_velocity_;
}
const ::gazebo::msgs::IMUSensor_LinearAcceleration&
IMUSensor::_Internal::linear_acceleration(const IMUSensor* msg) {
  return *msg->linear_acceleration_;
}
IMUSensor::IMUSensor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.IMUSensor)
}
IMUSensor::IMUSensor(const IMUSensor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_angular_velocity()) {
    angular_velocity_ = new ::gazebo::msgs::IMUSensor_AngularVelocity(*from.angular_velocity_);
  } else {
    angular_velocity_ = nullptr;
  }
  if (from._internal_has_linear_acceleration()) {
    linear_acceleration_ = new ::gazebo::msgs::IMUSensor_LinearAcceleration(*from.linear_acceleration_);
  } else {
    linear_acceleration_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.IMUSensor)
}

void IMUSensor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IMUSensor_imu_5fsensor_2eproto.base);
  ::memset(&angular_velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&linear_acceleration_) -
      reinterpret_cast<char*>(&angular_velocity_)) + sizeof(linear_acceleration_));
}

IMUSensor::~IMUSensor() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.IMUSensor)
  SharedDtor();
}

void IMUSensor::SharedDtor() {
  if (this != internal_default_instance()) delete angular_velocity_;
  if (this != internal_default_instance()) delete linear_acceleration_;
}

void IMUSensor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IMUSensor& IMUSensor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IMUSensor_imu_5fsensor_2eproto.base);
  return *internal_default_instance();
}


void IMUSensor::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.IMUSensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(angular_velocity_ != nullptr);
      angular_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(linear_acceleration_ != nullptr);
      linear_acceleration_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* IMUSensor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .gazebo.msgs.IMUSensor.AngularVelocity angular_velocity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.IMUSensor.LinearAcceleration linear_acceleration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_acceleration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMUSensor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.IMUSensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .gazebo.msgs.IMUSensor.AngularVelocity angular_velocity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::angular_velocity(this), target, stream);
  }

  // optional .gazebo.msgs.IMUSensor.LinearAcceleration linear_acceleration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::linear_acceleration(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.IMUSensor)
  return target;
}

size_t IMUSensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.IMUSensor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .gazebo.msgs.IMUSensor.AngularVelocity angular_velocity = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *angular_velocity_);
    }

    // optional .gazebo.msgs.IMUSensor.LinearAcceleration linear_acceleration = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *linear_acceleration_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMUSensor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.IMUSensor)
  GOOGLE_DCHECK_NE(&from, this);
  const IMUSensor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IMUSensor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.IMUSensor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.IMUSensor)
    MergeFrom(*source);
  }
}

void IMUSensor::MergeFrom(const IMUSensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.IMUSensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_angular_velocity()->::gazebo::msgs::IMUSensor_AngularVelocity::MergeFrom(from._internal_angular_velocity());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_linear_acceleration()->::gazebo::msgs::IMUSensor_LinearAcceleration::MergeFrom(from._internal_linear_acceleration());
    }
  }
}

void IMUSensor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.IMUSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMUSensor::CopyFrom(const IMUSensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.IMUSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUSensor::IsInitialized() const {
  if (_internal_has_angular_velocity()) {
    if (!angular_velocity_->IsInitialized()) return false;
  }
  if (_internal_has_linear_acceleration()) {
    if (!linear_acceleration_->IsInitialized()) return false;
  }
  return true;
}

void IMUSensor::InternalSwap(IMUSensor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(angular_velocity_, other->angular_velocity_);
  swap(linear_acceleration_, other->linear_acceleration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IMUSensor::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gazebo::msgs::IMUSensor_AngularVelocity* Arena::CreateMaybeMessage< ::gazebo::msgs::IMUSensor_AngularVelocity >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::IMUSensor_AngularVelocity >(arena);
}
template<> PROTOBUF_NOINLINE ::gazebo::msgs::IMUSensor_LinearAcceleration* Arena::CreateMaybeMessage< ::gazebo::msgs::IMUSensor_LinearAcceleration >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::IMUSensor_LinearAcceleration >(arena);
}
template<> PROTOBUF_NOINLINE ::gazebo::msgs::IMUSensor* Arena::CreateMaybeMessage< ::gazebo::msgs::IMUSensor >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::IMUSensor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

GZ_REGISTER_STATIC_MSG("gazebo.msgs.IMUSensor", IMUSensor)
// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
