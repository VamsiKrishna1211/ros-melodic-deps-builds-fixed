// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cessna.proto

#include "cessna.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace gazebo {
namespace msgs {
class CessnaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Cessna> _instance;
} _Cessna_default_instance_;
}  // namespace msgs
}  // namespace gazebo
static void InitDefaultsscc_info_Cessna_cessna_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_Cessna_default_instance_;
    new (ptr) ::gazebo::msgs::Cessna();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::Cessna::InitAsDefaultInstance();
}

GZ_MSGS_VISIBLE ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Cessna_cessna_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Cessna_cessna_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cessna_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cessna_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cessna_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cessna_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Cessna, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Cessna, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Cessna, propeller_speed_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Cessna, left_aileron_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Cessna, left_flap_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Cessna, right_aileron_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Cessna, right_flap_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Cessna, elevators_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Cessna, rudder_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Cessna, cmd_propeller_speed_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Cessna, cmd_left_aileron_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Cessna, cmd_left_flap_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Cessna, cmd_right_aileron_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Cessna, cmd_right_flap_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Cessna, cmd_elevators_),
  PROTOBUF_FIELD_OFFSET(::gazebo::msgs::Cessna, cmd_rudder_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 19, sizeof(::gazebo::msgs::Cessna)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gazebo::msgs::_Cessna_default_instance_),
};

const char descriptor_table_protodef_cessna_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014cessna.proto\022\013gazebo.msgs\"\304\002\n\006Cessna\022\027"
  "\n\017propeller_speed\030\001 \001(\002\022\024\n\014left_aileron\030"
  "\002 \001(\002\022\021\n\tleft_flap\030\003 \001(\002\022\025\n\rright_ailero"
  "n\030\004 \001(\002\022\022\n\nright_flap\030\005 \001(\002\022\021\n\televators"
  "\030\006 \001(\002\022\016\n\006rudder\030\007 \001(\002\022\033\n\023cmd_propeller_"
  "speed\030\010 \001(\002\022\030\n\020cmd_left_aileron\030\t \001(\002\022\025\n"
  "\rcmd_left_flap\030\n \001(\002\022\031\n\021cmd_right_ailero"
  "n\030\013 \001(\002\022\026\n\016cmd_right_flap\030\014 \001(\002\022\025\n\rcmd_e"
  "levators\030\r \001(\002\022\022\n\ncmd_rudder\030\016 \001(\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cessna_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cessna_2eproto_sccs[1] = {
  &scc_info_Cessna_cessna_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cessna_2eproto_once;
static bool descriptor_table_cessna_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cessna_2eproto = {
  &descriptor_table_cessna_2eproto_initialized, descriptor_table_protodef_cessna_2eproto, "cessna.proto", 354,
  &descriptor_table_cessna_2eproto_once, descriptor_table_cessna_2eproto_sccs, descriptor_table_cessna_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_cessna_2eproto::offsets,
  file_level_metadata_cessna_2eproto, 1, file_level_enum_descriptors_cessna_2eproto, file_level_service_descriptors_cessna_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cessna_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cessna_2eproto), true);
namespace gazebo {
namespace msgs {

// ===================================================================

void Cessna::InitAsDefaultInstance() {
}
class Cessna::_Internal {
 public:
  using HasBits = decltype(std::declval<Cessna>()._has_bits_);
  static void set_has_propeller_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_left_aileron(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_left_flap(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_right_aileron(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_right_flap(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_elevators(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rudder(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_cmd_propeller_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_cmd_left_aileron(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_cmd_left_flap(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_cmd_right_aileron(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_cmd_right_flap(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_cmd_elevators(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_cmd_rudder(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

Cessna::Cessna()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.Cessna)
}
Cessna::Cessna(const Cessna& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&propeller_speed_, &from.propeller_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_rudder_) -
    reinterpret_cast<char*>(&propeller_speed_)) + sizeof(cmd_rudder_));
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.Cessna)
}

void Cessna::SharedCtor() {
  ::memset(&propeller_speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_rudder_) -
      reinterpret_cast<char*>(&propeller_speed_)) + sizeof(cmd_rudder_));
}

Cessna::~Cessna() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.Cessna)
  SharedDtor();
}

void Cessna::SharedDtor() {
}

void Cessna::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Cessna& Cessna::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Cessna_cessna_2eproto.base);
  return *internal_default_instance();
}


void Cessna::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.Cessna)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&propeller_speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cmd_propeller_speed_) -
        reinterpret_cast<char*>(&propeller_speed_)) + sizeof(cmd_propeller_speed_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&cmd_left_aileron_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cmd_rudder_) -
        reinterpret_cast<char*>(&cmd_left_aileron_)) + sizeof(cmd_rudder_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Cessna::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float propeller_speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_propeller_speed(&has_bits);
          propeller_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float left_aileron = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_left_aileron(&has_bits);
          left_aileron_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float left_flap = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_left_flap(&has_bits);
          left_flap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float right_aileron = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_right_aileron(&has_bits);
          right_aileron_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float right_flap = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_right_flap(&has_bits);
          right_flap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float elevators = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_elevators(&has_bits);
          elevators_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float rudder = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_rudder(&has_bits);
          rudder_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float cmd_propeller_speed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_cmd_propeller_speed(&has_bits);
          cmd_propeller_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float cmd_left_aileron = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_cmd_left_aileron(&has_bits);
          cmd_left_aileron_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float cmd_left_flap = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_cmd_left_flap(&has_bits);
          cmd_left_flap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float cmd_right_aileron = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_cmd_right_aileron(&has_bits);
          cmd_right_aileron_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float cmd_right_flap = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_cmd_right_flap(&has_bits);
          cmd_right_flap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float cmd_elevators = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_cmd_elevators(&has_bits);
          cmd_elevators_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float cmd_rudder = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_cmd_rudder(&has_bits);
          cmd_rudder_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Cessna::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.Cessna)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float propeller_speed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_propeller_speed(), target);
  }

  // optional float left_aileron = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_left_aileron(), target);
  }

  // optional float left_flap = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_left_flap(), target);
  }

  // optional float right_aileron = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_right_aileron(), target);
  }

  // optional float right_flap = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_right_flap(), target);
  }

  // optional float elevators = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_elevators(), target);
  }

  // optional float rudder = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_rudder(), target);
  }

  // optional float cmd_propeller_speed = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_cmd_propeller_speed(), target);
  }

  // optional float cmd_left_aileron = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_cmd_left_aileron(), target);
  }

  // optional float cmd_left_flap = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_cmd_left_flap(), target);
  }

  // optional float cmd_right_aileron = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_cmd_right_aileron(), target);
  }

  // optional float cmd_right_flap = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_cmd_right_flap(), target);
  }

  // optional float cmd_elevators = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_cmd_elevators(), target);
  }

  // optional float cmd_rudder = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_cmd_rudder(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.Cessna)
  return target;
}

size_t Cessna::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.Cessna)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float propeller_speed = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float left_aileron = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float left_flap = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float right_aileron = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float right_flap = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float elevators = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float rudder = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float cmd_propeller_speed = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional float cmd_left_aileron = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float cmd_left_flap = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float cmd_right_aileron = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float cmd_right_flap = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float cmd_elevators = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float cmd_rudder = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Cessna::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.Cessna)
  GOOGLE_DCHECK_NE(&from, this);
  const Cessna* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Cessna>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.Cessna)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.Cessna)
    MergeFrom(*source);
  }
}

void Cessna::MergeFrom(const Cessna& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.Cessna)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      propeller_speed_ = from.propeller_speed_;
    }
    if (cached_has_bits & 0x00000002u) {
      left_aileron_ = from.left_aileron_;
    }
    if (cached_has_bits & 0x00000004u) {
      left_flap_ = from.left_flap_;
    }
    if (cached_has_bits & 0x00000008u) {
      right_aileron_ = from.right_aileron_;
    }
    if (cached_has_bits & 0x00000010u) {
      right_flap_ = from.right_flap_;
    }
    if (cached_has_bits & 0x00000020u) {
      elevators_ = from.elevators_;
    }
    if (cached_has_bits & 0x00000040u) {
      rudder_ = from.rudder_;
    }
    if (cached_has_bits & 0x00000080u) {
      cmd_propeller_speed_ = from.cmd_propeller_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      cmd_left_aileron_ = from.cmd_left_aileron_;
    }
    if (cached_has_bits & 0x00000200u) {
      cmd_left_flap_ = from.cmd_left_flap_;
    }
    if (cached_has_bits & 0x00000400u) {
      cmd_right_aileron_ = from.cmd_right_aileron_;
    }
    if (cached_has_bits & 0x00000800u) {
      cmd_right_flap_ = from.cmd_right_flap_;
    }
    if (cached_has_bits & 0x00001000u) {
      cmd_elevators_ = from.cmd_elevators_;
    }
    if (cached_has_bits & 0x00002000u) {
      cmd_rudder_ = from.cmd_rudder_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Cessna::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.Cessna)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cessna::CopyFrom(const Cessna& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.Cessna)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cessna::IsInitialized() const {
  return true;
}

void Cessna::InternalSwap(Cessna* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(propeller_speed_, other->propeller_speed_);
  swap(left_aileron_, other->left_aileron_);
  swap(left_flap_, other->left_flap_);
  swap(right_aileron_, other->right_aileron_);
  swap(right_flap_, other->right_flap_);
  swap(elevators_, other->elevators_);
  swap(rudder_, other->rudder_);
  swap(cmd_propeller_speed_, other->cmd_propeller_speed_);
  swap(cmd_left_aileron_, other->cmd_left_aileron_);
  swap(cmd_left_flap_, other->cmd_left_flap_);
  swap(cmd_right_aileron_, other->cmd_right_aileron_);
  swap(cmd_right_flap_, other->cmd_right_flap_);
  swap(cmd_elevators_, other->cmd_elevators_);
  swap(cmd_rudder_, other->cmd_rudder_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Cessna::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gazebo::msgs::Cessna* Arena::CreateMaybeMessage< ::gazebo::msgs::Cessna >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::Cessna >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

GZ_REGISTER_STATIC_MSG("gazebo.msgs.Cessna", Cessna)
// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
